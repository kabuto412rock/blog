<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程式開發者的冒險</title>
    <link>https://kabuto412rock.github.io/</link>
    <description>Recent content on 程式開發者的冒險</description>
    <image>
      <url>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Sep 2023 06:25:37 +0000</lastBuildDate><atom:link href="https://kabuto412rock.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day 04 調整翻牌效果&amp;實作洗牌&amp;外加撲克牌連連看</title>
      <link>https://kabuto412rock.github.io/posts/it-day4/</link>
      <pubDate>Wed, 13 Sep 2023 06:25:37 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day4/</guid>
      <description>改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法&amp;lt;Transition&amp;gt;&amp;lt;/Transition&amp;gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。
為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:
// Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34;&amp;gt; &amp;lt;Transition name=&amp;#34;card-flip&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;isOpen&amp;#34; class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div v-else class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/Transition&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。
// Card.vue &amp;lt;style scoped&amp;gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i &amp;lt; length; i++) { let rand_to_swap = Math.</description>
    </item>
    
    <item>
      <title>Day 03 完成卡牌自動翻面的效果，但還不完整</title>
      <link>https://kabuto412rock.github.io/posts/it-day3/</link>
      <pubDate>Tue, 12 Sep 2023 03:51:05 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day3/</guid>
      <description>原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式
實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34; :class=&amp;#34;backCardClass&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([&amp;#34;poker-flip&amp;#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 &amp;lt;Card v-for=&amp;#34;card in boardCards&amp;#34; key=&amp;#34;card.value&amp;#34; :value=&amp;#34;card.value&amp;#34; :isOpen=&amp;#34;card.isOpen&amp;#34; @poker-flip=&amp;#34;toggleFlip&amp;#34; /&amp;gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.</description>
    </item>
    
    <item>
      <title>Day 02 調整css調整桌面&amp;產生52張紙牌</title>
      <link>https://kabuto412rock.github.io/posts/it-day2/</link>
      <pubDate>Mon, 11 Sep 2023 11:36:54 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day2/</guid>
      <description>動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。
意外發現原來App.vue檔(放置卡牌區的元件)在&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;定義的class雖然會套用到App.vue的&amp;lt;template&amp;gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue&amp;lt;template&amp;gt;內使用相同class名稱的元素
修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:
main { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。
header { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8
因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』
複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。
卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:
// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在&amp;lt;script setup&amp;gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 &amp;lt;template&amp;gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』
// Card.vue const pokerValue = props.</description>
    </item>
    
    <item>
      <title>Day 01 開發遊戲前先設定目標策略</title>
      <link>https://kabuto412rock.github.io/posts/it-day1/</link>
      <pubDate>Sun, 10 Sep 2023 07:51:40 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day1/</guid>
      <description>前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。
遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。
原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。
中短期目標 目前預計想完成的目標如下:
前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame &amp;amp;&amp;amp; npm run dev 2. 在新專案中建好git repo
git init git commit -am &amp;#39;initial&amp;#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版&amp;hellip; 照理來說狐狸圖應該要上下對齊才對!</description>
    </item>
    
    <item>
      <title>參加2023鐵人賽前的自我回顧</title>
      <link>https://kabuto412rock.github.io/posts/adventure-again/</link>
      <pubDate>Sun, 10 Sep 2023 02:35:25 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/adventure-again/</guid>
      <description>前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷
參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已
補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了&amp;hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!
在提到參賽主題之前，我想先說明工作後的經歷
工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。
名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯&amp;hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗
可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。
日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。
當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。
第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，
那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?
我還很誠實地回應是CSS框架夠好&amp;gt;口&amp;lt;
那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)
話題扯遠了!
在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。
這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!
後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!
技術總是層出不窮，身為工程師也只能適應變化 by 我
現在的工作? 待業，規律生活鍛鍊身體&amp;hellip;還有學習新知?!
或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上
參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示
因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，</description>
    </item>
    
    <item>
      <title>使用Docker建立Node容器&#43;MySQL容器的範本</title>
      <link>https://kabuto412rock.github.io/posts/express-mysql-docker/</link>
      <pubDate>Tue, 06 Jun 2023 14:08:22 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/express-mysql-docker/</guid>
      <description>前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制
Node.js (Express.js + MySQL Server) 建置流程(快速克隆 -&amp;gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - &amp;#34;3308:3306&amp;#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.</description>
    </item>
    
    <item>
      <title>如何解決動態載入(Dynamic Import)不支援智能提示</title>
      <link>https://kabuto412rock.github.io/posts/gen-import-file/</link>
      <pubDate>Tue, 01 Nov 2022 23:28:43 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/gen-import-file/</guid>
      <description>前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑
我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js
好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)
所以問題是如何保持好處且消除壞處
思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。
除非添加靜態引用這件事本身是自動的&amp;hellip;
解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。
範例 https://github.com/kabuto412rock/gen-static-import</description>
    </item>
    
    <item>
      <title>Linux指令-設定檔案讀寫權限 chmod</title>
      <link>https://kabuto412rock.github.io/posts/chmod-777/</link>
      <pubDate>Sun, 30 Oct 2022 04:00:14 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/chmod-777/</guid>
      <description>問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。
解法: 辦法很簡單，修改檔案權限全開
chmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作</description>
    </item>
    
    <item>
      <title>[教學] 使用Docker建立Nodejs開發環境範本</title>
      <link>https://kabuto412rock.github.io/posts/node-docker/</link>
      <pubDate>Sun, 03 Apr 2022 22:22:27 +0800</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/node-docker/</guid>
      <description>大綱
前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -&amp;gt; 趕時間) 建置流程Ver 2 (手動 -&amp;gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。
想看docker-compose建置Express + MYSQL環境，請走這
為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：
使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -&amp;gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。
廢話不多說，開始部屬吧&amp;hellip;
Node.js (Express.js) 建置流程Ver 1(快速克隆 -&amp;gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -&amp;gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.</description>
    </item>
    
    <item>
      <title>[Debug過程] 學Hugo並發布到Github page</title>
      <link>https://kabuto412rock.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 27 Nov 2021 23:03:49 +0800</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/my-first-post/</guid>
      <description>前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。
Bug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：
hugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform &amp;#34;ananke/css/main.css&amp;#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。
解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：
snap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：</description>
    </item>
    
    
    
  </channel>
</rss>
