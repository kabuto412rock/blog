[{"content":"目前撲克牌遊戲網站都是在自己的電腦用npm run dev啟動，今天會介紹如何部屬Vue專案到CloudFlare提供對外連線的網站，操作有誤的地方再請多多指教。\n使用Github Aciton建立 以下的操作需要事先註冊Cloudflare的帳號 和GitHub的帳號\n第0步 建立CloudFlare Page的Project 我是參考這個YouTube影片學習如何建立Cloudflare Page專案， 但跟影片不同的部分我在1:56我是選only-select-repositories選擇單一Repo的權限並命名專案名稱ithelp-game-test。\n影片看到5分鐘的時候，Cloudflare網站本身停止回應，後面的步驟就沒跟著影片教學做，後面第1~3步驟是我一步步看文件試出來的並非完全照官方建議走，因為需按專案本身調整。 第1步 建立 Cloudflare API Token 參考Cloudflare Pages GitHub Action說明以下只是我再額外自己截圖實作的步驟。\n登入帳號來到Cloudflare的儀表板，先點選左下角的Workers \u0026amp; Pages 接著點擊右手邊連結Manage API tokens進入管理API Token的頁面 點擊藍色按鈕Create Token前往建立API Token的頁面 來到API Tokens頁面後點選Create Custom Token旁的藍色按鈕Get Started 填寫Token name這邊幫Token取名為Deploy with github 在Permisions區塊點選Add新增一個權限Account/Cloudflare/Edit ，接著畫面拉到最下方點擊藍色按鈕Continue to summary。 此時Cloudflare會讓你再次確認權限，只需要注意畫面上有出現All accounts - Cloudflare Pages:Edit這個，沒問題就繼續點擊藍色按鈕Create Token。 至此Cloudflare API Token建立成功，點擊按鈕Copy先複製起來 第2步 將Cloudflare API Token設置於Github Repo 此處Github儲存庫是kabuto412rock/ithelp-pokergame\n前往Github的儲存庫點擊Setting-\u0026gt;Secrets and Variables-\u0026gt;Actions 來到Actions secrets and variables頁面後點擊綠色按鈕New Repository secret 設置新的密鑰CLOUDFLARE_API_TOKEN 填入先前取得的Cloudflare API Token 設置新的密鑰CLOUDFLARE_ACCOUNT_ID填入在Cloudflare的儀表板右手邊Manage API tokens上方的Account ID 在分支main加入檔案.github/workflows/publish.yml定義Github Action 這邊要注意的是 projectName對應填寫的專案名稱ithelp-game-test是我在第0步已經預先建立的專案名稱，若亂填的話Github Action自動執行時將會在步驟Publish to Cloudflare Pages出錯。\non: [push] jobs: publish: runs-on: ubuntu-latest permissions: contents: read deployments: write name: Publish to Cloudflare Pages steps: - name: Checkout uses: actions/checkout@v3 # Run a build step here if your project requires - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the \u0026#39;build\u0026#39; folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built. run: | npm ci npm run build - name: Publish to Cloudflare Pages uses: cloudflare/pages-action@v1 with: apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }} accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }} projectName: ithelp-game-test directory: dist # Optional: Enable this if you want to have GitHub Deployments triggered gitHubToken: ${{ secrets.GITHUB_TOKEN }} # Optional: Switch what branch you are publishing to. # By default this will be the branch which triggered this workflow branch: main # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta` wranglerVersion: \u0026#39;3\u0026#39; 第3步 在Cloudflare儀表板確認成功部屬 回到儀表板後可以注意到專案ithelp-game-test出現 visit site，就代表Github Action已經正常部屬上環境囉。\n部屬成功的網頁 https://ithelp-game-test.pages.dev 30天小結 今天是我參加鐵人賽的第30天最後使用Cloudflare Page搭配Github Action把網頁發布出去並寫成一篇文章。\n這30天對比他人的文章的知識含量遠遠不夠而且賽前又沒屯稿，中途也曾苦悶想要放棄比賽，幸好堅持寫文章不中斷，或許這就是一種鐵人精神吧!\n『在學習和創造之間不斷翻滾成長又分享過程給大家』\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day30 參考文件\nhttps://www.youtube.com/watch?v=MTc2CTYoszY https://github.com/marketplace/actions/cloudflare-pages-github-action https://developers.cloudflare.com/pages/platform/direct-upload/ ","permalink":"https://zongjia.me/posts/it-day30/","summary":"\u003cp\u003e目前撲克牌遊戲網站都是在自己的電腦用\u003ccode\u003enpm run dev\u003c/code\u003e啟動，今天會介紹如何部屬\u003ccode\u003eVue專案\u003c/code\u003e到\u003ccode\u003eCloudFlare\u003c/code\u003e提供對外連線的網站，操作有誤的地方再請多多指教。\u003c/p\u003e\n\u003ch2 id=\"使用github-aciton建立\"\u003e使用Github Aciton建立\u003c/h2\u003e\n\u003cp\u003e以下的操作需要事先註冊\u003ccode\u003eCloudflare\u003c/code\u003e的帳號 和\u003ccode\u003eGitHub\u003c/code\u003e的帳號\u003c/p\u003e\n\u003ch3 id=\"第0步-建立cloudflare-page的project\"\u003e第0步 建立CloudFlare Page的Project\u003c/h3\u003e\n\u003cp\u003e我是參考這個YouTube影片學習如何建立\u003ccode\u003eCloudflare Page\u003c/code\u003e專案，\n但跟影片不同的部分我在\u003cstrong\u003e1:56\u003c/strong\u003e我是選\u003cstrong\u003eonly-select-repositories\u003c/strong\u003e選擇單一Repo的權限並命名專案名稱\u003ccode\u003eithelp-game-test\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e影片看到5分鐘的時候，\u003ccode\u003eCloudflare\u003c/code\u003e網站本身停止回應，後面的步驟就沒跟著影片教學做，後面第1~3步驟是我一步步看文件試出來的並非完全照官方建議走，因為需按專案本身調整。\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/MTc2CTYoszY?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"第1步-建立-cloudflare-api-token\"\u003e第1步 建立 Cloudflare API Token\u003c/h3\u003e\n\u003cp\u003e參考\u003ca href=\"https://github.com/marketplace/actions/cloudflare-pages-github-action\"\u003eCloudflare Pages GitHub Action說明\u003c/a\u003e以下只是我再額外自己截圖實作的步驟。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e登入帳號來到\u003ccode\u003eCloudflare\u003c/code\u003e的儀表板，先點選左下角的\u003ccode\u003eWorkers \u0026amp; Pages\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e接著點擊右手邊連結\u003ccode\u003eManage API tokens\u003c/code\u003e進入管理\u003ccode\u003eAPI Token\u003c/code\u003e的頁面\n\u003cimg alt=\"Alt text\" loading=\"lazy\" src=\"/images/day30-step2.png\"\u003e\u003c/li\u003e\n\u003cli\u003e點擊藍色按鈕\u003ccode\u003eCreate Token\u003c/code\u003e前往建立API Token的頁面\n\u003cimg alt=\"Alt text\" loading=\"lazy\" src=\"/images/day30-step3.png\"\u003e\u003c/li\u003e\n\u003cli\u003e來到API Tokens頁面後點選\u003cstrong\u003eCreate Custom Token\u003c/strong\u003e旁的藍色按鈕\u003ccode\u003eGet Started\u003c/code\u003e\n\u003cimg alt=\"Alt text\" loading=\"lazy\" src=\"/images/day30-step4.png\"\u003e\u003c/li\u003e\n\u003cli\u003e填寫\u003ccode\u003eToken name\u003c/code\u003e這邊幫Token取名為\u003cstrong\u003eDeploy with github\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e在\u003ccode\u003ePermisions\u003c/code\u003e區塊點選\u003ccode\u003eAdd\u003c/code\u003e新增一個權限\u003ccode\u003eAccount\u003c/code\u003e/\u003ccode\u003eCloudflare\u003c/code\u003e/\u003ccode\u003eEdit\u003c/code\u003e ，接著畫面拉到最下方點擊藍色按鈕\u003ccode\u003eContinue to summary\u003c/code\u003e。\n\u003cimg alt=\"新增APIToken\" loading=\"lazy\" src=\"/images/day30-step5.png\"\u003e\u003c/li\u003e\n\u003cli\u003e此時\u003ccode\u003eCloudflare\u003c/code\u003e會讓你再次確認權限，只需要注意畫面上有出現\u003ccode\u003eAll accounts - Cloudflare Pages:Edit\u003c/code\u003e這個，沒問題就繼續點擊藍色按鈕\u003ccode\u003eCreate Token\u003c/code\u003e。\n\u003cimg alt=\"Alt text\" loading=\"lazy\" src=\"/images/day30-step7.png\"\u003e\u003c/li\u003e\n\u003cli\u003e至此\u003ccode\u003eCloudflare API Token\u003c/code\u003e建立成功，點擊按鈕\u003ccode\u003eCopy\u003c/code\u003e先複製起來\n\u003cimg alt=\"點擊Copy按鈕複製\" loading=\"lazy\" src=\"/images/day30-step8.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"第2步-將cloudflare-api-token設置於github-repo\"\u003e第2步 將Cloudflare API Token設置於Github Repo\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e此處Github儲存庫是\u003ca href=\"https://github.com/kabuto412rock/ithelp-pokergame\"\u003ekabuto412rock/ithelp-pokergame\u003c/a\u003e\u003c/p\u003e","title":"Day30 使用Cloudflare部屬Vue靜態網站"},{"content":"目前所製作的經典紙牌接龍其實是源自於Klondike Solitaire的規則，只是發牌區是一次抽一張的循環制，因為網路上有看到每次都是抽3張但只能移動最上面那一張的規則，那種非常難玩挑戰性也很大。\n判斷紙牌接龍無解這個問題這兩天困擾我很久，在查過無數資料略讀幾篇論文後，尤其實際有用的資料大多是英文論文😭，發現這絕對不是一兩天的空餘時間就可以理解的目標，所以決定降低目標不去判斷是否已經死局，改為【簡單評估是否還有活路】。\n簡單評估是否還有活路 尋找活路的最容易想到的3種可能移動方式:\n七牌堆最後一張後面要接的牌存在於發牌區中 任一七牌堆壓在隱藏牌上放的那張可以接在其他七牌堆的後面 發牌區任一張牌或七牌堆的最後一張 可移動結算牌堆 開始實作 按照簡單評估的三項規則依序檢查，若有檢查可移動的方式為true就不會繼續檢查後續的規則，以下為程式碼:\n// poker-helper.js /** 檢查是否還有效的移動卡牌 * @param {CardStacks} cardStacks * @returns {boolean} 有有效移動為true 可能沒有為false */ function checkValidMove(cardStacks) { const dealerStacksValues = cardStacks[\u0026#39;dealerStacks\u0026#39;].map((card) =\u0026gt; card.value); const seventLastValues = {}; // 1. `七牌堆`最後一張後面要接的牌存在於`發牌區`中 let haveMove1 = SEVEN_STACKS.some((name) =\u0026gt; { const stack = cardStacks[name]; if (stack.length === 0) { return false; } const lastCard = stack[stack.length - 1]; const lastCardNumber = lastCard.value % 13; seventLastValues[name] = lastCard.value; // A後面沒有要接的，但可移動到結算牌堆(回應成功) if (lastCardNumber === 0) return true; const targetPokerValues = getDifferentColorPokerValues(lastCard.value - 1); return dealerStacksValues.some((value) =\u0026gt; { return targetPokerValues.includes(value); }); }); if (haveMove1) { console.log(\u0026#34;第1活局: `七牌堆`最後一張後面要接的牌存在於`發牌區`\u0026#34;); return true; } // 2. 任一`七牌堆`壓在隱藏牌上放的那張可以接在其他`七牌堆`的後面(不包含本身牌堆) let haveMove2 = SEVEN_STACKS.some((name) =\u0026gt; { const stack = cardStacks[name]; if (stack.length === 0) { return false; } let firstOpenCard = null; for (let i = 1; i \u0026lt; stack.length; i++) { if (stack[i].isOpen \u0026amp;\u0026amp; (!stack[i - 1].isOpen)) { firstOpenCard = stack[i]; break; } } // 沒有壓在隱藏牌上的牌或 放的那張是K無法接在其他牌堆後面(回應失敗) if (firstOpenCard === null || firstOpenCard.value % 13 === 12) { return false; } // 檢查是否有可以接的牌 const targetPokerValues = getDifferentColorPokerValues(firstOpenCard.value + 1) return SEVEN_STACKS.some((name2) =\u0026gt; { if (name === name2) return false; if (seventLastValues[name2]) { return targetPokerValues.includes(seventLastValues[name2]); } return false; }); }); if (haveMove2) { console.log(\u0026#34;第2活局: 任一`七牌堆`壓在隱藏牌上放的那張可以接在其他`七牌堆`的後面(不包含本身牌堆)\u0026#34;); return true; } // 3. `發牌區`任一張牌或`七牌堆`的最後一張 可移動至 `結算牌堆` let haveMove3 = FOUR_SUITS.some((suit, index) =\u0026gt; { const stackLen = cardStacks[suit].length; if (stackLen === 13) return false; let targetValue = index * 13 + stackLen; return dealerStacksValues.includes(targetValue) || Object.values(seventLastValues).includes(targetValue); }); if (haveMove3) { console.log(\u0026#34;第3活局: `發牌區`任一張牌或`七牌堆`的最後一張 可移動至 `結算牌堆`\u0026#34;); } return haveMove3; } /** 取得相同數字不同顏色的撲克牌編碼 * @param {Number} pokerValue 對應撲克牌的編號 * @returns {Array} [number1, number2] */ function getDifferentColorPokerValues(pokerValue) { const red = (Math.floor(pokerValue / 13) % 3) == 0 const number = pokerValue % 13; return [number + (red ? 13 : 0), number + (red ? 26 : 39)]; } 然後在DragDemo.vue中使用函數checkValidMove(cardStacks)將結果【是否有可移動的牌(推測)】儲存在計算ref變數。\n// DragDemo.vue const maybeHaveValidMove = computed(() =\u0026gt; checkValidMove(cardStacks)); 並使用以下方式顯示在Vue樣板\n// DragDemo.vue \u0026lt;span\u0026gt; {{ maybeHaveValidMove ? \u0026#39;(遊戲還有解)\u0026#39; : \u0026#39;(可能無解😎)\u0026#39; }} \u0026lt;/span\u0026gt; 小結 今天放棄判斷是否無解的實現，改為實現可能無解去提示玩家是我目前能做到的部分。\n這讓我想到如果要去實現一個執行起來會很沒效率的功能，中間尋找答案的過程會求助網路、同事，但最終預期無法在時限內完成最後好像也是看PM能不能協調修改規格，但自己的SideProject客戶/PM/RD都是同一人的情況下就可以自由的修改規格😂👍\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day29 參考文件(想讓大腦受苦的請看下面論文)\nhttps://www.theseus.fi/bitstream/handle/10024/501330/Voima_Mikko.pdf?sequence=2\u0026amp;isAllowed=y https://core.ac.uk/download/pdf/82132940.pdf ","permalink":"https://zongjia.me/posts/it-day29/","summary":"\u003cp\u003e目前所製作的經典紙牌接龍其實是源自於\u003ccode\u003eKlondike Solitaire\u003c/code\u003e的規則，只是發牌區是一次抽一張的循環制，因為網路上有看到每次都是抽3張但只能移動最上面那一張的規則，那種非常難玩挑戰性也很大。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e判斷紙牌接龍無解\u003c/strong\u003e這個問題這兩天困擾我很久，在查過無數資料略讀幾篇論文後，尤其實際有用的資料大多是英文論文😭，發現這絕對不是一兩天的空餘時間就可以理解的目標，所以決定降低目標不去判斷是否已經死局，改為【簡單評估是否還有活路】。\u003c/p\u003e\n\u003ch2 id=\"簡單評估是否還有活路\"\u003e簡單評估是否還有活路\u003c/h2\u003e\n\u003cp\u003e尋找活路的最容易想到的3種可能移動方式:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e七牌堆\u003c/code\u003e最後一張後面要接的牌存在於\u003ccode\u003e發牌區\u003c/code\u003e中\u003c/li\u003e\n\u003cli\u003e任一\u003ccode\u003e七牌堆\u003c/code\u003e壓在隱藏牌上放的那張可以接在其他\u003ccode\u003e七牌堆\u003c/code\u003e的後面\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e發牌區\u003c/code\u003e任一張牌或\u003ccode\u003e七牌堆\u003c/code\u003e的最後一張 可移動\u003ccode\u003e結算牌堆\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"開始實作\"\u003e開始實作\u003c/h3\u003e\n\u003cp\u003e按照簡單評估的三項規則依序檢查，若有檢查可移動的方式為\u003cstrong\u003etrue\u003c/strong\u003e就不會繼續檢查後續的規則，以下為程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** 檢查是否還有效的移動卡牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {CardStacks} cardStacks\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @returns {boolean} 有有效移動為true 可能沒有為false\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckValidMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerStacksValues\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eseventLastValues\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 1. `七牌堆`最後一張後面要接的牌存在於`發牌區`中\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehaveMove1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esome\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eseventLastValues\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// A後面沒有要接的，但可移動到結算牌堆(回應成功)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetPokerValues\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDifferentColorPokerValues\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerStacksValues\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esome\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetPokerValues\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehaveMove1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;第1活局: `七牌堆`最後一張後面要接的牌存在於`發牌區`\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 2. 任一`七牌堆`壓在隱藏牌上放的那張可以接在其他`七牌堆`的後面(不包含本身牌堆)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehaveMove2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esome\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efirstOpenCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efirstOpenCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 沒有壓在隱藏牌上的牌或 放的那張是K無法接在其他牌堆後面(回應失敗)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efirstOpenCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efirstOpenCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 檢查是否有可以接的牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetPokerValues\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDifferentColorPokerValues\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efirstOpenCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esome\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename2\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename2\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eseventLastValues\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename2\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetPokerValues\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eseventLastValues\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename2\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehaveMove2\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;第2活局: 任一`七牌堆`壓在隱藏牌上放的那張可以接在其他`七牌堆`的後面(不包含本身牌堆)\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 3. `發牌區`任一張牌或`七牌堆`的最後一張 可移動至 `結算牌堆`\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehaveMove3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esome\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003esuit\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estackLen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003esuit\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estackLen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetValue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estackLen\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerStacksValues\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetValue\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e Object.\u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eseventLastValues\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etargetValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehaveMove3\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;第3活局: `發牌區`任一張牌或`七牌堆`的最後一張 可移動至 `結算牌堆`\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehaveMove3\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** 取得相同數字不同顏色的撲克牌編碼\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {Number} pokerValue 對應撲克牌的編號\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @returns {Array} [number1, number2] \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDifferentColorPokerValues\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ered\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (Math.\u003cspan style=\"color:#a6e22e\"\u003efloor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e [\u003cspan style=\"color:#a6e22e\"\u003enumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ered\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003enumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ered\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e39\u003c/span\u003e)];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然後在\u003ccode\u003eDragDemo.vue\u003c/code\u003e中使用函數\u003ccode\u003echeckValidMove(cardStacks)\u003c/code\u003e將結果【是否有可移動的牌(推測)】儲存在計算ref變數。\u003c/p\u003e","title":"Day29 簡單評估是否還有活路"},{"content":"前言 因為在玩紙牌接龍的過程中可能會被玩到進入無解的情況，也就是再怎麼移動撲克牌都無法完成，所以如何在遊玩中告知玩家這件事情蠻重要的，避免不必要的嘗試。\n思考如何實現 老實說這篇文章可能是對我來說最難寫的，雖然身為開發者可以知道7牌堆全部的蓋牌底下是什麼花色數字， 但如何知道場上已經無解又是一回事。\n基本上不考慮暴力的窮舉法，其實查到的結果大致可以推導無解的情況，不論是先天或是後天操作導致的無解都是因為疊在蓋牌上方的牌無法移動導致蓋牌無法打開，所以昨天自動結算才可以依照已經沒有蓋牌的情況下當作全部完成。\n所以理論上7牌堆如果出現壓住隱藏牌的那一張未來完全無法移動，那就代表死局。\n決定判斷死局的演算法(有誤) 雖然看了很多篇文章也理解死局的構成就是壓在蓋牌上的牌無法移動， 但沒有相對簡單的判斷的方法\u0026hellip;\n在邊玩接龍邊思考死局判斷的過程中，想到一個判斷方法在此命名為異色大一若隱即死局。\n名稱聽起來很中二，檢查方式是7牌堆共7行，每一直行最上面壓住隱牌的第一張牌視為檢查點(Ex: 梅花6)， 檢查隱藏牌中是否有兩個花色與檢查點不同且大一號的數字(Ex: 紅心7、方塊7)，若有則視為此局已無解(死局)，若無則繼續檢查其他的檢查點。\n範例圖: 黑色框為隱藏牌、紫色為檢查點、橘色為相對檢查點大一號的異色牌 小結 實作後發現此演算法有錯誤會出現判斷活局/死局相反的情況，\n但還是把程式碼推上去，明天繼續研究是否有其他方法解🫡。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day28\n參考文件\n知乎-深度剖析微软《纸牌》玩法 Quora-Does the solitaire game always have a solution? ","permalink":"https://zongjia.me/posts/it-day28/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e因為在玩紙牌接龍的過程中可能會被玩到進入無解的情況，也就是再怎麼移動撲克牌都無法完成，所以如何在遊玩中告知玩家這件事情蠻重要的，避免不必要的嘗試。\u003c/p\u003e\n\u003ch2 id=\"思考如何實現\"\u003e思考如何實現\u003c/h2\u003e\n\u003cp\u003e老實說這篇文章可能是對我來說最難寫的，雖然身為開發者可以知道\u003ccode\u003e7牌堆\u003c/code\u003e全部的蓋牌底下是什麼花色數字，\n但如何知道\u003ccode\u003e場上已經無解\u003c/code\u003e又是一回事。\u003c/p\u003e\n\u003cp\u003e基本上不考慮暴力的窮舉法，其實查到的結果大致可以推導無解的情況，不論是先天或是後天操作導致的無解都是因為\u003cstrong\u003e疊在蓋牌上方的牌無法移動\u003c/strong\u003e導致蓋牌無法打開，所以昨天\u003cstrong\u003e自動結算\u003c/strong\u003e才可以依照已經沒有蓋牌的情況下當作全部完成。\u003c/p\u003e\n\u003cp\u003e所以理論上\u003ccode\u003e7牌堆\u003c/code\u003e如果出現壓住隱藏牌的那一張未來完全無法移動，那就代表死局。\u003c/p\u003e\n\u003ch3 id=\"決定判斷死局的演算法有誤\"\u003e決定判斷死局的演算法(有誤)\u003c/h3\u003e\n\u003cp\u003e雖然看了很多篇文章也理解死局的構成就是壓在蓋牌上的牌無法移動，\n但沒有相對簡單的判斷的方法\u0026hellip;\u003c/p\u003e\n\u003cp\u003e在邊玩接龍邊思考死局判斷的過程中，想到一個判斷方法在此命名為\u003cstrong\u003e異色大一若隱即死局\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e名稱聽起來很中二，檢查方式是\u003ccode\u003e7牌堆\u003c/code\u003e共7行，每一直行最上面壓住隱牌的第一張牌視為檢查點(Ex: 梅花6)，\n檢查隱藏牌中是否有兩個花色與檢查點不同且大一號的數字(Ex: 紅心7、方塊7)，若有則視為此局已無解(死局)，若無則繼續檢查其他的檢查點。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e範例圖: \u003cstrong\u003e黑色框\u003c/strong\u003e為隱藏牌、\u003cstrong\u003e紫色\u003c/strong\u003e為檢查點、\u003cstrong\u003e橘色\u003c/strong\u003e為相對檢查點大一號的異色牌\n\u003cimg alt=\"異花接我皆隱即死局的說明圖\" loading=\"lazy\" src=\"/images/itday28-algorithm-demo.png\"\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"小結\"\u003e小結\u003c/h2\u003e\n\u003cp\u003e實作後發現此演算法有錯誤會出現判斷活局/死局相反的情況，\u003cbr\u003e\n但還是把程式碼推上去，明天繼續研究是否有其他方法解🫡。\u003c/p\u003e\n\u003cp\u003e程式碼: \u003ca href=\"https://github.com/kabuto412rock/ithelp-pokergame/tree/day28\"\u003ehttps://github.com/kabuto412rock/ithelp-pokergame/tree/day28\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e參考文件\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/26652400\"\u003e知乎-深度剖析微软《纸牌》玩法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.quora.com/Does-the-solitaire-game-always-have-a-solution\"\u003eQuora-Does the solitaire game always have a solution?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Day28 評估是否無牌可走，建議棄權的提示(嘗試失敗)"},{"content":"前言 如標題所言，今天要做的就是補上『當牌全開時視為已完成遊戲』自動結算遊戲時間、分數， 有實際在現實世界中用撲克牌玩過接龍的應該知道其實最麻煩的就是收牌結尾，因為最後只是慢慢把所有牌都移到結算牌堆。\n事先說明: 此篇不會實作自動移牌的動畫效果。\n開發前思考 判斷牌全開不難! 不需要判斷全部牌是否已打開， 只需要判斷7牌堆每堆最上面第一張牌是否已打開，若有蓋著那就不能結算， 若每堆第一張都沒蓋著就可以開始結算。\n結算分數時只需要考慮補上發牌區、移牌區有幾張牌，再用加分的方式計算最後的總分。\n實作過程 修改遊戲結算時機 原本函數checkSolitaireGameDone(cardStacks)是判斷結算牌堆集滿13張牌則當作遊戲結束，但思考過後結算牌堆都集滿13張等同於七牌區的牌全空一樣會回應true，因此放心調整為檢查七牌堆的最上方開牌的狀態當作遊戲結束的依據。\n// poker-helper.js /** * 檢查紙牌接龍是否完成 * @param {CardStacks} cardStacks */ function checkSolitaireGameDone(cardStacks) { // 檢查每組牌堆第一張牌覆蓋著，就代表遊戲還沒結束 const isDone = SEVEN_STACKS.reduce((prev, stackName) =\u0026gt; { const stack = cardStacks[stackName]; if (stack.length \u0026gt; 0 \u0026amp;\u0026amp; (!stack[0].isOpen)) { return false; } return prev; }, true); return isDone; } 計算剩餘牌數\u0026amp;結算分數 新增函數getRemainCardCount(cardStacks)計算並返回發牌區和七牌堆的剩餘牌數\n// poker-helper.js /** * 計算剩餘在發牌區和7牌堆的張數 * @param {CardStacks} cardStacks * @returns {Object} {dealer: number, seven: number} */ function getRemainCardCount(cardStacks) { let dealerStacksCount = cardStacks[\u0026#39;dealerStacks\u0026#39;].length; let sevenCount = 0; SEVEN_STACKS.forEach((name) =\u0026gt; { sevenCount += cardStacks[name].length; }); return { dealer: dealerStacksCount, seven: sevenCount, }; } 在接龍頁面使用computed宣告一個變數remainCardCounts，負責返回剩餘的牌數。\n// DragDemo.vue // 發牌區、七牌堆的剩餘牌數 const remainCardCounts = computed(() =\u0026gt; { const { dealer, seven } = getRemainCardCount(cardStacks); return { dealer, seven }; }); 然後調整結算畫面的樣板，把發牌區/7牌堆的剩餘牌數印出來並計算最後的加權總分(結算分數)，不更動原本的累計分數。\n\u0026lt;BModal v-model=\u0026#34;doneModal\u0026#34; title=\u0026#34;結算畫面\u0026#34; hide-footer @close=\u0026#34;resetGame\u0026#34; @hide=\u0026#34;resetGame\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;玩家 xxx\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;完成花費時間: {{ gameTime }} 秒\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;累計分數: {{ gameScore }} 分\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;發牌區剩餘 {{ remainCardCounts.dealer }} 張 x 35分\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;7牌堆剩餘 {{ remainCardCounts.seven }} 張 x 20分\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;加權總分: {{ gameScore + remainCardCounts.dealer * 35 + remainCardCounts.seven * 20 }} 分\u0026lt;/div\u0026gt; \u0026lt;/BModal\u0026gt; 小結 今天實作功能全開牌自動結算雖然沒有一張張牌自動移回結算牌堆的動態感，但優點就是無須等待看動畫的時間。\n雖然上方沒提到今天除了實作也有修正連點自動移動的Bug， Bug主因就是當牌可移回的選擇有結算牌堆/7牌堆兩種，因為優先選結算牌堆然而卡牌不是最後一個不能移，卻沒有繼續讓卡牌移動到7牌堆導致。\n修復方式就是把邏輯換成優先檢查移動到結算牌堆，若不行會繼續檢查是否可以移動7牌堆。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day27 ","permalink":"https://zongjia.me/posts/it-day27/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e如標題所言，今天要做的就是補上『當牌全開時視為已完成遊戲』自動結算遊戲時間、分數，\n有實際在現實世界中用撲克牌玩過\u003cstrong\u003e接龍\u003c/strong\u003e的應該知道其實最麻煩的就是收牌結尾，因為最後只是慢慢把所有牌都移到\u003ccode\u003e結算牌堆\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e事先說明: 此篇不會實作自動移牌的動畫效果。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"開發前思考\"\u003e開發前思考\u003c/h2\u003e\n\u003cp\u003e判斷牌\u003ccode\u003e全開\u003c/code\u003e不難! 不需要判斷全部牌是否已打開，\n只需要判斷\u003ccode\u003e7牌堆\u003c/code\u003e每堆最上面第一張牌是否已打開，若有蓋著那就不能結算，\n若每堆第一張都沒蓋著就可以開始結算。\u003c/p\u003e\n\u003cp\u003e結算分數時只需要考慮補上\u003ccode\u003e發牌區\u003c/code\u003e、\u003ccode\u003e移牌區\u003c/code\u003e有幾張牌，再用加分的方式計算最後的總分。\u003c/p\u003e\n\u003ch2 id=\"實作過程\"\u003e實作過程\u003c/h2\u003e\n\u003ch3 id=\"修改遊戲結算時機\"\u003e修改遊戲結算時機\u003c/h3\u003e\n\u003cp\u003e原本函數\u003ccode\u003echeckSolitaireGameDone(cardStacks)\u003c/code\u003e是判斷\u003ccode\u003e結算牌堆\u003c/code\u003e集滿13張牌則當作遊戲結束，但思考過後\u003ccode\u003e結算牌堆都集滿13張\u003c/code\u003e等同於\u003ccode\u003e七牌區的牌全空\u003c/code\u003e一樣會回應\u003ccode\u003etrue\u003c/code\u003e，因此放心調整為\u003ccode\u003e檢查七牌堆的最上方開牌的狀態\u003c/code\u003e當作遊戲結束的依據。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * 檢查紙牌接龍是否完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {CardStacks} cardStacks \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckSolitaireGameDone\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查每組牌堆第一張牌覆蓋著，就代表遊戲還沒結束\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eprev\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003estackName\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estackName\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprev\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"計算剩餘牌數結算分數\"\u003e計算剩餘牌數\u0026amp;結算分數\u003c/h3\u003e\n\u003cp\u003e新增函數\u003ccode\u003egetRemainCardCount(cardStacks)\u003c/code\u003e計算並返回\u003ccode\u003e發牌區\u003c/code\u003e和\u003ccode\u003e七牌堆\u003c/code\u003e的剩餘牌數\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * 計算剩餘在發牌區和7牌堆的張數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {CardStacks} cardStacks \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @returns {Object} {dealer: number, seven: number}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetRemainCardCount\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerStacksCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esevenCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esevenCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edealer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerStacksCount\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eseven\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esevenCount\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在接龍頁面使用\u003ccode\u003ecomputed\u003c/code\u003e宣告一個變數\u003ccode\u003eremainCardCounts\u003c/code\u003e，負責返回剩餘的牌數。\u003c/p\u003e","title":"Day27 當牌全開時自動結算"},{"content":"前言 因為玩接龍有時會有按錯步，這時候沒有返回上一步的機制就只能硬著頭皮玩下去或按重置，今天想解決這個問題。\n開發前的思考 在ReactJS官方學習文件中OOXX遊戲Tic-Tac-Toe也有提到時光旅行的實作，基本上就是每一步更動後的結果狀態都推入(Push)陣列變數history裡面，時光回朔就是將結果狀態直接設為history[index]。\n目前開發下來的程式碼大概要回到上一步的只有分數、牌組、發牌的索引， 經過的時間應該就不用上一步。\n實作過程 儲存遊戲變化的歷史 首先宣告一個負責儲存歷史的ref變數history\nconst history = ref([]); 宣告函數pushStateToHistory()負責撰寫把最新的狀態推入history\n累積超過30個後會將最舊的狀態移除再推入最新的狀態，避免暫存太多的上一步驟。 因為reactive的關係所以不得不手動深度複製每張卡牌，這也是為什麼要做elemFunc的原因 /** 儲存當前狀態到歷史紀錄 */ function pushStateToHistory() { if (history.value.length \u0026gt; 30) { const startIndex = history.value.length - 30; history.value = history.value.slice(startIndex, history.value.length); } const elemFunc = (card) =\u0026gt; ({ \u0026#34;value\u0026#34;: card.value, \u0026#34;isOpen\u0026#34;: card.isOpen, \u0026#34;isDone\u0026#34;: card.isDone, }); history.value = [ ...history.value, { \u0026#34;cardStacks\u0026#34;: { first: cardStacks.first.slice().map(elemFunc), second: cardStacks.second.slice().map(elemFunc), third: cardStacks.third.slice().map(elemFunc), fourth: cardStacks.fourth.slice().map(elemFunc), fifth: cardStacks.fifth.slice().map(elemFunc), sixth: cardStacks.sixth.slice().map(elemFunc), seventh: cardStacks.seventh.slice().map(elemFunc), dealerStacks: cardStacks.dealerStacks.slice().map(elemFunc), club: cardStacks.club.slice().map(elemFunc), diamond: cardStacks.diamond.slice().map(elemFunc), heart: cardStacks.heart.slice().map(elemFunc), spade: cardStacks.spade.slice().map(elemFunc), }, \u0026#34;gameScore\u0026#34;: JSON.parse(JSON.stringify(gameScore.value)), \u0026#34;dealer\u0026#34;: { index: dealer.index }, } ]; } 接著在程式碼中【分數、卡牌有變動】的情況都補上執行pushStateToHistory();去儲存當下的狀態:\n發牌區移動/結算牌堆移動/7牌堆移動成功移動後 遊戲初始化resetGame 連點自動拖曳clickAutoMove只要成功移動，最後也會執行 發牌區\u0026lt;DealerArea /\u0026gt;點擊開牌也會執行pushStateToHistory();，因為發牌索引dealer.index產生變化\n實作返回上一步函數 返回上一步函數undo的演算法:\n取得history變數的陣列的長度，若長度大於1繼續往下執行，否則不執行後續步驟。 因為history目前最後一個元素就是當下的狀態，所以從history克隆出原本長度減一的陣列暫存至變數prevHistory 將history的值更新為prevHistory 將prevHistory最後一個元素內的狀態發牌區/結算牌堆/7牌堆/遊戲分數/發牌索引的值全都覆蓋到對應變數 /** 返回上一步 */ function undo() { if (history.value.length \u0026gt; 1) { const prevHistory = history.value.slice(0, history.value.length - 1); history.value = prevHistory; const prevState = prevHistory[prevHistory.length - 1]; cardStacks.dealerStacks = prevState.cardStacks.dealerStacks; FOUR_SUITS.forEach((deckName) =\u0026gt; { cardStacks[deckName] = prevState.cardStacks[deckName]; }) SEVEN_STACKS.forEach((deckName) =\u0026gt; { cardStacks[deckName] = prevState.cardStacks[deckName]; }) gameScore.value = prevState.gameScore; dealer = prevState.dealer; } } 小結 今日除了完成返回上一步的功能使得遊戲玩起來更有趣😎也盡可能以演算法的角度更明確的步驟去說明程式碼的實現。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day26 參考\nhttps://stackoverflow.com/questions/597588/how-do-you-clone-an-array-of-objects-in-javascript https://react.dev/learn/tutorial-tic-tac-toe#implementing-time-travel ","permalink":"https://zongjia.me/posts/it-day26/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e因為玩接龍有時會有按錯步，這時候沒有\u003cstrong\u003e返回上一步\u003c/strong\u003e的機制就只能硬著頭皮玩下去或按\u003cstrong\u003e重置\u003c/strong\u003e，今天想解決這個問題。\u003c/p\u003e\n\u003ch2 id=\"開發前的思考\"\u003e開發前的思考\u003c/h2\u003e\n\u003cp\u003e在\u003ccode\u003eReactJS\u003c/code\u003e官方學習文件中OOXX遊戲\u003ccode\u003eTic-Tac-Toe\u003c/code\u003e也有提到時光旅行的實作，基本上就是每一步更動後的結果狀態都推入(Push)陣列變數\u003ccode\u003ehistory\u003c/code\u003e裡面，時光回朔就是將結果狀態直接設為\u003ccode\u003ehistory[index]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e目前開發下來的程式碼大概要回到上一步的只有\u003ccode\u003e分數\u003c/code\u003e、\u003ccode\u003e牌組\u003c/code\u003e、\u003ccode\u003e發牌的索引\u003c/code\u003e，\n經過的時間應該就不用\u003ccode\u003e上一步\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"實作過程\"\u003e實作過程\u003c/h2\u003e\n\u003ch3 id=\"儲存遊戲變化的歷史\"\u003e儲存遊戲變化的歷史\u003c/h3\u003e\n\u003cp\u003e首先宣告一個負責儲存歷史的ref變數\u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e([]);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e宣告函數\u003ccode\u003epushStateToHistory()\u003c/code\u003e負責撰寫把最新的狀態推入history\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e累積超過30個後會將最舊的狀態移除再推入最新的狀態，避免暫存太多的上一步驟。\u003c/li\u003e\n\u003cli\u003e因為\u003ccode\u003ereactive\u003c/code\u003e的關係所以不得不手動深度複製每張卡牌，這也是為什麼要做\u003ccode\u003eelemFunc\u003c/code\u003e的原因\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** 儲存當前狀態到歷史紀錄 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epushStateToHistory\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estartIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estartIndex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e) =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;isOpen\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;isDone\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ...\u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003esecond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esecond\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ethird\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ethird\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efourth\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efourth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efifth\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efifth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003esixth\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esixth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eseventh\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eseventh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eelemFunc\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;gameScore\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJSON\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eJSON\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estringify\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dealer\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealer\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接著在程式碼中【分數、卡牌有變動】的情況都補上執行\u003ccode\u003epushStateToHistory();\u003c/code\u003e去儲存當下的狀態:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e發牌區移動\u003c/code\u003e/\u003ccode\u003e結算牌堆移動\u003c/code\u003e/\u003ccode\u003e7牌堆移動\u003c/code\u003e成功移動後\u003c/li\u003e\n\u003cli\u003e遊戲初始化\u003ccode\u003eresetGame\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e連點自動拖曳\u003ccode\u003eclickAutoMove\u003c/code\u003e只要成功移動，最後也會執行\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e發牌區\u003ccode\u003e\u0026lt;DealerArea /\u0026gt;\u003c/code\u003e點擊開牌也會執行\u003ccode\u003epushStateToHistory();\u003c/code\u003e，因為發牌索引\u003ccode\u003edealer.index\u003c/code\u003e產生變化\u003c/p\u003e","title":"Day26 實作功能【返回上一步】"},{"content":"前言 今天會調整結算畫面的顯示、修正連點移牌的優先權錯誤(應該最優先移入結算牌堆而非七牌堆)。\n結算畫面調整 安裝套件 bootstrap-vue-next 昨日完成的結算畫面是跳出來的瀏覽器訊息，畫面完全看各家的瀏覽器制式化只能點確認，即使擋住原本的遊戲畫面是我想要的效果，但更想要的是可客製化頁面的互動視窗Modal。\n雖然可以自己土炮撰寫Modal但看帳號名字就知道我很懶，我打算撿現成的套件看能不能快速客製化介面\u0026hellip;然後就找到bootstrap-vue-next這個套件，聽名字就知道是針對Vue3特別拉出來的實現。\n先照著官方文件安裝依賴:\nnpm i bootstrap bootstrap-vue-next npm i unplugin-vue-components -D 這個 unplugin-vue-components 主要是方便自動載入有副作用(side effect)的功能到你的元件中，詳細可參考官方說明，畢竟Bootstrap有副作用才方便?!\n接著調整vite.config.js的內容，主要是在plugins屬性對應的陣列中添加Components 包裹 BootstrapVueNextResolver的依賴:\n// vite.config.js import { fileURLToPath, URL } from \u0026#39;node:url\u0026#39; import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import Components from \u0026#39;unplugin-vue-components/vite\u0026#39; import {BootstrapVueNextResolver} from \u0026#39;unplugin-vue-components/resolvers\u0026#39; // https://vitejs.dev/config/ export default defineConfig({ plugins: [ vue(), Components({ resolvers: [BootstrapVueNextResolver()], }), ], resolve: { alias: { \u0026#39;@\u0026#39;: fileURLToPath(new URL(\u0026#39;./src\u0026#39;, import.meta.url)) } } }) 最後在main.js載入相關的CSS，記得把bootstrap移到上方避免之前撰寫的css被蓋掉:\n// main.js/ts import \u0026#39;bootstrap/dist/css/bootstrap.css\u0026#39; import \u0026#39;bootstrap-vue-next/dist/bootstrap-vue-next.css\u0026#39; // 略 前面都完成後，發現接龍畫面的卡片的英文、符號都變得比較Q版，上方導覽列 NavgationBarCSS有點跑版。 修改邏輯 從套件bootstrap-vue-next引入要使用的BModal元件，宣告變數doneModal表示顯示結算畫面與否。\n// DragDemo.vue const doneModal = ref(false); import { BModal } from \u0026#39;bootstrap-vue-next\u0026#39;; 使用\u0026lt;BModal\u0026gt;元件去包住結束畫面的HTML樣板:\nv-model為true則會跳出結算畫面 title為交互視窗的上方標題 hide-footer設定交互視窗的確認取消區塊隱藏 @close設定點擊交互視窗關閉x按鈕時觸發的事件方法 @hide當交互視窗隱藏時觸發的事件方法 \u0026lt;!-- DragDemo.vue --\u0026gt; \u0026lt;BModal v-model=\u0026#34;doneModal\u0026#34; title=\u0026#34;結算畫面\u0026#34; hide-footer @close=\u0026#34;resetGame\u0026#34; @hide=\u0026#34;resetGame\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;玩家 xxx\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;花費時間: {{ gameTime }} 秒\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;總分數: {{ gameScore }} 分\u0026lt;/div\u0026gt; \u0026lt;/BModal\u0026gt; 修正點擊自動移牌的優先權問題 修正自動移動的函數clickAutoMove中的toName寫法，原本是用FOUR_SUITS優先排序接著取第0個元素， 改寫為直接用Array.find取得想要優先的牌堆(結算盤堆名稱)，如果沒有才取得第0個元素(7牌堆名稱)。\n結算牌堆名稱 FOUR_SUITS = [\u0026lsquo;club\u0026rsquo;, \u0026lsquo;diamond\u0026rsquo;, \u0026lsquo;heart\u0026rsquo;, \u0026lsquo;spade\u0026rsquo;]\n/** * 自動移動 * @param {String} fromName 來自的牌堆名稱 * @param {Card} card 想移動的牌 */ function clickAutoMove(fromName, card) { const toNames = findFollowDeckName(cardStacks, card); // 略 const toName = toNames.find((name) =\u0026gt; FOUR_SUITS.includes(name)) ?? toNames[0]; console.log(`可移動至的牌堆有: ${toNames}, 選擇移動至: ${toName}`); // 略 } 小結 今天使用的bootstrap-vue-next因為是Alpha版本對應文件還不完整，但像BModal的部分參考原bootstrap-vue文件的範例發現也是可以通的。\n另外寫到這邊才發現如果Vue3專案使用bootstrap-vue還是有相容支援到bootstrap v4，只是需要額外的設定{ compatConfig: { MODE: 3 }}，詳細情形可參考官方文件。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day25 參考文件\nhttps://bootstrap-vue-next.github.io/bootstrap-vue-next/docs.html https://bootstrap-vue.org/docs/components/modal ","permalink":"https://zongjia.me/posts/it-day25/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天會調整結算畫面的顯示、修正\u003cstrong\u003e連點移牌\u003c/strong\u003e的優先權錯誤(應該最優先移入\u003ccode\u003e結算牌堆\u003c/code\u003e而非\u003ccode\u003e七牌堆\u003c/code\u003e)。\u003c/p\u003e\n\u003ch2 id=\"結算畫面調整\"\u003e結算畫面調整\u003c/h2\u003e\n\u003ch3 id=\"安裝套件-bootstrap-vue-next\"\u003e安裝套件 bootstrap-vue-next\u003c/h3\u003e\n\u003cp\u003e昨日完成的結算畫面是跳出來的瀏覽器訊息，畫面完全看各家的瀏覽器制式化只能點確認，即使擋住原本的遊戲畫面是我想要的效果，但更想要的是可客製化頁面的互動視窗\u003ccode\u003eModal\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e雖然可以自己土炮撰寫\u003ccode\u003eModal\u003c/code\u003e但看帳號名字就知道我很懶，我打算撿現成的套件看能不能快速客製化介面\u0026hellip;然後就找到\u003ccode\u003ebootstrap-vue-next\u003c/code\u003e這個套件，聽名字就知道是針對\u003ccode\u003eVue3\u003c/code\u003e特別拉出來的實現。\u003c/p\u003e\n\u003cp\u003e先照著官方文件安裝依賴:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm i bootstrap bootstrap-vue-next\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm i unplugin-vue-components -D\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e這個 \u003cstrong\u003eunplugin-vue-components\u003c/strong\u003e 主要是方便自動載入有副作用(side effect)的功能到你的元件中，詳細可參考官方說明，畢竟\u003ccode\u003eBootstrap\u003c/code\u003e有副作用才方便?!\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e接著調整\u003ccode\u003evite.config.js\u003c/code\u003e的內容，主要是在\u003ccode\u003eplugins\u003c/code\u003e屬性對應的陣列中添加\u003ccode\u003eComponents 包裹 BootstrapVueNextResolver\u003c/code\u003e的依賴:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// vite.config.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003efileURLToPath\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;node:url\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003edefineConfig\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vite\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evue\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;@vitejs/plugin-vue\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eComponents\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;unplugin-vue-components/vite\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e {\u003cspan style=\"color:#a6e22e\"\u003eBootstrapVueNextResolver\u003c/span\u003e} \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;unplugin-vue-components/resolvers\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// https://vitejs.dev/config/\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefineConfig\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evue\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eComponents\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eresolvers\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [\u003cspan style=\"color:#a6e22e\"\u003eBootstrapVueNextResolver\u003c/span\u003e()],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eresolve\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ealias\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;@\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efileURLToPath\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eURL\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./src\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emeta\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最後在\u003ccode\u003emain.js\u003c/code\u003e載入相關的CSS，記得把\u003ccode\u003ebootstrap\u003c/code\u003e移到上方避免之前撰寫的css被蓋掉:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// main.js/ts\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bootstrap/dist/css/bootstrap.css\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bootstrap-vue-next/dist/bootstrap-vue-next.css\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e前面都完成後，發現接龍畫面的卡片的英文、符號都變得比較Q版，上方\u003ccode\u003e導覽列 NavgationBar\u003c/code\u003eCSS有點跑版。\n\u003cimg alt=\"載入vue-bootstrap後的接龍畫面\" loading=\"lazy\" src=\"/images/itday25-css.png\"\u003e\u003c/p\u003e","title":"Day25 紙牌接龍-結算畫面採用Modal和修正移牌優先權"},{"content":"前言 目前實作的紙牌接龍還沒有結算畫面，所以今天就來做!\n初步思考 製作結算畫面本身不是問題，畢竟畫面沒有要做得超級漂亮的情況下都是沒問題的!\n問題是何時跳出結算畫面? 我想到的情形有兩種:\n結算牌堆四堆都集完13張的情況 畫面中7牌堆的牌全部已經打開的情況 我認為第一種判斷結算牌堆的方式實作起來比較簡單，接下來實作也會朝這個方向前進。\n實作邏輯 製作檢查完成牌組的函數 宣告一個函數checkSolitaireGameDone負責檢查紙牌接龍是否完成。\n依序檢查各結算牌堆，若數量不為13就直接回傳 否false 最後就回傳 是true 程式碼如下:\n/** * 檢查紙牌接龍是否完成 * @param {CardStacks} cardStacks */ function checkSolitaireGameDone(cardStacks) { for (let i = 0; i \u0026lt; FOUR_SUITS.length; i++) { if (cardStacks[FOUR_SUITS[i]].length !== 13) return false; } return true; } 監控觸發檢查 不意外的又使用到watch這個關鍵字做監控，這部分就是跟Day4的連連看一樣， 當 牌堆cardStacks 發生變化就去觸發檢查，判定完成就使用alert跳出結算訊息。\n使用者點擊alert()之後，才會執行重設遊戲的函數resetGame()\n// DragDemo.vue watch(cardStacks, (newCardStacks) =\u0026gt; { const isDone = checkSolitaireGameDone(newCardStacks); if (isDone) { alert(`遊戲結束，花費時間: ${gameTime.value} 秒 總分數: ${gameScore.value}!!!`); resetGame(); } }) 小結 今天在實作結算畫面的過程雖然遇到一些Bug，但不影響遊戲可以正常跳出結算訊息並重置。\n只是目前用alert跳出那個結算訊息不太像一個正常遊戲的畫面，所以明天會繼續實作真正的結算畫面和修正目前發現的Bug:\n昨日開發的連點移動的優先度不正常 預期優先移到結算牌堆的牌，自動移牌時竟然在7牌堆區中左右來回移動。 發牌區的牌應該要自動移到結算牌堆，竟然先移動到7牌堆 程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day24 ","permalink":"https://zongjia.me/posts/it-day24/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e目前實作的紙牌接龍還沒有\u003cstrong\u003e結算畫面\u003c/strong\u003e，所以今天就來做!\u003c/p\u003e\n\u003ch2 id=\"初步思考\"\u003e初步思考\u003c/h2\u003e\n\u003cp\u003e製作\u003cstrong\u003e結算畫面\u003c/strong\u003e本身不是問題，畢竟畫面沒有要做得超級漂亮的情況下都是沒問題的!\u003c/p\u003e\n\u003cp\u003e問題是何時跳出\u003cstrong\u003e結算畫面\u003c/strong\u003e? 我想到的情形有兩種:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e結算牌堆\u003c/code\u003e四堆都集完13張的情況\u003c/li\u003e\n\u003cli\u003e畫面中\u003ccode\u003e7牌堆\u003c/code\u003e的牌全部已經打開的情況\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我認為第一種判斷\u003ccode\u003e結算牌堆\u003c/code\u003e的方式實作起來比較簡單，接下來實作也會朝這個方向前進。\u003c/p\u003e\n\u003ch2 id=\"實作邏輯\"\u003e實作邏輯\u003c/h2\u003e\n\u003ch3 id=\"製作檢查完成牌組的函數\"\u003e製作檢查完成牌組的函數\u003c/h3\u003e\n\u003cp\u003e宣告一個函數\u003ccode\u003echeckSolitaireGameDone\u003c/code\u003e負責檢查紙牌接龍是否完成。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e依序檢查各\u003ccode\u003e結算牌堆\u003c/code\u003e，若數量不為13就直接回傳 \u003cstrong\u003e否\u003ccode\u003efalse\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e最後就回傳 \u003cstrong\u003e是\u003ccode\u003etrue\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e程式碼如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * 檢查紙牌接龍是否完成\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {CardStacks} cardStacks \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckSolitaireGameDone\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e]].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"監控觸發檢查\"\u003e監控觸發檢查\u003c/h3\u003e\n\u003cp\u003e不意外的又使用到\u003ccode\u003ewatch\u003c/code\u003e這個關鍵字做監控，這部分就是跟Day4的連連看一樣，\n當 \u003cstrong\u003e牌堆\u003ccode\u003ecardStacks\u003c/code\u003e\u003c/strong\u003e 發生變化就去觸發檢查，判定完成就使用\u003ccode\u003ealert\u003c/code\u003e跳出結算訊息。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用者點擊\u003ccode\u003ealert()\u003c/code\u003e之後，才會執行重設遊戲的函數\u003ccode\u003eresetGame()\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewatch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003enewCardStacks\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckSolitaireGameDone\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewCardStacks\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ealert\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`遊戲結束，花費時間: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egameTime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e 秒 總分數: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!!`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eresetGame\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"小結\"\u003e小結\u003c/h2\u003e\n\u003cp\u003e今天在實作\u003cstrong\u003e結算畫面\u003c/strong\u003e的過程雖然遇到一些Bug，但不影響遊戲可以正常跳出結算訊息並重置。\u003c/p\u003e\n\u003cp\u003e只是目前用\u003ccode\u003ealert\u003c/code\u003e跳出那個結算訊息不太像一個正常遊戲的畫面，所以明天會繼續實作\u003ccode\u003e真正的結算畫面\u003c/code\u003e和修正目前發現的Bug:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e昨日開發的\u003cstrong\u003e連點移動\u003c/strong\u003e的優先度不正常\n\u003col\u003e\n\u003cli\u003e預期優先移到\u003cstrong\u003e結算牌堆\u003c/strong\u003e的牌，自動移牌時竟然在\u003ccode\u003e7牌堆\u003c/code\u003e區中左右來回移動。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e發牌區\u003c/strong\u003e的牌應該要自動移到\u003cstrong\u003e結算牌堆\u003c/strong\u003e，竟然先移動到\u003cstrong\u003e7牌堆\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e程式碼: \u003ca href=\"https://github.com/kabuto412rock/ithelp-pokergame/tree/day24\"\u003ehttps://github.com/kabuto412rock/ithelp-pokergame/tree/day24\u003c/a\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/Hm254mth5Hw?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\u003c/p\u003e","title":"Day24 紙牌接龍-結算畫面"},{"content":"前言 今天要實做的是點擊自動移牌的功能也算是昨天提示的延伸，差別只在會實際移動卡牌。\n我打算連點移牌功能只做在七牌堆和發牌區，結算牌堆就不提供此功能。\n實作過程 處理連點事件 調整發牌區/七牌堆的卡片元件\u0026lt;Card\u0026gt;添加對應的屬性@dblclick=\u0026quot;emit('card-click', element)\u0026quot;， 這會讓卡牌元件\u0026lt;Card\u0026gt;被連點兩下(Double Click)時，向父元件發送事件card-click然後攜帶的參數element則是Card物件\n// Card { value: 0, // 卡牌對應數值，Ex: 梅花A isOpen: false, // 是否已開牌 } 然後修改上層樣板(DragDemo.vue)的部分:\n為了接收card-click事件進行處理，在發牌區的樣板修改成有添加@card-click=\u0026quot;(card) =\u0026gt; clickAutoMove('dealerStacks', card) 在七牌堆的樣板，這七行依序添加屬性@dblcick 第一牌堆 @dblclick=\u0026quot;clickAutoMove('first', element)\u0026quot; 第二牌堆 @dblclick=\u0026quot;clickAutoMove('second', element)\u0026quot; 中間略\u0026hellip; 第七牌堆的屬性 @dblclick=\u0026quot;clickAutoMove('seventh', element)\u0026quot; 處理自動移動的邏輯 這邊出現的新函數clickAutoMove(fromName, card)，主要是用來處理自動移動的邏輯，流程如下:\n先利用findFollowDeckName找出card可以拖曳到的牌堆名稱，然後依照優先順序排序(結算牌堆排第一)。 如果沒有找到對應的牌堆，則不執行後續。 取出第一個牌堆名稱當作目標牌堆 接著就判斷來源牌堆是發牌堆還是七牌堆，來做不同的處理(修改對應牌組陣列 還有 加分等等) 可以參考下方的程式碼片段:\n// DragDemo.vue /** * 自動移動 * @param {String} fromName 來自的牌堆名稱 * @param {Card} card 想移動的牌 */ function clickAutoMove(fromName, card) { const toNames = findFollowDeckName(cardStacks, card).sort((a, b) =\u0026gt; { const aOrder = a.length + FOUR_SUITS.includes(a) ? -100 : 0; const bOrder = b.length + FOUR_SUITS.includes(b) ? -100 : 0; return aOrder - bOrder; }) // 如果沒找到對應牌堆，則不執行 if (toNames.length == 0) { console.log(`卡牌${PokerValuesMap[card.value].content}沒有符合移動的規則`); return; } const toName = toNames[0]; const isToFinishedArea = FOUR_SUITS.includes(toName); if (fromName == \u0026#39;dealerStacks\u0026#39;) { // 來自`發牌堆` const fromIndex = cardStacks[fromName].findIndex(c =\u0026gt; c.value == card.value); const newFromCards = [ ...cardStacks[fromName].slice(0, fromIndex), ...cardStacks[fromName].slice(fromIndex + 1) ]; const newToCards = [ ...cardStacks[toName], cardStacks[fromName][fromIndex] ]; cardStacks[fromName] = newFromCards; cardStacks[toName] = newToCards; gameScore.value += isToFinishedArea ? 25 : 10; } else if (SEVEN_STACKS.includes(fromName)) { // 來自7牌堆 const fromLength = cardStacks[fromName].length; const fromIndex = cardStacks[fromName].findIndex(c =\u0026gt; c.value == card.value); if (isToFinishedArea) { if (fromIndex != fromLength - 1) { console.log(`卡牌${PokerValuesMap[card.value].content}不是${fromName}的最後一張牌，不可移入結算牌堆`); return; } const newFromCards = cardStacks[fromName].slice(0, fromIndex); const newToCards = [ ...cardStacks[toName], card ]; cardStacks[fromName] = newFromCards; cardStacks[toName] = newToCards; gameScore.value += 15; } else { const newFromCards = cardStacks[fromName].slice(0, fromIndex); const newToCards = [ ...cardStacks[toName], ...cardStacks[fromName].slice(fromIndex) ]; cardStacks[fromName] = newFromCards; cardStacks[toName] = newToCards; } } } 另外在poker-helper.js新增函數findFollowDeckName(cardstacks, targetCard)，主要是用來找出targetCard可以拖曳到的牌堆名稱，因為可能可以拖曳到複數個牌堆，所以回傳字串組成的一維陣列:\n// utils/poker-helper.js /** * 找出`指定牌`可以接在哪一個牌堆(7牌堆or結算牌堆)的後面 * @param {CardStacks} cardstacks 牌堆 * @param {Card} targetCard 指定牌 * @returns {Array\u0026lt;String\u0026gt;} Array\u0026lt;目標牌堆名稱\u0026gt; */ function findFollowDeckName(cardstacks, targetCard) { const result = new Set(); // 找出可拖曳至7牌堆尾巴的牌 SEVEN_STACKS.forEach((name) =\u0026gt; { const stack = cardstacks[name]; if (stack.length === 0) { if ([12, 25, 38, 51].includes(targetCard.value)) { result.add(name); } return; } const lastCard = stack[stack.length - 1]; const lastCardNumber = lastCard.value % 13; const lastCardSymbol = Math.floor(lastCard.value / 13); // 檢查是否為A，則跳過 if (lastCardNumber === 0) { return; } const matchNumber = lastCardNumber - 1; const isBlack = lastCardSymbol % 3 == 0; const isInclude = [matchNumber + (isBlack ? 13 : 0), matchNumber + (isBlack ? 26 : 39)].includes(targetCard.value); if (isInclude) result.add(name); }); // 找出可拖曳至結算牌堆尾巴的牌 FOUR_SUITS.forEach((name, index) =\u0026gt; { const stack = cardstacks[name]; if (stack.length === 0) { if (index * 13 == targetCard.value) result.add(name); return; } const lastCard = stack[stack.length - 1]; const lastCardNumber = lastCard.value % 13; // 檢查是否為K，則跳過 if (lastCardNumber === 12) { return; } const matchNumber = lastCardNumber + 1; if (matchNumber + index * 13 == targetCard.value) { result.add(name); } }); return Array.from(result); } 小結 今天完成的功能連點2下自動移牌可以取代部分拖曳卡牌的操作，讓遊戲更加順暢。 這部分也是參考曾經玩過的接龍遊戲功能，當時就覺得這樣很方便😁。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day23 ","permalink":"https://zongjia.me/posts/it-day23/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天要實做的是\u003cstrong\u003e點擊自動移牌\u003c/strong\u003e的功能也算是昨天提示的延伸，差別只在會\u003cstrong\u003e實際移動卡牌\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e我打算\u003cstrong\u003e連點移牌\u003c/strong\u003e功能只做在\u003ccode\u003e七牌堆\u003c/code\u003e和\u003ccode\u003e發牌區\u003c/code\u003e，結算牌堆就不提供此功能。\u003c/p\u003e\n\u003ch2 id=\"實作過程\"\u003e實作過程\u003c/h2\u003e\n\u003ch3 id=\"處理連點事件\"\u003e處理連點事件\u003c/h3\u003e\n\u003cp\u003e調整\u003ccode\u003e發牌區\u003c/code\u003e/\u003ccode\u003e七牌堆\u003c/code\u003e的卡片元件\u003ccode\u003e\u0026lt;Card\u0026gt;\u003c/code\u003e添加對應的屬性\u003ccode\u003e@dblclick=\u0026quot;emit('card-click', element)\u0026quot;\u003c/code\u003e，\n這會讓卡牌元件\u003ccode\u003e\u0026lt;Card\u0026gt;\u003c/code\u003e被連點兩下(Double Click)時，向父元件發送事件\u003ccode\u003ecard-click\u003c/code\u003e然後攜帶的參數\u003cstrong\u003eelement\u003c/strong\u003e則是\u003cstrong\u003eCard\u003c/strong\u003e物件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#75715e\"\u003e// 卡牌對應數值，Ex: 梅花A\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#75715e\"\u003e// 是否已開牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然後修改上層樣板(DragDemo.vue)的部分:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e為了接收\u003ccode\u003ecard-click\u003c/code\u003e事件進行處理，在\u003cstrong\u003e發牌區\u003c/strong\u003e的樣板修改成有添加\u003ccode\u003e@card-click=\u0026quot;(card) =\u0026gt; clickAutoMove('dealerStacks', card)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在\u003cstrong\u003e七牌堆\u003c/strong\u003e的樣板，這七行依序添加屬性\u003ccode\u003e@dblcick\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e第一牌堆 \u003ccode\u003e@dblclick=\u0026quot;clickAutoMove('first', element)\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e第二牌堆 \u003ccode\u003e@dblclick=\u0026quot;clickAutoMove('second', element)\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e中間略\u0026hellip;\u003c/li\u003e\n\u003cli\u003e第七牌堆的屬性 \u003ccode\u003e@dblclick=\u0026quot;clickAutoMove('seventh', element)\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"處理自動移動的邏輯\"\u003e處理自動移動的邏輯\u003c/h3\u003e\n\u003cp\u003e這邊出現的新函數\u003ccode\u003eclickAutoMove(fromName, card)\u003c/code\u003e，主要是用來處理\u003cstrong\u003e自動移動\u003c/strong\u003e的邏輯，流程如下:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先利用\u003ccode\u003efindFollowDeckName\u003c/code\u003e找出\u003cstrong\u003ecard\u003c/strong\u003e可以拖曳到的牌堆名稱，然後依照優先順序排序(結算牌堆排第一)。\u003c/li\u003e\n\u003cli\u003e如果沒有找到對應的牌堆，則不執行後續。\u003c/li\u003e\n\u003cli\u003e取出第一個牌堆名稱當作目標牌堆\u003c/li\u003e\n\u003cli\u003e接著就判斷來源牌堆是\u003ccode\u003e發牌堆\u003c/code\u003e還是\u003ccode\u003e七牌堆\u003c/code\u003e，來做不同的處理(修改對應牌組陣列 還有 加分等等)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e可以參考下方的程式碼片段:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * 自動移動\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {String} fromName 來自的牌堆名稱\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {Card} card 想移動的牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclickAutoMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoNames\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindFollowDeckName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaOrder\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebOrder\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaOrder\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebOrder\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 如果沒找到對應牌堆，則不執行\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003etoNames\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`卡牌\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePokerValuesMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e沒有符合移動的規則`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoNames\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisToFinishedArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 來自`發牌堆`\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003efindIndex\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisToFinishedArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 來自7牌堆\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efromLength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003efindIndex\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisToFinishedArea\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efromLength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`卡牌\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePokerValuesMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e不是\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e的最後一張牌，不可移入結算牌堆`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另外在\u003ccode\u003epoker-helper.js\u003c/code\u003e新增函數\u003ccode\u003efindFollowDeckName(cardstacks, targetCard)\u003c/code\u003e，主要是用來找出\u003cstrong\u003etargetCard\u003c/strong\u003e可以拖曳到的牌堆名稱，因為可能可以拖曳到複數個牌堆，所以回傳\u003cstrong\u003e字串組成的一維陣列\u003c/strong\u003e:\u003c/p\u003e","title":"Day23 連點2下自動移牌"},{"content":"前言 今天要實作接龍移牌提示，以下是會需要處理的題目:\n怎麼取得場上牌的拖曳路線? 找到拖曳路線後，如何顯示要拖曳至哪個地方的提示(文字or動畫)? 取得拖曳路線 目前可知拖曳區塊有7牌堆、發牌區、結算牌堆，其中卡牌可拖曳的方向有:\n7牌堆可以內部自拖曳或結算牌堆 發牌區只能拖曳至7牌堆、結算牌堆 結算牌堆只能拖曳至7牌堆 初步分析: 可以先計算可以移入7牌堆、結算牌堆牌尾的撲克牌\n預計執行步驟: 計算出7牌堆、結算牌堆各自牌尾後能放什麼牌，儲存在Map 從發牌區/7牌堆/結算牌堆依序判斷可拖曳卡牌的數字是否存在Map中? 是，回傳比對成功的結果: { \u0026#34;可拖曳卡牌所在的牌堆\u0026#34;, \u0026#34;拖曳卡牌在牌堆的位置\u0026#34;, \u0026#34;預計移入的牌堆\u0026#34;} 否，繼續比對下一張直到無牌可比 實際程式碼 參數帶入要計算的全部牌堆，計算回傳每張牌可被移入的牌堆。 因為有可能出現梅花A可以移入結算牌堆或7牌堆的情況，所以實作設計成一張牌只會對應一個牌堆，此例梅花A會優先被移入結算牌堆。\n// utils/poker-helper.js /** * 找出7牌堆、結算牌堆各牌尾後要接的牌 * @param {CardStacks} cardstacks * @returns {Map\u0026lt;Number, String\u0026gt;} Map\u0026lt;撲克牌編號, 目標牌堆名稱\u0026gt; */ function findTailCards(cardstacks) { const result = new Map(); // 找出可拖曳至7牌堆尾巴的牌 SEVEN_STACKS.forEach((name) =\u0026gt; { const stack = cardstacks[name]; if (stack.length === 0) { [12, 25, 38, 51].forEach((value) =\u0026gt; { result.set(value, name); }); return; } const lastCard = stack[stack.length - 1]; const lastCardNumber = lastCard.value % 13; const lastCardSymbol = Math.floor(lastCard.value / 13); // 檢查是否為A，則跳過 if (lastCardNumber === 0) { return; } const matchNumber = lastCardNumber - 1; const isBlack = lastCardSymbol % 3 == 0; [matchNumber + (isBlack ? 13 : 0), matchNumber + (isBlack ? 26 : 39)].forEach((value) =\u0026gt; { result.set(value, name); }); }); // 找出可拖曳至結算牌堆尾巴的牌 FOUR_SUITS.forEach((name, index) =\u0026gt; { const stack = cardstacks[name]; if (stack.length === 0) { result.set(0 + index * 13, name); return; } const lastCard = stack[stack.length - 1]; const lastCardNumber = lastCard.value % 13; // 檢查是否為K，則跳過 if (lastCardNumber === 12) { return; } const matchNumber = lastCardNumber + 1; result.set(matchNumber + index * 13, name); }); return result; } 參數帶入要計算的全部牌堆、發牌區發到的位置，一旦檢查到有一個卡牌符合則返回拖曳路線的資訊， 若無則返回null值。 // utils/poker-helper.js /** 取得一個移動提示 * @param {CardStacks} cardStacks * @param {number} dealerIndex * @returns {MoveHint | null} 移動提示 */ function getMoveHint(cardStacks, dealerIndex) { const tailValuesMap = findTailCards(cardStacks); let hintAnswer = null; // 發牌區 let startIndex = dealerIndex \u0026lt; 3 ? 0 : dealerIndex - 3; const dealerCards = cardStacks[\u0026#39;dealerStacks\u0026#39;].slice(startIndex, dealerIndex); dealerCards.forEach((card) =\u0026gt; { if (tailValuesMap.has(card.value)) { hintAnswer = { fromName: \u0026#39;dealerStacks\u0026#39;, card: card, fromIndex: cardStacks[\u0026#39;dealerStacks\u0026#39;].findIndex((c) =\u0026gt; c.value === card.value), toName: tailValuesMap.get(card.value), }; } }); if (hintAnswer != null) return hintAnswer; // 7個牌堆 SEVEN_STACKS.forEach((name) =\u0026gt; { let len = cardStacks[name].length; for (let i = 0; i \u0026lt; len; i++) { let card = cardStacks[name][i]; // 由上往下找，遇到未開牌就跳過 if (!card.isOpen) continue; if (tailValuesMap.has(card.value)) { const toName = tailValuesMap.get(card.value); // 只能拿最後一張牌放 結算牌堆 if (FOUR_SUITS.includes(toName) \u0026amp;\u0026amp; i !== len - 1) continue; hintAnswer = { fromName: name, card: card, fromIndex: i, toName: toName, }; break; } } }); if (hintAnswer != null) return hintAnswer; // 結算牌堆 FOUR_SUITS.forEach((name) =\u0026gt; { let len = cardStacks[name].length; if (len == 0) return; let card = cardStacks[name][len - 1]; if (tailValuesMap.has(card.value)) { hintAnswer = { fromName: name, card: card, fromIndex: len - 1, toName: tailValuesMap.get(card.value), }; } }); return hintAnswer; } 執行拖曳提示動畫 目前已經可以呼叫函數getMoveHint取得拖曳路線的資訊\n{ fromName: String, // 來源牌堆的名稱 fromIndex: Number,// 撲克牌在來源牌堆中的位置 card: Card, // 應拖曳的撲克牌 toName: String, // 目標牌堆的名稱 } 雖然理想上是產生CSS動畫漸變位移過去，嘗試過但沒找到流暢的解法XD\n因此實作目標改用標示兩個位置的方式做拖曳提示😁\n實作函數showHint 使用了document.querySelector取得來源/目標所在的HTML元素，這邊是抓包含dcid屬性的\u0026lt;div\u0026gt;元素 屬性dcid是我寫在每個要取得HTML元素的HTML TAG 函數animateMoveDom則是依據傳入的來源/目標HTML元素進行一秒的顯示提示動畫 以下都是用setTimeout去做個一秒的定時動畫 /** 顯示移牌提示 */ function showHint(e) { const btnElement = e.target; const info = getMoveHint(cardStacks, dealer.index); if (info) { const { card, toName } = info; const fromDom = document.querySelector(\u0026#39;div[dcid=\u0026#34;card\u0026#39; + card.value + \u0026#39;\u0026#34;]\u0026#39;); let toDom; if (cardStacks[toName].length == 0) { toDom = document.querySelector(\u0026#39;div[dcid=\u0026#34;\u0026#39; + toName + \u0026#39;\u0026#34;]\u0026#39;); } else { toDom = document.querySelector(\u0026#39;div[dcid=\u0026#34;card\u0026#39; + cardStacks[toName][cardStacks[toName].length - 1].value + \u0026#39;\u0026#34;]\u0026#39;); } animateMoveDom(fromDom, toDom); } else { btnElement.disabled = true; const orginalContent = btnElement.textContent; btnElement.textContent = \u0026#39;沒有可移動的牌\u0026#39;; setTimeout(() =\u0026gt; { btnElement.disabled = false; btnElement.textContent = orginalContent; }, 1000); } } function animateMoveDom(element1, element2) { const { x, y, height } = element2.getBoundingClientRect(); const element1Clone = element1.cloneNode(true); const app = document.body.querySelector(\u0026#34;#app\u0026#34;); app.appendChild(element1Clone); element1Clone.style.position = \u0026#39;absolute\u0026#39;; element1Clone.style.zIndex = 9999; element1Clone.style.top = Math.floor(y + height / 3) + \u0026#39;px\u0026#39;; element1Clone.style.boxShadow = \u0026#39;0 0 10px 5px limegreen\u0026#39;; element1Clone.style.left = Math.floor(x) + \u0026#39;px\u0026#39;; element1.style.opacity = 0.5; setTimeout(() =\u0026gt; { app.removeChild(element1Clone); element1.style.opacity = 1; }, 1000); } 小結 今天實作接龍移牌提示，實作取得拖曳路線都很順利， 但要純用JS控制元素一格格移動會很不自然非常不順利，所以最後以標註起點/終點的方式去完成拖曳提示功能😎。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day22 ","permalink":"https://zongjia.me/posts/it-day22/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天要實作接龍移牌提示，以下是會需要處理的題目:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e怎麼取得場上牌的拖曳路線?\u003c/li\u003e\n\u003cli\u003e找到拖曳路線後，如何顯示要拖曳至哪個地方的提示(文字or動畫)?\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"取得拖曳路線\"\u003e取得拖曳路線\u003c/h2\u003e\n\u003cp\u003e目前可知拖曳區塊有\u003ccode\u003e7牌堆\u003c/code\u003e、\u003ccode\u003e發牌區\u003c/code\u003e、\u003ccode\u003e結算牌堆\u003c/code\u003e，其中卡牌可拖曳的方向有:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e7牌堆\u003c/code\u003e可以內部自拖曳或\u003ccode\u003e結算牌堆\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e發牌區\u003c/code\u003e只能拖曳至\u003ccode\u003e7牌堆\u003c/code\u003e、\u003ccode\u003e結算牌堆\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e結算牌堆\u003c/code\u003e只能拖曳至\u003ccode\u003e7牌堆\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e初步分析: 可以先計算可以移入\u003ccode\u003e7牌堆\u003c/code\u003e、\u003ccode\u003e結算牌堆\u003c/code\u003e牌尾的撲克牌\u003c/p\u003e\n\u003ch3 id=\"預計執行步驟\"\u003e預計執行步驟:\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e計算出\u003ccode\u003e7牌堆\u003c/code\u003e、\u003ccode\u003e結算牌堆\u003c/code\u003e各自牌尾後能放什麼牌，儲存在Map\u003c/li\u003e\n\u003cli\u003e從\u003ccode\u003e發牌區\u003c/code\u003e/\u003ccode\u003e7牌堆\u003c/code\u003e/\u003ccode\u003e結算牌堆\u003c/code\u003e依序判斷\u003cstrong\u003e可拖曳卡牌的數字\u003c/strong\u003e是否存在Map中?\n\u003cul\u003e\n\u003cli\u003e是，回傳比對成功的結果:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;可拖曳卡牌所在的牌堆\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;拖曳卡牌在牌堆的位置\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;預計移入的牌堆\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e否，繼續比對下一張直到無牌可比\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"實際程式碼\"\u003e實際程式碼\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e參數帶入要計算的全部牌堆，計算回傳每張牌可被移入的牌堆。\n\u003cblockquote\u003e\n\u003cp\u003e因為有可能出現\u003cstrong\u003e梅花A\u003c/strong\u003e可以移入\u003ccode\u003e結算牌堆\u003c/code\u003e或\u003ccode\u003e7牌堆\u003c/code\u003e的情況，所以實作設計成\u003ccode\u003e一張牌\u003c/code\u003e只會對應\u003cstrong\u003e一個牌堆\u003c/strong\u003e，此例\u003cstrong\u003e梅花A\u003c/strong\u003e會優先被移入\u003ccode\u003e結算牌堆\u003c/code\u003e。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// utils/poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * 找出7牌堆、結算牌堆各牌尾後要接的牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {CardStacks} cardstacks\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @returns {Map\u0026lt;Number, String\u0026gt;} Map\u0026lt;撲克牌編號, 目標牌堆名稱\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindTailCards\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardstacks\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMap\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 找出可拖曳至7牌堆尾巴的牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardstacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            [\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e38\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e51\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardSymbol\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003efloor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 檢查是否為A，則跳過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematchNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisBlack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardSymbol\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003ematchNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisBlack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003ematchNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisBlack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e39\u003c/span\u003e)].\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 找出可拖曳至結算牌堆尾巴的牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardstacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003estack\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 檢查是否為K，則跳過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematchNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCardNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ematchNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e參數帶入要計算的全部牌堆、發牌區發到的位置，一旦檢查到有一個卡牌符合則返回\u003ccode\u003e拖曳路線的資訊\u003c/code\u003e，\n若無則返回\u003ccode\u003enull\u003c/code\u003e值。\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// utils/poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** 取得一個移動提示\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e* @param {CardStacks} cardStacks \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e* @param {number} dealerIndex \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e* @returns {MoveHint | null} 移動提示\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMoveHint\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edealerIndex\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindTailCards\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 發牌區\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estartIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estartIndex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edealerIndex\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edealerCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehas\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dealerStacks\u0026#39;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003efindIndex\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 7個牌堆\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSEVEN_STACKS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// 由上往下找，遇到未開牌就跳過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehas\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// 只能拿最後一張牌放 結算牌堆\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 結算牌堆\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehas\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efromName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003efromIndex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003etoName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etailValuesMap\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehintAnswer\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"執行拖曳提示動畫\"\u003e執行拖曳提示動畫\u003c/h2\u003e\n\u003cp\u003e目前已經可以呼叫函數\u003ccode\u003egetMoveHint\u003c/code\u003e取得拖曳路線的資訊\u003c/p\u003e","title":"Day22 接龍移牌提示"},{"content":"前言 今天預計實作的項目顯示分數、顯示遊玩時間， 但實作顯示分數必須配合實作累計分數的功能，不然分數都不會變動也是尷尬😂。\n儲存分數、遊玩時間的變數宣告:\nconst gameScore = ref(0); const gameTime = ref(0); const gameTimer = ref(null); 實作遊戲分數 實作分數累計規則 先整理出接龍的分數在什麼情況會增加?\n從發牌區移出則加10分，因為發牌區的牌不會被重新移入所以不用擔心重複加分。 // DragDemo.vue /** 發牌區移動 */ function dealerMove(evt) { // 略 if(result){ changeOption.value = () =\u0026gt; { // 略 gameScore.value += 10; } } } 7牌堆的牌被打開則加5分，因為被打開的牌不會被蓋回去。 原本程式就會將7牌堆最一張牌設為打開，改判斷最後一張原本是蓋牌才開牌、加5分避免分數重複累加。\n// DragDemo.vue watch(cardStacks, (stacks) =\u0026gt; { // 檢查每組牌堆最後一張 validNames.forEach(cardName =\u0026gt; { if (stacks[cardName].length \u0026gt; 0) { const lastCard = stacks[cardName][stacks[cardName].length - 1]; if (!lastCard.isOpen) { lastCard.isOpen = true; gameScore.value += 5; } } }); }); 卡牌移入結算牌堆加15分，移出則扣15分。 移出的部分直接調整結算牌堆移動進行扣分 /** 結算牌堆移動 */ function finishedCardMove(evt) { // 略 if (result) { changeOption.value = () =\u0026gt; { gameScore.value -= 15; changeOption.value = null; }; } return result; } 移入結算牌堆則會需要調整發牌區和7牌堆的移動，一樣是調整changeOption.value的程式碼要加15分。 因為第1點的規則(10分)，如果直接從發牌區拖曳至結算牌堆會加25分(15+10)\n/** 發牌區移動 */ function dealerMove(evt) { // 如果目標是結算盤堆，則套用結算盤堆的規則 const isToFinishedArea = FOUR_SUITS.includes(to); // 略 if (result) { changeOption.value = () =\u0026gt; { cardStacks.dealerStacks = cardStacks.dealerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); gameScore.value += 10 + (isToFinishedArea ? 15 : 0); changeOption.value = null; }; } return result; } /** 7牌堆移動 */ function limitLocalMove(evt) { const isToFinishedArea = FOUR_SUITS.includes(to); // 略 if (result) { // 略 changeOption.value = () =\u0026gt; { cardStacks[from] = newFromCards; cardStacks[to] = newToCards; if (isToFinishedArea) { gameScore.value += 15; } changeOption.value = null; }; } // 仍使用原生的拖曳效果 return result; } 實作顯示樣板 這邊只是把分數、時間、重置按鈕都移動至同一區塊，部分程式碼如下:\n\u0026lt;!-- DragDemo.vue --\u0026gt; \u0026lt;div style=\u0026#34; display: flex; flex-wrap: wrap; flex-direction: row;justify-content: space-around; align-items: center; background-color: antiquewhite; font-size: large;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;累計分數: {{ gameScore }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;經過時間: {{ gameTime }} 秒\u0026lt;/div\u0026gt; \u0026lt;button style=\u0026#34;font-size: 1.5rem;\u0026#34; @click=\u0026#34;resetGame\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; 實作遊玩時間 撰寫遊戲計時的函數startTimer()\n變數gameTime負責儲存秒數 變數gameTimer負責儲存intervalID function startTimer() { if (!gameTimer.value) { gameTimer.value = setInterval(() =\u0026gt; { gameTime.value++; }, 1000); } } 當點擊GameBoard時則執行startTimer()的樣板:\n\u0026lt;GameBoard style=\u0026#34;display: flex;\u0026#34; @click=\u0026#34;startTimer\u0026#34;\u0026gt; 當遊戲重置時，使用clearInterval(gameTimer.value)清除遊玩時間的計時器。\n小結 程式碼逐漸變得複雜，但依舊完成預期的功能分數、時間\n明天想實作看看如何做到下一步提示。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day21 ","permalink":"https://zongjia.me/posts/it-day21/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天預計實作的項目\u003cstrong\u003e顯示分數\u003c/strong\u003e、\u003cstrong\u003e顯示遊玩時間\u003c/strong\u003e，\n但實作\u003cstrong\u003e顯示分數\u003c/strong\u003e必須配合實作\u003cstrong\u003e累計分數\u003c/strong\u003e的功能，不然分數都不會變動也是尷尬😂。\u003c/p\u003e\n\u003cp\u003e儲存分數、遊玩時間的變數宣告:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egameTime\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egameTimer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"實作遊戲分數\"\u003e實作遊戲分數\u003c/h2\u003e\n\u003ch3 id=\"實作分數累計規則\"\u003e實作分數累計規則\u003c/h3\u003e\n\u003cp\u003e先整理出接龍的分數在什麼情況會增加?\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e從\u003ccode\u003e發牌區\u003c/code\u003e移出則加10分，因為\u003ccode\u003e發牌區\u003c/code\u003e的牌不會被重新移入所以不用擔心重複加分。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** 發牌區移動 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// 略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003ccode\u003e7牌堆\u003c/code\u003e的牌被打開則加5分，因為被打開的牌不會被蓋回去。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原本程式就會將\u003ccode\u003e7牌堆\u003c/code\u003e最一張牌設為打開，改判斷最後一張原本是蓋牌才開牌、加5分避免分數重複累加。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ewatch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查每組牌堆最後一張\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalidNames\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e卡牌移入\u003ccode\u003e結算牌堆\u003c/code\u003e加15分，移出則扣15分。\n\u003cul\u003e\n\u003cli\u003e移出的部分直接調整\u003ccode\u003e結算牌堆\u003c/code\u003e移動進行扣分\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** 結算牌堆移動 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efinishedCardMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003egameScore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e移入結算牌堆則會需要調整\u003ccode\u003e發牌區\u003c/code\u003e和\u003ccode\u003e7牌堆\u003c/code\u003e的移動，一樣是調整\u003ccode\u003echangeOption.value\u003c/code\u003e的程式碼要加15分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e因為第1點的規則(10分)，如果直接從發牌區拖曳至結算牌堆會加25分(15+10)\u003c/p\u003e","title":"Day21 顯示接龍分數、遊戲時間"},{"content":"前言 今天會先實作結算牌堆的牌要可以拖曳至7牌堆， 另外因為每次要重新開始都要切換頁面或按F5重新整理也會實作一個重置遊戲的按鈕\n拖曳結算牌堆的牌 至 7牌堆 原本以為會花點時間想怎麼做，但實際上思考、實作都沒花多少時間就完成。\n因為結算牌堆拖曳的牌一次只會拖曳一張，且拖曳到7牌堆的過程判斷基本上抄之前7牌堆自己的拖曳判斷方法就差不多完成，只多了一個先判斷拖曳的目標牌堆是否為七牌堆，甚至不用像其他牌堆拖曳:move還要額外去寫『拖曳成功後要觸發修改陣列』的函數changeOption.vlaue。\n以下是對應結算牌堆\u0026lt;FinishedArea \u0026gt;內元件的屬性:move實作程式碼:\n// DragDemo.vue /** 結算牌堆移動 */ function finishedCardMove(evt) { const to = getDomName(evt.to); const { futureIndex, element } = evt.draggedContext; let result = validNames.includes(to); // 只能移動至目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], element); return result; } 調整樣板\u0026lt;FinishedArea \u0026gt;的屬性:moveCard=\u0026quot;finishedCardMove\u0026quot;即可套用上方的函數。\n\u0026lt;!-- DragDemo.vue --\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;結算牌堆\u0026lt;/div\u0026gt; \u0026lt;FinishedArea :fourCards=\u0026#34;cardStacks\u0026#34; :moveCard=\u0026#34;finishedCardMove\u0026#34; @doms=\u0026#34;setFourCardDoms\u0026#34; :change=\u0026#34;cardChange\u0026#34; /\u0026gt; 實作重置遊戲的按鈕 因為遊戲初始化就是寫在onMounted但重設的部分不夠完整，至少並沒有考慮到結算牌堆的部分，舊版初始化程式碼如下:\nonMounted(() =\u0026gt; { const data = geneateShuffleDeck(52); const everyIndex = [0, 1, 3, 6, 10, 15, 21, 28]; validNames.forEach((name, idx) =\u0026gt; { cardStacks[name] = data.slice(everyIndex[idx], everyIndex[idx + 1]); }); cardStacks.dealerStacks = data.slice(28).map(card =\u0026gt; ({ ...card, isOpen: true })); }); 所以乾脆將初始化遊戲寫成函數resetGame()，這樣點擊重置按鈕、渲染元件onMounted時都可以呼叫同個函數。\n// DragDemo.vue onMounted(() =\u0026gt; { resetGame(); }); 意外發現發牌區\u0026lt;DealerArea\u0026gt;開牌到第幾張的狀態是包在元件內不利於初始化，決定先將狀態提升父元件的程式碼中DragDemo.vue，將開牌到第幾張的索引改用props方式傳入通知元件\u0026lt;DealerArea\u0026gt;要更新索引。\n// DragDemo.vue \u0026lt;script setup\u0026gt; let dealer = reactive({ index: 0 }); \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;DealerArea :dealer=\u0026#34;dealer\u0026#34; :deck=\u0026#34;cardStacks.dealerStacks\u0026#34; :moveCard=\u0026#34;dealerMove\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; 為了讓\u0026lt;DealerArea\u0026gt;取得發牌索引的變化，在definProps新增屬性dealer對應一個reactive物件，當物件dealer參考變動時則發牌區的索引index會被設值 【變動後dealer的index】，參考下方程式碼:\n// DealerArea.vue const props = defineProps( { dealer: { type: Object, default: reactive({ index: 0 }) }, // ...略 } ) const index = ref(0); watch(() =\u0026gt; props.dealer, (newDealer) =\u0026gt; { index.value = newDealer.index; }); 發牌區的開牌索引是const index = ref(0);宣告維持不變，讓\u0026lt;DealerArea\u0026gt;原本的index等操作程式碼不用調整。\n回到遊戲重置的部分關於函數resetGame的實作，只需要比原本的onMount重設多上重設開牌索引、重設結算牌堆的資料，可以注意到變數dealer直接被賦予新物件{ index : 0 }這樣才可以刺激子元件\u0026lt;DealerArea\u0026gt;的watch觀測到變化進而調整元件內部的開牌索引。\n// DragDemo.vue function resetGame() { const data = geneateShuffleDeck(52); // 洗亂的52張牌 const everyIndex = [0, 1, 3, 6, 10, 15, 21, 28]// 7牌堆每個牌堆的起始index validNames.forEach((name, idx) =\u0026gt; { cardStacks[name] = data.slice(everyIndex[idx], everyIndex[idx + 1]); }); // 發牌區 cardStacks.dealerStacks = data.slice(28).map(card =\u0026gt; ({ ...card, isOpen: true })); // 結算牌堆區 FOUR_SUITS.forEach(name =\u0026gt; { cardStacks[name] = []; }); dealer = { index: 0 }; } 小結 今天原本只要完善結算牌堆拖曳，但有些時間就補上遊戲重置的機制。\n明日預計讓接龍顯示分數、遊玩時間。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day20 ","permalink":"https://zongjia.me/posts/it-day20/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天會先實作\u003ccode\u003e結算牌堆\u003c/code\u003e的牌要可以拖曳至\u003ccode\u003e7牌堆\u003c/code\u003e，\n另外因為每次要重新開始都要切換頁面或按F5重新整理也會實作一個\u003ccode\u003e重置\u003c/code\u003e遊戲的按鈕\u003c/p\u003e\n\u003ch2 id=\"拖曳結算牌堆的牌-至-7牌堆\"\u003e拖曳結算牌堆的牌 至 7牌堆\u003c/h2\u003e\n\u003cp\u003e原本以為會花點時間想怎麼做，但實際上思考、實作都沒花多少時間就完成。\u003c/p\u003e\n\u003cp\u003e因為\u003ccode\u003e結算牌堆\u003c/code\u003e拖曳的牌一次只會拖曳一張，且拖曳到\u003ccode\u003e7牌堆\u003c/code\u003e的過程判斷基本上抄之前\u003ccode\u003e7牌堆\u003c/code\u003e自己的拖曳判斷方法就差不多完成，只多了一個先判斷拖曳的目標牌堆是否為\u003ccode\u003e七牌堆\u003c/code\u003e，甚至不用像其他牌堆拖曳\u003ccode\u003e:move\u003c/code\u003e還要額外去寫『拖曳成功後要觸發修改陣列』的函數\u003ccode\u003echangeOption.vlaue\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e以下是對應結算牌堆\u003ccode\u003e\u0026lt;FinishedArea \u0026gt;\u003c/code\u003e內元件的屬性\u003ccode\u003e:move\u003c/code\u003e實作程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** 結算牌堆移動 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efinishedCardMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalidNames\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eincludes\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 只能移動至目標牌堆的最後一張牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查疊牌順序、花色是否正確\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e調整樣板\u003ccode\u003e\u0026lt;FinishedArea \u0026gt;\u003c/code\u003e的屬性\u003ccode\u003e:moveCard=\u0026quot;finishedCardMove\u0026quot;\u003c/code\u003e即可套用上方的函數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!--\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDragDemo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e結算牌堆\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eFinishedArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:fourCards\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:moveCard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;finishedCardMove\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e@doms\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e=\u0026#34;setFourCardDoms\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e:change\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardChange\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"實作重置遊戲的按鈕\"\u003e實作重置遊戲的按鈕\u003c/h2\u003e\n\u003cp\u003e因為遊戲初始化就是寫在\u003ccode\u003eonMounted\u003c/code\u003e但重設的部分不夠完整，至少並沒有考慮到\u003ccode\u003e結算牌堆的部分\u003c/code\u003e，舊版初始化程式碼如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eonMounted\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egeneateShuffleDeck\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eeveryIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalidNames\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eeveryIndex\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003eeveryIndex\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eidx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e =\u0026gt; ({ ...\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e }));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以乾脆將初始化遊戲寫成函數\u003ccode\u003eresetGame()\u003c/code\u003e，這樣點擊重置按鈕、渲染元件\u003ccode\u003eonMounted\u003c/code\u003e時都可以呼叫同個函數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eonMounted\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eresetGame\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e意外發現發牌區\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e開牌到第幾張的狀態是包在元件內不利於初始化，決定先將狀態提升父元件的程式碼中\u003ccode\u003eDragDemo.vue\u003c/code\u003e，將開牌到第幾張的索引改用\u003ccode\u003eprops\u003c/code\u003e方式傳入通知元件\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e要更新索引。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereactive\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e發牌區\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eDealerArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:dealer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dealer\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:deck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks.dealerStacks\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:moveCard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dealerMove\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e為了讓\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e取得發牌索引的變化，在\u003ccode\u003edefinProps\u003c/code\u003e新增屬性\u003ccode\u003edealer\u003c/code\u003e對應一個\u003ccode\u003ereactive物件\u003c/code\u003e，當物件\u003ccode\u003edealer\u003c/code\u003e參考變動時則\u003ccode\u003e發牌區\u003c/code\u003e的索引\u003ccode\u003eindex\u003c/code\u003e會被設值 【變動後\u003ccode\u003edealer\u003c/code\u003e的index】，參考下方程式碼:\u003c/p\u003e","title":"Day20 實作結算牌堆元件(四) 實作移入7牌堆的拖曳\u0026遊戲重置"},{"content":"前言 今天會實作發牌區、7牌堆的牌可以拖曳到結算牌堆，且拖曳的過程需遵守結算牌堆的同色疊牌由A至K的規則。\n整理重複的函數 先將昨天在DealerAreaView.vue撰寫的程式碼移動到拖曳練習的頁面DragDemo.vue。\n樣板的部分是沒什麼問題，只是發現有太多函數宣告出現在DragDemo.vue，所以將常數FOUR_SUITS和判斷結算牌堆規則的checkNextOk2函數先移入工具目錄utils/內的程式碼，DragDemo.vue改用import的方式載入通用的常數、函數。\n// DragDemo.vue import { FOUR_SUITS } from \u0026#39;../utils/constants\u0026#39;; import { geneateShuffleDeck, checkNextOk, checkNextOk2 } from \u0026#34;../utils/poker-helper\u0026#34;; 設定結算牌堆用的資料 在原本的cardStack中添加針對結算牌堆四花色的撲克牌陣列\n// DragDemo.vue const cardStacks = reactive({ // 略... /** @type {Card[]} */ club: [], /** @type {Card[]} */ diamond: [], /** @type {Card[]} */ heart: [], /** @type {Card[]} */ spade: [] }); 因為\u0026lt;FinishedArea /\u0026gt;的屬性:fourCard只有要求傳入的物件需要有對應花色名稱的KEY就可以，沒有硬性要求不能有其他屬性， 所以樣板的傳值我就簡單設定cardStacks傳入，如下程式碼:\n\u0026lt;!-- DragDemo.vue --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;DealerArea :deck=\u0026#34;cardStacks.dealerStacks\u0026#34; :moveCard=\u0026#34;dealerMove\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;結算牌堆\u0026lt;/div\u0026gt; \u0026lt;FinishedArea :fourCards=\u0026#34;cardStacks\u0026#34; @doms=\u0026#34;setFourCardDoms\u0026#34; :change=\u0026#34;cardChange\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 在DragDemo.vue中對變數cardStacks新增四個key調整，而原本的函數getDomName(dom)也要跟著調整， 主要除了上層對應7個牌堆、也需要對應到結算牌堆的HTML元素。\n底下程式碼中使用花色列表FOUR_SUITS一個個檢查， 若有相同的元素則回傳結算牌堆的花色名稱 (club/diamond/heart/spade)，否則依然回傳none。\n// DragDemo.vue function getDomName(dom) { if (dom == first.value.targetDomElement) { return \u0026#39;first\u0026#39;; } else if (dom == second.value.targetDomElement) { return \u0026#39;second\u0026#39;; } else if (dom == third.value.targetDomElement) { return \u0026#39;third\u0026#39;; } else if (dom == fourth.value.targetDomElement) { return \u0026#39;fourth\u0026#39;; } else if (dom == fifth.value.targetDomElement) { return \u0026#39;fifth\u0026#39;; } else if (dom == sixth.value.targetDomElement) { return \u0026#39;sixth\u0026#39;; } else if (dom == seventh.value.targetDomElement) { return \u0026#39;seventh\u0026#39;; } else { for (let i = 0; i \u0026lt; FOUR_SUITS.length; i++) { const name = FOUR_SUITS[i]; if (dom == fourCardsDom[name]) { return name; } } return \u0026#39;none\u0026#39;; } } 上方程式碼寫到的變數fourCardsDom是一個字典，KEY會是花色(字串)，VALUE對應畫色的結算牌堆(HTML元素)。\n底下的函數setFourCardDoms將花色、HTML元素儲存到變數fourCardsDom這個字典中這件事，會在\u0026lt;FinishedArea /\u0026gt;發送的@doms事件被執行，這跟昨天實作在DealerAreaView.vue中一樣只會執行一次。\n// DragDemo.vue const fourCardsDom = reactive({ club: null, diamond: null, heart: null, spade: null, }); function setFourCardDoms(cardDomMaps) { FOUR_SUITS.forEach(name =\u0026gt; { const domElement = cardDomMaps[name]; fourCardsDom[name] = domElement; }); } 調整拖曳至結算牌堆的規則 發牌區拖曳 主要是調整內部變數result的布林判斷，如果拖曳目標位置名稱to是結算牌堆的花色則走屬於checkNextOk2的判斷，否則是走checkNextOk的不同花色疊牌判斷，至於if (result)內的並沒有調整。\n/** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; const { futureIndex } = evt.draggedContext; let result = true; // 如果目標是結算盤堆，則套用結算盤堆的規則 if (FOUR_SUITS.includes(to)) { result = result \u0026amp;\u0026amp; checkNextOk2(to, cardStacks, dealerCard); } else { // 只能移動至目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], dealerCard); } if (result) { changeOption.value = () =\u0026gt; { cardStacks.dealerStacks = cardStacks.dealerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } 7牌堆拖曳 這部分跟發牌區拖曳一樣只改動result的布林判斷，如果是針對結算牌堆則改用checkNextOk2，目前測試應該是沒問題，直接上縮減後的程式碼:\nfunction limitLocalMove(evt) { // 略 if (FOUR_SUITS.includes(to)) { result = result \u0026amp;\u0026amp; checkNextOk2(to, cardStacks, element); } else { // 只能移動至目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], element); } // 略 } 小結 已完成撲克牌都可以遵守規則拖曳至結算牌堆，但目前結算牌堆的牌移入後就無法移出，所以結算牌堆還不完全符合紙牌接龍的遊戲規則。\n明日預計完成結算牌堆的牌應該要可以拖曳回7牌堆。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day19 ","permalink":"https://zongjia.me/posts/it-day19/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天會實作\u003ccode\u003e發牌區\u003c/code\u003e、\u003ccode\u003e7牌堆\u003c/code\u003e的牌可以拖曳到\u003ccode\u003e結算牌堆\u003c/code\u003e，且拖曳的過程需遵守\u003ccode\u003e結算牌堆\u003c/code\u003e的同色疊牌由A至K的規則。\u003c/p\u003e\n\u003ch2 id=\"整理重複的函數\"\u003e整理重複的函數\u003c/h2\u003e\n\u003cp\u003e先將昨天在\u003ccode\u003eDealerAreaView.vue\u003c/code\u003e撰寫的程式碼移動到拖曳練習的頁面\u003ccode\u003eDragDemo.vue\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e樣板的部分是沒什麼問題，只是發現有太多函數宣告出現在\u003ccode\u003eDragDemo.vue\u003c/code\u003e，所以將常數\u003ccode\u003eFOUR_SUITS\u003c/code\u003e和判斷結算牌堆規則的\u003ccode\u003echeckNextOk2\u003c/code\u003e函數先移入工具目錄\u003ccode\u003eutils/\u003c/code\u003e內的程式碼，\u003ccode\u003eDragDemo.vue\u003c/code\u003e改用\u003ccode\u003eimport\u003c/code\u003e的方式載入通用的常數、函數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;../utils/constants\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003egeneateShuffleDeck\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk2\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;../utils/poker-helper\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"設定結算牌堆用的資料\"\u003e設定結算牌堆用的資料\u003c/h2\u003e\n\u003cp\u003e在原本的\u003ccode\u003ecardStack\u003c/code\u003e中添加針對結算牌堆四花色的撲克牌陣列\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereactive\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 略...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e/** @type {Card[]} */\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#75715e\"\u003e/** @type {Card[]} */\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#75715e\"\u003e/** @type {Card[]} */\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#75715e\"\u003e/** @type {Card[]} */\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因為\u003ccode\u003e\u0026lt;FinishedArea /\u0026gt;\u003c/code\u003e的屬性\u003ccode\u003e:fourCard\u003c/code\u003e只有要求傳入的物件需要有對應花色名稱的\u003cstrong\u003eKEY\u003c/strong\u003e就可以，沒有硬性要求不能有其他屬性，\n所以樣板的傳值我就簡單設定\u003ccode\u003ecardStacks\u003c/code\u003e傳入，如下程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!--\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDragDemo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evue\u003c/span\u003e  \u003cspan style=\"color:#f92672\"\u003e--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e發牌區\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eDealerArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:deck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks.dealerStacks\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:moveCard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dealerMove\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e結算牌堆\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eFinishedArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:fourCards\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e@doms\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e=\u0026#34;setFourCardDoms\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:change\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardChange\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在\u003ccode\u003eDragDemo.vue\u003c/code\u003e中對變數\u003ccode\u003ecardStacks\u003c/code\u003e新增四個key調整，而原本的函數\u003ccode\u003egetDomName(dom)\u003c/code\u003e也要跟著調整，\n主要除了上層對應7個牌堆、也需要對應到\u003ccode\u003e結算牌堆\u003c/code\u003e的HTML元素。\u003c/p\u003e\n\u003cp\u003e底下程式碼中使用花色列表\u003ccode\u003eFOUR_SUITS\u003c/code\u003e一個個檢查，\n若有相同的元素則回傳\u003ccode\u003e結算牌堆\u003c/code\u003e的花色名稱 (club/diamond/heart/spade)，否則依然回傳\u003cstrong\u003enone\u003c/strong\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;first\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esecond\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;second\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethird\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;third\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efourth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;fourth\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efifth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;fifth\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esixth\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sixth\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eseventh\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etargetDomElement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;seventh\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOUR_SUITS\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003edom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efourCardsDom\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;none\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上方程式碼寫到的變數\u003ccode\u003efourCardsDom\u003c/code\u003e是一個字典，\u003cstrong\u003eKEY\u003c/strong\u003e會是花色(字串)，\u003cstrong\u003eVALUE\u003c/strong\u003e對應畫色的結算牌堆(HTML元素)。\u003c/p\u003e","title":"Day 19 實作結算牌堆元件(三)整合至接龍頁面"},{"content":"前言 昨天完成結算牌堆樣版的部分，今天接著處理整合拖曳到接龍之前的步驟， 先調整結算牌堆的內部結構、方法。\n調整結算牌堆 FinishedArea 先調整結算牌堆\u0026lt;FinishedArea /\u0026gt;內部需要的props結構，就底下這三種:\nprops.fourCards對應四個牌堆的陣列 props.moveCard對應\u0026lt;draggable\u0026gt;元件的屬性:move判斷是否可以拖曳成功的函數 props.change對應\u0026lt;draggable\u0026gt;內的列表更新時觸發的函數(這部分等等再說明) 程式碼如下:\n// FinishedArea.vue const props = defineProps({ fourCards: { type: Object, required: true, validator: (value) =\u0026gt; { return ( value.hasOwnProperty(\u0026#39;club\u0026#39;) \u0026amp;\u0026amp; value.hasOwnProperty(\u0026#39;diamond\u0026#39;) \u0026amp;\u0026amp; value.hasOwnProperty(\u0026#39;heart\u0026#39;) \u0026amp;\u0026amp; value.hasOwnProperty(\u0026#39;spade\u0026#39;) ); }, }, moveCard: { type: Function, default: () =\u0026gt; { return false; } }, change: { type: Function, default: () =\u0026gt; { return false; } } }) 然後結算牌堆就像發牌區一樣，卡牌陣列都是由外部props傳入且props的陣列內容都會變動， 所以也需要watch監控props.fourCards變化調整元件內的fourCards內的值。\n// FinishedArea.vue const fourCards = ref({ club: [], diamond: [], heart: [], spade: [], }); watch(props.fourCards, (newVal) =\u0026gt; { fourCards.value = newVal; }); 另外設計一個用來將對應HTML元素(HTML Element)傳回父元件的emit事件，此事件只會在元件渲染成功時觸發一次，發送doms主要是讓父元件可以判斷是被拖曳至哪一個牌堆。\n// FinishedArea.vue const club = ref(null); const diamond = ref(null); const heart = ref(null); const spade = ref(null); const emit = defineEmits([\u0026#39;doms\u0026#39;]); onMounted(() =\u0026gt; { emit(\u0026#39;doms\u0026#39;, { club: club.value.targetDomElement, diamond: diamond.value.targetDomElement, heart: heart.value.targetDomElement, spade: spade.value.targetDomElement, }) }) 整合拖曳相容不同規則 為了避免在嘗試的過程中影響先前的發牌區和七牌堆， 所以決定先將結算牌堆 \u0026lt;FinishedArea\u0026gt;跟發牌區 \u0026lt;DealerArea\u0026gt;整合在另一個頁面避免產生衝突。\n樣板構造很簡單:\n\u0026lt;!-- DealerAreaView.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;main\u0026gt; \u0026lt;GameBoard\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;DealerArea :deck=\u0026#34;deck\u0026#34; :moveCard=\u0026#34;moveInFourCards\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;結算牌堆\u0026lt;/div\u0026gt; \u0026lt;FinishedArea :fourCards=\u0026#34;fourCards\u0026#34; @doms=\u0026#34;setFourCardDoms\u0026#34; :change=\u0026#34;cardChange\u0026#34; /\u0026gt; \u0026lt;/GameBoard\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 資料處理的部分都放父元件DealerAreaView.vue裡面比較複雜一點，以下會先從簡單開始。\n儲存對應結算牌堆內的HTM元素 我先宣告一個陣列FOUT_SUITS負責儲存對應結算的花色(梅花-\u0026gt;黑桃)， 函數setFouCardDoms會在子元件觸發**@doms**事件回傳的名稱對應HTML元素的字典，存放在變數fourCardsDom提供後續拖曳判斷。\n// DealerAreaView.vue const FOUR_SUITS = Object.freeze([\u0026#39;club\u0026#39;, \u0026#39;diamond\u0026#39;, \u0026#39;heart\u0026#39;, \u0026#39;spade\u0026#39;]); const fourCardsDom = reactive({ club: null, diamond: null, heart: null, spade: null, }); function setFourCardDoms(cardDomMaps) { FOUR_SUITS.forEach(name =\u0026gt; { const domElement = cardDomMaps[name]; fourCardsDom[name] = domElement; }); } 拖曳至結算牌堆 因為除了判斷是否可拖曳也需要設定拖曳後的資料處理，以下是函數moveInFourCards(evt)的步驟:\n首先判斷拖曳到的位置是結算牌堆的哪個花色deckColor? null 則不可拖曳 判斷拖曳至牌堆的規則(必須是同花色的下一個數字)有點複雜我就包在函數checkNextOk2? false 則不可拖曳 如果前面都判斷可拖曳，則先計算出來源、目標牌堆的變動結果並將修改執行包在箭頭函數，暫存至全局變數changeOption changeOption內的箭頭函數會在卡牌拖曳成功後，在函數cardChange()中被呼叫\n/** 將發牌區的牌拖曳至 結算牌堆 中 */ function moveInFourCards(evt) { console.log(evt); const { element, index } = evt.draggedContext; // 檢查是否拖曳至 結算牌堆 const { to } = evt; let deckColor = null; FOUR_SUITS.forEach(name =\u0026gt; { if (fourCardsDom[name] === to) { deckColor = name; } }); let result = deckColor != null; result = result \u0026amp;\u0026amp; checkNextOk2(deckColor, element); if (result) { const fromCards = deck.value.filter((card) =\u0026gt; card.value != element.value) const toCards = [...fourCards[deckColor], element]; changeOption.value = () =\u0026gt; { deck.value = fromCards; fourCards[deckColor] = toCards; changeOption.value = null; }; } return result; } /** 檢查下一張牌是否可以放上去`集牌堆` * @param {String} pokerColor 牌堆花色 * @param {Card} card 要放上去的牌 * * @returns {Boolean} 是否可以放上去 */ function checkNextOk2(pokerColor, card) { const pokerColorIndex = Math.floor(card.value / 13); const pokerNumber = card.value % 13; const pokerColorName = FOUR_SUITS[pokerColorIndex]; if (pokerColorName !== pokerColor) { return false; } const deckCards = fourCards[pokerColor]; if (deckCards.length === 0 \u0026amp;\u0026amp; pokerNumber !== 0) { return false; } const lastCardNumber = deckCards[deckCards.length - 1].value % 13; return lastCardNumber + 1 === pokerNumber; } 小結 雖然還沒完全整合至接龍，但至少撰寫一個新的判斷規則函數 和 利用emit傳送HTML元素給上層判斷，這部分也是之後整合進接龍或許還需要emit再出場一次😂。\n題外話:最近看Godot的官方文件提到signal時的提供的參考文件Observer中有提到遊戲最常使用的模式觀察者模式，其實就跟Vue的emit一樣即使沒有人接收也會執行發送，但有訂閱的物件就會收到回應。\n明天再來繼續加油!👍👍👍\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day18 ","permalink":"https://zongjia.me/posts/it-day18/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e昨天完成\u003ccode\u003e結算牌堆\u003c/code\u003e樣版的部分，今天接著處理整合拖曳到接龍之前的步驟，\n先調整\u003ccode\u003e結算牌堆\u003c/code\u003e的內部結構、方法。\u003c/p\u003e\n\u003ch2 id=\"調整結算牌堆-finishedarea\"\u003e調整結算牌堆 FinishedArea\u003c/h2\u003e\n\u003cp\u003e先調整結算牌堆\u003ccode\u003e\u0026lt;FinishedArea /\u0026gt;\u003c/code\u003e內部需要的\u003ccode\u003eprops\u003c/code\u003e結構，就底下這三種:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eprops.fourCards\u003c/code\u003e對應四個牌堆的陣列\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprops.moveCard\u003c/code\u003e對應\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e元件的屬性\u003ccode\u003e:move\u003c/code\u003e判斷是否可以拖曳成功的函數\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprops.change\u003c/code\u003e對應\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e內的列表更新時觸發的函數(這部分等等再說明)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e程式碼如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// FinishedArea.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprops\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefineProps\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Object,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003erequired\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003evalidator\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehasOwnProperty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;club\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehasOwnProperty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;diamond\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehasOwnProperty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;heart\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehasOwnProperty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;spade\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emoveCard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Function,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echange\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Function,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然後結算牌堆就像發牌區一樣，卡牌陣列都是由外部\u003ccode\u003eprops\u003c/code\u003e傳入且props的陣列內容都會變動，\n所以也需要\u003ccode\u003ewatch\u003c/code\u003e監控\u003cstrong\u003eprops.fourCards\u003c/strong\u003e變化調整元件內的\u003ccode\u003efourCards\u003c/code\u003e內的值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// FinishedArea.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewatch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eprops\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003enewVal\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewVal\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另外設計一個用來將對應HTML元素(HTML Element)傳回父元件的\u003ccode\u003eemit\u003c/code\u003e事件，此事件只會在元件渲染成功時觸發一次，發送\u003cstrong\u003edoms\u003c/strong\u003e主要是讓父元件可以判斷是被拖曳至哪一個牌堆。\u003c/p\u003e","title":"Day 18 實作結算牌堆元件(二) 整合拖曳相容不同規則"},{"content":"前言 今日要製作結算牌堆，跟中間的7疊牌不同，結算牌堆只有4堆且只能允許同花色疊在上面，必須由小到大(A-\u0026gt;K)放上去，放上去的牌會擋住底下的牌。\n修正發牌區拖曳Bug 在開發今日功能前，測試遊玩發牌區到中間七牌堆發現能任意插到七牌堆的中間， 在函數dealerMove中補上evt.draggedContext.futureIndex == cardStacks[to].length的判斷後才正常，以下是修正後的程式碼:\n/** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 只能移動至目標牌堆的最後一張牌 let result = futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.value = () =\u0026gt; { cardStacks.dealerStacks = cardStacks.dealerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } 製作結算牌堆樣板 看一下草稿圖，接著想像畫面應該會有四個長方塊並排，四個長方都有個底圖對應花色， 底圖上方都可以擺一張牌。\n跟製作發牌區\u0026lt;DealerArea\u0026gt;相同，打算先做出元件\u0026lt;FinishedArea\u0026gt;在整合進原本的接龍區塊， 以下是目前的樣板程式碼:\n// FinishedArea.vue \u0026lt;template\u0026gt; \u0026lt;div style=\u0026#34;display: flex;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card club\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card diamond\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card heart\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card spade\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 補上拖曳的樣板前，這部分會需要考慮四個牌堆的資料， 所以資料結構就設計成四個花色各自對應1個Card陣列的狀態\n為了之後測試方便，僅先將各花色A放入對應陣列。\n// FinishedArea.vue const fourCards = reactive({ club: [], // 梅花 diamond: [],// 方塊 heart: [], // 紅心 spade: [], // 黑桃 }); onMounted(() =\u0026gt; { const cards = geneateDeck(52, true); fourCards.club = cards.slice(0, 1); fourCards.diamond = cards.slice(13, 14); fourCards.heart = cards.slice(26, 27); fourCards.spade = cards.slice(39, 40); }) 接著將樣板調整成有添加draggable元件，因為沒有添加:move屬性所以預設同個group的\u0026lt;draggable\u0026gt;內的元素是可以互相堆疊。\n// FinishedArea.vue \u0026lt;template\u0026gt; \u0026lt;div style=\u0026#34;display: flex;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card club\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.club\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card diamond\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.diamond\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card heart\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.heart\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card spade\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.spade\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 上方有添加class=\u0026quot;drag-cards\u0026quot;在\u0026lt;draggable\u0026gt;上面是為了讓無拖曳元素的牌堆區可以自動撐到最高最寬， 因為預設拖曳目標的有效空間就是\u0026lt;draggable\u0026gt;元件本身的寬高，所以才特地補這個CSS。\n/* FinishedArea.vue */ .drag-cards { width: 100%; height: 100%; } 小結 今天先定義結算牌堆\u0026lt;FinishedArea\u0026gt;的樣板、資料結構，明日再來嘗試整合進接龍頁面，研究要如何相容不同的疊牌拖曳規則😊\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day17 ","permalink":"https://zongjia.me/posts/it-day17/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今日要製作\u003ccode\u003e結算牌堆\u003c/code\u003e，跟中間的7疊牌不同，\u003ccode\u003e結算牌堆\u003c/code\u003e只有4堆且只能允許同花色疊在上面，必須由小到大(A-\u0026gt;K)放上去，放上去的牌會擋住底下的牌。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"結算牌堆示意圖\" loading=\"lazy\" src=\"/images/20230926%E7%B5%90%E7%AE%97%E7%89%8C%E5%A0%86%E7%A4%BA%E6%84%8F%E5%9C%96.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"修正發牌區拖曳bug\"\u003e修正發牌區拖曳Bug\u003c/h2\u003e\n\u003cp\u003e在開發今日功能前，測試\u003cdel\u003e遊玩\u003c/del\u003e\u003ccode\u003e發牌區\u003c/code\u003e到中間七牌堆發現能任意插到七牌堆的中間，\n在函數\u003ccode\u003edealerMove\u003c/code\u003e中補上\u003ccode\u003eevt.draggedContext.futureIndex == cardStacks[to].length\u003c/code\u003e的判斷後才正常，以下是修正後的程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** 發牌區移動 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 只能移動至目標牌堆的最後一張牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查疊牌順序、花色是否正確\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efilter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"製作結算牌堆樣板\"\u003e製作結算牌堆樣板\u003c/h2\u003e\n\u003cp\u003e看一下草稿圖，接著想像畫面應該會有四個長方塊並排，四個長方都有個底圖對應花色，\n底圖上方都可以擺一張牌。\u003c/p\u003e\n\u003cp\u003e跟製作發牌區\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e相同，打算先做出元件\u003ccode\u003e\u0026lt;FinishedArea\u0026gt;\u003c/code\u003e在整合進原本的接龍區塊，\n以下是目前的樣板程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// FinishedArea.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: flex;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card club\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card diamond\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card heart\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card spade\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e補上拖曳的樣板前，這部分會需要考慮四個牌堆的資料，\n所以資料結構就設計成四個花色各自對應1個Card陣列的狀態\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e為了之後測試方便，僅先將各花色A放入對應陣列。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// FinishedArea.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereactive\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [], \u003cspan style=\"color:#75715e\"\u003e// 梅花\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\u003cspan style=\"color:#75715e\"\u003e// 方塊\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [], \u003cspan style=\"color:#75715e\"\u003e// 紅心\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [], \u003cspan style=\"color:#75715e\"\u003e// 黑桃\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eonMounted\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egeneateDeck\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclub\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ediamond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eheart\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e27\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efourCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003espade\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e39\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接著將樣板調整成有添加\u003ccode\u003edraggable\u003c/code\u003e元件，因為沒有添加\u003ccode\u003e:move\u003c/code\u003e屬性所以預設同個group的\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e內的元素是可以互相堆疊。\u003c/p\u003e","title":"Day 17 實作結算牌堆元件(一)樣板\u0026資料結構"},{"content":"前言 今天要來處理\u0026lt;DealerArea\u0026gt;內的元素如何整合拖曳移動到7個牌堆， 這部分會拆成2個部分來看:\n可將\u0026lt;DealerArea\u0026gt;卡牌移入至牌堆上方，且遵守移動遊戲規則的條件 其他牌堆的牌無法移入\u0026lt;DealerArea\u0026gt;牌堆中 實作將\u0026lt;DealerArea\u0026gt;卡牌移入牌堆 這邊在DragDemo.vue中設定提供給發牌區\u0026lt;DealerArea\u0026gt;判斷用的:move函數，因為這個函數不像函數limitLocalMove函數是同時給7個牌堆各自使用，所以可以看到沒有特別提到from的部分，因為不用特別想就可以知道一定是來自(from)發牌區。\n如果不清楚limitLocalMove是做什麼的，這部分從 第10天~第12天 的文章都有提到，主要是對應\u0026lt;draggable\u0026gt;元件的:move函數判斷使否可拖曳成功。\n檢查疊牌遊戲規則的部分就由函數checkNextOk判斷，幾天前寫好的函數重新複用了👍 這邊只要result回傳true就會讓卡牌移動自動產生變化。\n// DragDemo.vue /** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); return result; } 樣板的部分就是小調整而已:\n// DragDemo.vue \u0026lt;DealerArea :deck=\u0026#34;cardStacks.dealerStacks\u0026#34; :moveCard=\u0026#34;dealerMove\u0026#34; /\u0026gt; 結果看起來拖曳過去是沒問題，但本該移動過去的元素也仍留在原地， 如下圖GIF出現了2個梅花9，此為禁忌的二重身問題💀必須修正。 修正陰魂不散的元素 因為還是有拖曳成功，只是舊資料殘留在發牌區的陣列cardStacks.dealerStacks，所以只要在拖曳完成時，將發牌區的陣列去除已經發出去的那一張牌即可，以下是修正後的程式碼:\n// DragDemo.vue function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.value = () =\u0026gt; { cardStacks.dealerStacks = cardStacks.dealerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } changeOption的使用在第11天有提到的。\n小結 今天主要就是完成單方面的拖曳和修Bug，本來還想說要如何防止其他卡堆的牌移入\u0026lt;DealerArea\u0026gt;的牌堆中， 後來發現這件事不會發生。\n反而是實現\u0026lt;DealerArea\u0026gt;專屬的函數dealerMove後意外發現的Bug-二重身， 這可能是因為\u0026lt;DealerArea\u0026gt;內拖曳的撲克牌是使用computed計算出來的陣列，被移除了元素也不會影響原本上游的陣列。\n明日預計實作 結算牌堆，敬請期待!\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day16 參考\nDay 10 拖曳紙牌的效果(二)限制內部拖曳 Day 11 拖曳紙牌的效果(三)如何一次拖曳多張卡牌 Day 12 實作拖曳卡牌只能置放到目標牌堆的牌尾、蓋牌無法拖曳 ","permalink":"https://zongjia.me/posts/it-day16/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天要來處理\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e內的元素如何整合拖曳移動到7個牌堆，\n這部分會拆成2個部分來看:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可將\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e卡牌移入至牌堆上方，且遵守移動遊戲規則的條件\u003c/li\u003e\n\u003cli\u003e其他牌堆的牌無法移入\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e牌堆中\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"實作將dealerarea卡牌移入牌堆\"\u003e實作將\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e卡牌移入牌堆\u003c/h2\u003e\n\u003cp\u003e這邊在\u003ccode\u003eDragDemo.vue\u003c/code\u003e中設定提供給發牌區\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e判斷用的:move函數，因為這個函數不像函數\u003ccode\u003elimitLocalMove\u003c/code\u003e函數是同時給7個牌堆各自使用，所以可以看到沒有特別提到\u003ccode\u003efrom\u003c/code\u003e的部分，因為不用特別想就可以知道一定是來自(\u003ccode\u003efrom\u003c/code\u003e)發牌區。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果不清楚\u003ccode\u003elimitLocalMove\u003c/code\u003e是做什麼的，這部分從 \u003ca href=\"#day-10-%E6%8B%96%E6%9B%B3%E7%B4%99%E7%89%8C%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%8C%E9%99%90%E5%88%B6%E5%85%A7%E9%83%A8%E6%8B%96%E6%9B%B3postsit-day10\"\u003e第10天\u003c/a\u003e~\u003ca href=\"#day-12-%E5%AF%A6%E4%BD%9C%E6%8B%96%E6%9B%B3%E5%8D%A1%E7%89%8C%E5%8F%AA%E8%83%BD%E7%BD%AE%E6%94%BE%E5%88%B0%E7%9B%AE%E6%A8%99%E7%89%8C%E5%A0%86%E7%9A%84%E7%89%8C%E5%B0%BE%E8%93%8B%E7%89%8C%E7%84%A1%E6%B3%95%E6%8B%96%E6%9B%B3postsit-day12\"\u003e第12天\u003c/a\u003e 的文章都有提到，主要是對應\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e元件的\u003ccode\u003e:move\u003c/code\u003e函數判斷使否可拖曳成功。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e檢查疊牌遊戲規則的部分就由函數\u003ccode\u003echeckNextOk\u003c/code\u003e判斷，幾天前寫好的函數重新複用了👍\n這邊只要\u003ccode\u003eresult\u003c/code\u003e回傳\u003ccode\u003etrue\u003c/code\u003e就會讓卡牌移動自動產生變化。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/** 發牌區移動 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查疊牌順序、花色是否正確\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e樣板的部分就是小調整而已:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eDealerArea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:deck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks.dealerStacks\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:moveCard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dealerMove\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e結果看起來拖曳過去是沒問題，但本該移動過去的元素也仍留在原地，\n如下圖GIF出現了2個梅花9，此為禁忌的二重身問題💀必須修正。\n\u003cimg alt=\"Day16有Bug的拖曳.gif\" loading=\"lazy\" src=\"/images/Day16%E6%9C%89Bug%E7%9A%84%E6%8B%96%E6%9B%B3.gif\"\u003e\u003c/p\u003e\n\u003ch2 id=\"修正陰魂不散的元素\"\u003e修正陰魂不散的元素\u003c/h2\u003e\n\u003cp\u003e因為還是有拖曳成功，只是舊資料殘留在發牌區的陣列\u003ccode\u003ecardStacks.dealerStacks\u003c/code\u003e，所以只要在拖曳完成時，將發牌區的陣列去除已經發出去的那一張牌即可，以下是修正後的程式碼:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// DragDemo.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查疊牌順序、花色是否正確\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckNextOk\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e], \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edealerStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efilter\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edealerCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003echangeOption\u003c/code\u003e的使用在\u003ca href=\"#day-11-%E6%8B%96%E6%9B%B3%E7%B4%99%E7%89%8C%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%89%E5%A6%82%E4%BD%95%E4%B8%80%E6%AC%A1%E6%8B%96%E6%9B%B3%E5%A4%9A%E5%BC%B5%E5%8D%A1%E7%89%8Cpostsit-day11%E5%AF%A6%E4%BD%9C%E9%82%8F%E8%BC%AF\"\u003e第11天\u003c/a\u003e有提到的。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"小結\"\u003e小結\u003c/h2\u003e\n\u003cp\u003e今天主要就是完成單方面的拖曳和修Bug，本來還想說要如何防止其他卡堆的牌移入\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e的牌堆中，\n後來發現這件事不會發生。\u003c/p\u003e\n\u003cp\u003e反而是實現\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e專屬的函數\u003ccode\u003edealerMove\u003c/code\u003e後意外發現的Bug-二重身，\n這可能是因為\u003ccode\u003e\u0026lt;DealerArea\u0026gt;\u003c/code\u003e內拖曳的撲克牌是使用\u003ccode\u003ecomputed\u003c/code\u003e計算出來的陣列，被移除了元素也不會影響原本上游的陣列。\u003c/p\u003e","title":"Day16 接龍發牌區功能實作(三)拖曳與疊牌區整合"},{"content":"前言 今天要來補強昨日缺少的拖曳功能和將整個頁面封裝成提供整合至接龍遊戲的元件發牌區。\n移牌區改為可拖曳 首先將移牌區的部分調整成從原生HTML元素div替換成這幾天都在使用draggable元件，程式碼如下:\n\u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;draggable :list=\u0026#34;canTakeCards\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;list-group\u0026#34; \u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; 發牌區調整動畫 雖然移牌區感覺在加牌的時候應該要套用動畫，但無奈vue.draggable.next的transition-group有Bug存在且已被官方棄養，在issue也有許多類似問題issue with transition-group in composition API就不細講。\n不論是Vue2使用的vue.draggable或Vue3使用的vue.draggable.next都是對SortableJS進行包裝的容器，基本上不滿意的話只能自己重封裝實現只是CP值不高，所以我不考慮這麼做。\n這不代表選擇放棄動畫，打算以CSS來實現以下動畫效果。 實際調整 首先調整樣板程式碼，主要是針對有牌時添加對應的class\u0026quot;card-back animtion\u0026quot;，也順便將點擊事件@click移到外層div:\n\u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%;\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; class=\u0026#34;card-back animation\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 添加對應CSS實現點擊後往左快速位移一次的效果\n@keyframes move-left { from { transform: translateX(0rem); } to { transform: translateX(-100rem); } } .card-back.animation:active { animation: move-left 0.55s ease; animation-iteration-count: 1; } 添加對應CSS當滑鼠移到發牌堆上方使其左右搖晃的效果\n@keyframes swing { 0% { transform: rotate(-5deg); } 50% { transform: rotate(5deg); } 100% { transform: rotate(-5deg); } } .card-back:hover { cursor: pointer; animation: swing 1s ease infinite; } 封裝成元件 在目錄 src/components 內新增檔案DealerArea.vue，並將DealerAreaView.vue的程式碼完全複製到新檔案DealerArea.vue， 但需要調整卡牌陣列deck從外部取得，所以DealerArea.vue程式碼需將變數deck改寫成以下形式:\n// DealerArea.vue const { deck } = defineProps( { deck: { type: Array, default: () =\u0026gt; [] } } ) 實際在外部引用 因為卡牌是在onMounted時才會初始化cardStacks內的每個陣列， 但不清楚為什麼初始化結束後，\u0026lt;DealerArea /\u0026gt;仍顯示無牌可用。\n/** DragDemo.vue */ \u0026lt;DealerArea :deck=\u0026#34;cardStacks.dealerStacks\u0026#34; /\u0026gt; 查詢網路資料後，才知道原來子組件props如果會整個異動的話需要用watch去監控變化才會重新觸發渲染， 所以再次調整DealerArea.vue的程式碼:\n// DealerArea.vue const props = defineProps( { deck: { type: Array, default: () =\u0026gt; [] }, moveCard: { type: Function, default: () =\u0026gt; { return false; } } } ) const deck = ref([]); watch(() =\u0026gt; props.deck, (newVal) =\u0026gt; { deck.value = newVal; }); 添加上方程式碼後，這裡\u0026lt;DealerArea\u0026gt;已可以根據props.deck的變動去做相對應的畫面更新。\n但可以注意到defineProps突然多出moveCard屬性，實際上這是實作元件\u0026lt;DealerArea\u0026gt;忘記考慮被拖曳到其他區塊的行為。\n所以再次調整DealerArea.vue的樣板，將\u0026lt;draggable的屬性:move對應到函數props.moveCard製作額外判斷是否可以被移出的函數，目前預設為回傳false的函數可以阻止元件內部\u0026lt;draggable\u0026gt;內的元素被移入到別的\u0026lt;draggable元件。\n在樣板中使用props中的屬性moveCard為空，則會自動套用props屬性定義的預設值default\n// DealerArea.vue \u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;draggable :list=\u0026#34;canTakeCards\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;list-group\u0026#34; :move=\u0026#34;moveCard\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; 小結 今天將昨天的頁面轉成元件DealerArea並添加一些CSS動畫，也學到子元件需要監聽外部props變動重新渲染的前端做法。 明日將實作讓\u0026lt;DealerArea\u0026gt;內移牌區內的牌有辦法實際拖曳至中間的7個牌堆上並一樣遵守拖曳的遊戲規則。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day15 參考 在 CSS 中模擬 Onclick 事件 CSS左右搖晃 Re-render a component when prop changes ","permalink":"https://zongjia.me/posts/it-day15/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天要來補強昨日缺少的\u003ccode\u003e拖曳功能\u003c/code\u003e和將整個頁面封裝成提供整合至接龍遊戲的元件\u003ccode\u003e發牌區\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"移牌區改為可拖曳\"\u003e移牌區改為可拖曳\u003c/h2\u003e\n\u003cp\u003e首先將\u003ccode\u003e移牌區\u003c/code\u003e的部分調整成從原生HTML元素\u003ccode\u003ediv\u003c/code\u003e替換成這幾天都在使用\u003ccode\u003edraggable\u003c/code\u003e元件，程式碼如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;canTakeCards\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pokers\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;list-group\u0026#34;\u003c/span\u003e \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"發牌區調整動畫\"\u003e發牌區調整動畫\u003c/h2\u003e\n\u003cp\u003e雖然\u003ccode\u003e移牌區\u003c/code\u003e感覺在加牌的時候應該要套用動畫，但無奈\u003ccode\u003evue.draggable.next\u003c/code\u003e的transition-group有Bug存在且已被官方棄養，在issue也有許多類似問題\u003ca href=\"https://github.com/SortableJS/vue.draggable.next/issues/188\"\u003eissue with transition-group in composition API\u003c/a\u003e就不細講。\u003c/p\u003e\n\u003cp\u003e不論是\u003ccode\u003eVue2使用的vue.draggable\u003c/code\u003e或\u003ccode\u003eVue3使用的vue.draggable.next\u003c/code\u003e都是對\u003ca href=\"https://sortablejs.github.io/Sortable/\"\u003eSortableJS\u003c/a\u003e進行包裝的容器，基本上不滿意的話只能自己重封裝實現只是CP值不高，所以我不考慮這麼做。\u003c/p\u003e\n\u003cp\u003e這不代表選擇放棄動畫，打算以\u003cstrong\u003eCSS\u003c/strong\u003e來實現以下\u003cstrong\u003e動畫效果\u003c/strong\u003e。\n\u003cimg alt=\"發牌向左位置\u0026amp;左右搖晃的GIF\" loading=\"lazy\" src=\"/images/%E9%BB%9E%E6%93%8A%E7%99%BC%E7%89%8C%E7%9A%84%E6%B5%AE%E5%8B%95.gif\"\u003e\u003c/p\u003e\n\u003ch3 id=\"實際調整\"\u003e實際調整\u003c/h3\u003e\n\u003cp\u003e首先調整樣板程式碼，主要是針對有牌時添加對應的class\u003ccode\u003e\u0026quot;card-back animtion\u0026quot;\u003c/code\u003e，也順便將點擊事件\u003ccode\u003e@click\u003c/code\u003e移到外層div:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!--\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e發牌堆\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-box\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: hidden;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: visible; width: 100%;height: 100%;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clickCard\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;slide-left\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e無牌可用\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eelse\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e重新循環\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eelse\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-back animation\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e添加對應\u003ccode\u003eCSS\u003c/code\u003e實現點擊後往左快速位移一次的效果\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@\u003cspan style=\"color:#66d9ef\"\u003ekeyframes\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003emove-left\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003etransform\u003c/span\u003e: translateX(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003erem\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eto\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003etransform\u003c/span\u003e: translateX(\u003cspan style=\"color:#ae81ff\"\u003e-100\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003erem\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecard-back\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eanimation\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003eactive\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eanimation\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emove\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.55\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003es\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eease\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eanimation-iteration-count\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e添加對應\u003ccode\u003eCSS\u003c/code\u003e當滑鼠移到\u003ccode\u003e發牌堆\u003c/code\u003e上方使其左右搖晃的效果\u003c/p\u003e","title":"Day15 接龍發牌區功能實作(二)拖曳功能及CSS發牌動畫"},{"content":"為了實現接龍發牌區功能，必須先思考如何讓撲克牌循環利用，這部分程式碼我是先拆一個頁面來練習實作，避免單一頁面的程式碼邏輯太過混亂。\n發牌區的樣板 今日實作的目標會是一個左邊移牌區右邊發牌堆結合在一起的， 點擊發牌堆會將牌發到移牌區顯示，移牌區最多同時顯示三張牌。 實作的樣板程式碼 // DealerAreaView.vue \u0026lt;GameBoard\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1.5fr 1fr; gap:3rem; width: fit-content;\u0026#34;\u0026gt; \u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: repeat(3, 3rem);\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;card in canTakeCards\u0026#34; :key=\u0026#34;card.value\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%; \u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; @click=\u0026#34;clickCard\u0026#34; class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/GameBoard\u0026gt; 可以注意到發牌堆使用\u0026lt;Transition\u0026gt;包裹，裡面的元件使用v-if和v-else-if去判斷三種情況顯示元件， 這邊使用到的deckState是一個計算結果。\n在說明deckState之前，先講一下此範例使用到的變數index、deck。\nconst index = ref(0); const deck = ref(geneateDeck(14, true)); deck就是包含著發牌堆+移牌區的卡牌陣列，日後會改用屬性props傳進元件， 但因為今天在練習實作就先自己產生。\nindex則是對應發到第幾張牌的指標(Pointer)，採用指標的原因是可以不用將把發牌堆、移牌區分成兩個陣列儲存，當指標index為0時代表移牌區沒有牌，index為1時則代表已發到第1張牌，以此類推。\n回到變數deckState就是用指標位置和牌堆數量計算出來發牌堆會有3種顯示狀態:\n發牌堆和移牌區都沒牌時，顯示無牌可用 (empty) 發牌堆已發完牌但移牌區仍有牌，則顯示重新循環 (full) 發牌堆還有牌可以發，顯示撲克卡背 (normal) const deckState = computed(() =\u0026gt; { if (index.value === 0 \u0026amp;\u0026amp; deck.value.length == 0) return \u0026#39;empty\u0026#39;; if (index.value === deck.value.length) return \u0026#39;full\u0026#39;; return \u0026#39;normal\u0026#39;; }); 移牌區顯示的撲克陣列canTakeCards也是用index和deck計算出來的最多回傳3個元素的陣列， 因為Array.slice只會回傳複製陣列，所以不會影響deck陣列本身。\n/** 玩家可拿取的牌 */ const canTakeCards = computed(() =\u0026gt; { let startIndex = index.value \u0026lt; 3 ? 0 : index.value - 3; return deck.value.slice(startIndex, index.value); }); 點擊發牌堆觸發的函數也只是改變指標index往前移動，間接影響上面使用computed計算出來的結果。\nfunction clickCard() { index.value++; if (index.value \u0026gt; deck.value.length) { index.value = 0; } } 小結 發牌區內部的部分使用陣列指標的方式去判斷，可以減少對陣列本身的push和pop等異動原堆疊資料的行為。\n目前移牌區沒有使用到\u0026lt;draggable\u0026gt;包裹，實際上移牌區的牌應該要可被拖曳至中心的集牌區進行移動，但中心的集牌區的牌不能被拖回發牌區的移牌區，這部分明天才會做但還是先提一下。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day14 ","permalink":"https://zongjia.me/posts/it-day14/","summary":"\u003cp\u003e為了實現接龍發牌區功能，必須先思考如何讓撲克牌循環利用，這部分程式碼我是先拆一個頁面來練習實作，避免單一頁面的程式碼邏輯太過混亂。\u003c/p\u003e\n\u003ch2 id=\"發牌區的樣板\"\u003e發牌區的樣板\u003c/h2\u003e\n\u003cp\u003e今日實作的目標會是一個左邊\u003ccode\u003e移牌區\u003c/code\u003e右邊\u003ccode\u003e發牌堆\u003c/code\u003e結合在一起的，\n點擊\u003ccode\u003e發牌堆\u003c/code\u003e會將牌發到\u003ccode\u003e移牌區\u003c/code\u003e顯示，\u003ccode\u003e移牌區\u003c/code\u003e最多同時顯示三張牌。\n\u003cimg alt=\"發牌區樣板圖-實作的方向\" loading=\"lazy\" src=\"/images/day14-template.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"實作的樣板程式碼\"\u003e實作的樣板程式碼\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// DealerAreaView.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eGameBoard\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u0026gt;發牌區\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: 1.5fr 1fr; gap:3rem; width: fit-content;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: repeat(3, 3rem);\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-for\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card in canTakeCards\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:key\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e\u0026lt;!-- 發牌堆 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-box\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: hidden;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: visible; width: 100%;height: 100%; \u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;slide-left\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u003c/span\u003e\u0026gt;無牌可用\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-else-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clickCard\u0026#34;\u003c/span\u003e\u0026gt;重新循環\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-else-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clickCard\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-back\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eGameBoard\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以注意到\u003ccode\u003e發牌堆\u003c/code\u003e使用\u003ccode\u003e\u0026lt;Transition\u0026gt;\u003c/code\u003e包裹，裡面的元件使用\u003ccode\u003ev-if\u003c/code\u003e和\u003ccode\u003ev-else-if\u003c/code\u003e去判斷三種情況顯示元件，\n這邊使用到的\u003ccode\u003edeckState\u003c/code\u003e是一個計算結果。\u003c/p\u003e","title":"Day14 接龍發牌區功能實作(一)發牌循環"},{"content":"今日預計實作項目:\n☑️ 只能對牌尾進行翻牌 ☑️ 牌尾自動翻牌 ☑️ 限制疊牌順序 只能對牌尾進行翻牌 新增函數openCard(cards, element)因為需要確認點擊卡牌確實是在牌尾， 所以需要參數cards對應原本的卡牌陣列、參數element對應點擊的卡牌元素。\n檢查牌尾就單純檢查element的數字(value)是否跟陣列cards的最後一筆數字相同， 在這邊的情況不用擔心cards的長度為0，因為所在牌堆沒有卡牌自然就不會渲染使用openCard函數的\u0026lt;Card\u0026gt;元件。\n/** 開牌函數 * @param {Card[]} cards * @param {Card} element */ function openCard(cards, element) { let same = cards[cards.length - 1].value == element.value; if (same) { element.isOpen = true; } } 調整每一個\u0026lt;Card\u0026gt;元件的@click監聽，以下以第1牌堆的樣板舉例:\n\u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; @click=\u0026#34;openCard(cardStacks.first, element)\u0026#34; /\u0026gt; 第2、3牌堆只需將cardStacks.first中的first替換成對應陣列second和third， 雖然下一步牌尾會自動翻牌不需要人去手動翻開、但還是要避免有人去對非牌尾的開牌。\n牌尾自動翻牌 這部分我是依賴Vue本身的watch去監聽牌堆的變化， 跟上一個步驟很像的取得最後一張牌lastCard並打開isOpen = true，不一樣的是需要真的檢查牌堆是否為空的情況，避免出現undefined的Error\nwatch(cardStacks, (stacks) =\u0026gt; { // 檢查每組牌堆最後一張 [\u0026#39;first\u0026#39;, \u0026#39;second\u0026#39;, \u0026#39;third\u0026#39;].forEach(cardName =\u0026gt; { if (stacks[cardName].length \u0026gt; 0) { const lastCard = stacks[cardName][stacks[cardName].length - 1]; lastCard.isOpen = true; } }); }); 限制疊牌順序 這邊先解釋以下在紙牌接龍的中心會有七個疊牌區， 疊牌的規局會是不同花色以黑紅交錯，黑牌後面只能接紅牌，紅牌後面只能接黑牌， 且數字必須是前面的減一，不能多也不能少，例如梅花K後面只能接方塊Q或紅心Q\n例外: 疊牌區若為空則可以放任意花色的K\n為了開發方便測試，我決定直接把畫面改成有七個牌堆並且改回垂直疊牌，且牌堆的牌數數量依序為1、2、\u0026hellip;7張， 這部分程式就略過。\n主要是做了一個檢查這一張牌是否能放上去的函數，以刪去法的邏輯實現檢查:\n卡堆為空，擺放數字不為K則失敗 卡牌顏色相同則失敗 原卡堆最後一張的數字減1等於擺放數字則成功，否則失敗 以下是實現的程式碼:\n程式碼中以回傳布林值true、false表達成功、失敗\n/** 檢查下一張牌是否可以放上去 * @param {Card[]} targetDeck * @param {Card} card * * @returns {Boolean} 是否可以放上去 */ function checkNextOk(targetDeck, card) { // 如果目標為空牌堆，則只有K可以放上去 if (targetDeck.length === 0) { return (card.value % 13) === 12; } // 如果目標非空牌堆，則檢查最後一張 const lastCard = targetDeck[targetDeck.length - 1]; // 取得兩張牌花色必須一紅一黑 const lastCardSymbol = Math.floor(lastCard.value / 13); const cardSymbol = Math.floor(card.value / 13); // 兩張牌顏色相同則移動無效 if (lastCardSymbol == cardSymbol || (lastCardSymbol + cardSymbol) == 3) { return false; } // 檢查數字是否連續 return (lastCard.value % 13 - 1) == (card.value % 13) } 小結 今天主要是撰寫邏輯去限制撲克牌的移動，過程中推導公式也蠻開心的， 甚至還為專案補上@types強化VSCode的開發體驗，同時也將畫面調整接近紙牌接龍的狀態。\n目前持續快兩週的一邊開發一邊寫稿，文章變得更像Side Project的錨點讓我隨時找回開發的方向，而程式碼也在約束文章不能太空泛，這種彼此牽制的開發模式目前感受良好也從中學習許多。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day13 參考\nWiki 紙牌接龍 虛擬加載-typescript-jsdoc-定義檔 ","permalink":"https://zongjia.me/posts/it-day13/","summary":"\u003cp\u003e今日預計實作項目:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑️ 只能對牌尾進行翻牌\u003c/li\u003e\n\u003cli\u003e☑️ 牌尾自動翻牌\u003c/li\u003e\n\u003cli\u003e☑️ 限制疊牌順序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"只能對牌尾進行翻牌\"\u003e只能對牌尾進行翻牌\u003c/h2\u003e\n\u003cp\u003e新增函數\u003ccode\u003eopenCard(cards, element)\u003c/code\u003e因為需要確認點擊卡牌確實是在牌尾，\n所以需要參數\u003ccode\u003ecards\u003c/code\u003e對應原本的卡牌陣列、參數\u003ccode\u003eelement\u003c/code\u003e對應點擊的卡牌元素。\u003c/p\u003e\n\u003cp\u003e檢查牌尾就單純檢查\u003ccode\u003eelement\u003c/code\u003e的數字(value)是否跟陣列\u003ccode\u003ecards\u003c/code\u003e的最後一筆數字相同，\n在這邊的情況不用擔心\u003ccode\u003ecards\u003c/code\u003e的長度為\u003ccode\u003e0\u003c/code\u003e，因為所在牌堆沒有卡牌自然就不會渲染使用\u003ccode\u003eopenCard\u003c/code\u003e函數的\u003ccode\u003e\u0026lt;Card\u0026gt;\u003c/code\u003e元件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** 開牌函數 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {Card[]} cards \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * @param {Card} element \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopenCard\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esame\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003esame\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eelement\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e調整每一個\u003ccode\u003e\u0026lt;Card\u0026gt;\u003c/code\u003e元件的\u003ccode\u003e@click\u003c/code\u003e監聽，以下以第1牌堆的樣板舉例:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;openCard(cardStacks.first, element)\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e第2、3牌堆只需將\u003ccode\u003ecardStacks.first\u003c/code\u003e中的\u003cstrong\u003efirst\u003c/strong\u003e替換成對應陣列\u003cstrong\u003esecond\u003c/strong\u003e和\u003cstrong\u003ethird\u003c/strong\u003e，\n雖然下一步牌尾會自動翻牌不需要人去手動翻開、但還是要避免有人去對非牌尾的開牌。\u003c/p\u003e\n\u003ch2 id=\"牌尾自動翻牌\"\u003e牌尾自動翻牌\u003c/h2\u003e\n\u003cp\u003e這部分我是依賴Vue本身的\u003ccode\u003ewatch\u003c/code\u003e去監聽牌堆的變化，\n跟上一個步驟很像的取得最後一張牌\u003ccode\u003elastCard\u003c/code\u003e並打開\u003ccode\u003eisOpen = true\u003c/code\u003e，不一樣的是需要真的檢查牌堆是否為空的情況，避免出現\u003ccode\u003eundefined\u003c/code\u003e的Error\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewatch\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查每組牌堆最後一張\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;first\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;second\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;third\u0026#39;\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e][\u003cspan style=\"color:#a6e22e\"\u003estacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ecardName\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003elastCard\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"限制疊牌順序\"\u003e限制疊牌順序\u003c/h2\u003e\n\u003cp\u003e這邊先解釋以下在紙牌接龍的中心會有七個\u003ccode\u003e疊牌區\u003c/code\u003e，\n疊牌的規局會是不同花色以黑紅交錯，黑牌後面只能接紅牌，紅牌後面只能接黑牌，\n且數字必須是前面的減一，不能多也不能少，例如\u003ccode\u003e梅花K\u003c/code\u003e後面只能接\u003ccode\u003e方塊Q\u003c/code\u003e或\u003ccode\u003e紅心Q\u003c/code\u003e\u003c/p\u003e","title":"Day13 牌尾自動翻牌、限制疊牌順序"},{"content":"今天預計實作接龍紙牌的拖曳規則\n☑️ 拖曳卡牌只能置放到目標牌堆的牌尾 -\u0026gt; 只能置放至目標最後 ☑️ 牌堆只有打開的牌才能進行拖曳 -\u0026gt; 蓋牌無法拖曳 拖曳卡牌只能置放到目標牌堆的牌尾 檢查方式很簡單，首先將昨日的:move函數內的變數result判斷先改成用let宣告， 因為不能任意插入前面的順序，所以增加判斷只有新目標位置futureIndex等於目標牌堆陣列的長度cardStacks[to].length時才可以進行移動。\n如果要移動到的目標牌堆沒有牌，futureIndex就需要等於0 如果要移動到目標牌堆有1張牌，futureIndex就需要等於1 總之目標牌堆有N張牌，futureIndex就要為N，以此類推\u0026hellip; 實際程式碼 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 let result = evt.from !== evt.to; // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const { index, futureIndex } = evt.draggedContext; // 只能移動目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; if (result) { // 中間略 } return result; } 牌堆只有打開的牌才能進行拖曳 先初始化改為39張牌均分給3個牌堆且將所有牌都闔上， 這樣接下來才能測試闔牌狀態不能拖曳。\nconst cardStacks = reactive({ first: [], second: [], third: [] }); onMounted(() =\u0026gt; { const data = geneateDeck(39, false); cardStacks.first = data.slice(0, 13);// 梅花A~梅花K cardStacks.second = data.slice(13, 26);// 方塊A~~方塊K cardStacks.third = data.slice(26); // 紅心A~~紅心K }); 因為多一個牌堆除了調整樣板，但同樣也在新牌堆樣板添加ref=\u0026quot;third\u0026quot;，方便接下來在:move中判斷拖曳來源的DOM是對應cardStacks內的哪個陣列。\n看到這邊聰明的讀者大概想到又要調整:move函數內的變數result，Bingo!\n只需要在函數內if (result) {的上方添加底下程式碼:\n// 移動的牌必須是開著的 result = result \u0026amp;\u0026amp; cardStacks[from][index].isOpen; 到此闔牌無法移動已經完成，但今天的工作還沒結束。\n因為目前全部的牌都處於蓋牌狀態，為了開發測試需要所以決定簡單調整樣板補上@click的事件，讓所有的牌只要點了就會開牌。\n\u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; @click=\u0026#34;() =\u0026gt; element.isOpen = true\u0026#34; /\u0026gt; 小結 今天雖然實作拖曳至牌尾、預防隨意拖曳牌堆的限制，但在紙牌接龍的情況其實還有:\n只能對牌尾進行開牌 牌的數字有順序接號且非同色系的情況才能移動至牌尾 這部分就留待明日繼續煩惱囉😁\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day12 ","permalink":"https://zongjia.me/posts/it-day12/","summary":"\u003cp\u003e今天預計實作接龍紙牌的拖曳規則\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑️ 拖曳卡牌只能置放到目標牌堆的牌尾 -\u0026gt; 只能置放至目標最後\u003c/li\u003e\n\u003cli\u003e☑️ 牌堆只有打開的牌才能進行拖曳 -\u0026gt; 蓋牌無法拖曳\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"拖曳卡牌只能置放到目標牌堆的牌尾\"\u003e拖曳卡牌只能置放到目標牌堆的牌尾\u003c/h2\u003e\n\u003cp\u003e檢查方式很簡單，首先將昨日的\u003ccode\u003e:move\u003c/code\u003e函數內的變數\u003ccode\u003eresult\u003c/code\u003e判斷先改成用\u003ccode\u003elet\u003c/code\u003e宣告，\n因為不能任意插入前面的順序，所以增加判斷只有\u003cstrong\u003e新目標位置\u003c/strong\u003e\u003ccode\u003efutureIndex\u003c/code\u003e等於\u003cstrong\u003e目標牌堆陣列的長度\u003c/strong\u003e\u003ccode\u003ecardStacks[to].length\u003c/code\u003e時才可以進行移動。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果要移動到的目標牌堆沒有牌，\u003ccode\u003efutureIndex\u003c/code\u003e就需要等於0\u003c/li\u003e\n\u003cli\u003e如果要移動到目標牌堆有1張牌，\u003ccode\u003efutureIndex\u003c/code\u003e就需要等於1\u003c/li\u003e\n\u003cli\u003e總之目標牌堆有\u003cstrong\u003eN\u003c/strong\u003e張牌，\u003ccode\u003efutureIndex\u003c/code\u003e就要為\u003cstrong\u003eN\u003c/strong\u003e，以此類推\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"實際程式碼\"\u003e實際程式碼\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elimitLocalMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 限制同個牌堆無法拖曳\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 只能移動目標牌堆的最後一張牌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 中間略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"牌堆只有打開的牌才能進行拖曳\"\u003e牌堆只有打開的牌才能進行拖曳\u003c/h2\u003e\n\u003cp\u003e先初始化改為39張牌均分給3個牌堆且將所有牌都闔上，\n這樣接下來才能測試闔牌狀態不能拖曳。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereactive\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esecond\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethird\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eonMounted\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egeneateDeck\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e39\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efirst\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e// 梅花A~梅花K\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esecond\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e// 方塊A~~方塊K\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ethird\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// 紅心A~~紅心K\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因為多一個牌堆除了調整樣板，但同樣也在新牌堆樣板添加\u003ccode\u003eref=\u0026quot;third\u0026quot;\u003c/code\u003e，方便接下來在\u003ccode\u003e:move\u003c/code\u003e中判斷拖曳來源的\u003ccode\u003eDOM\u003c/code\u003e是對應\u003ccode\u003ecardStacks\u003c/code\u003e內的哪個陣列。\u003c/p\u003e\n\u003cp\u003e看到這邊聰明的讀者大概想到又要調整\u003ccode\u003e:move\u003c/code\u003e函數內的變數\u003ccode\u003eresult\u003c/code\u003e，Bingo!\u003cbr\u003e\n只需要在函數內\u003ccode\u003eif (result) {\u003c/code\u003e的上方添加底下程式碼:\u003c/p\u003e","title":"Day 12 實作拖曳卡牌只能置放到目標牌堆的牌尾、蓋牌無法拖曳"},{"content":"今日預計只實作如何一次拖曳 多張卡牌\n多張卡牌拖曳的考察研究 這部分可能會讓很多人(我)失望，因為vue.draggable.next最近一次的合併更新在2021年8月， 所以目前Vue3無法像原本Vue2能使用vue.draggable的Multi-drag的擴充功能，所以我捨棄使用套件原生多筆拖曳的想法和 拖曳多張牌完美的畫面效果。\n如果願意改變資料結構為巢狀Vue3版本還是有辦法對巢狀物件進行一次性的拖曳，但對我來說在未來資料處理的靈活性降低又提高判斷卡牌順序的複雜度因此不考慮。\n想法邏輯 從來源牌堆先拖曳一張牌A移動到目標牌堆的指定位置 將來源牌堆中A牌後的剩餘卡片複製到目標牌堆的指定位置後方 刪除來源牌堆原A位置後的剩餘元素 實作後發現其實可以先複製一份來源牌堆、目標牌堆移動後的結果，後續處理會更為靈活。\n實作邏輯 在:move對應的函數中判斷可拖曳時，產生『若拖曳成功後，來源/目標陣列的新狀態』並封裝成一個箭頭函數儲存至ref變數changeOption。 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 const result = evt.from !== evt.to; if (result) { // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const draggedContext = evt.draggedContext const { index, futureIndex } = draggedContext; // 產生多筆拖曳後，來源牌堆、目的牌堆的陣列變動後的結果 const newFromCards = cardStacks[from].slice(0, index); const newToCards = [ ...cardStacks[to].slice(0, futureIndex), ...cardStacks[from].slice(index), ...cardStacks[to].slice(futureIndex) ]; // 將變動牌堆的函數暫存，預計等到拖曳完成後執行 changeOption.value = () =\u0026gt; { cardStacks[from] = newFromCards; cardStacks[to] = newToCards; changeOption.value = null; }; } // 仍使用原生的拖曳效果 return result; } 當@change事件發生時，若定義ref變數changeOption有值則執行第1點暫存的函數，將最終結果更新對應的牌堆陣列之中。 @change只有在卡牌拖曳完成對陣列產生異動時才會自動被執行，此為draggable原始機制\nfunction cardChange(event) { if (changeOption.value) { changeOption.value(); changeOption.value = null; } else { console.log(`no trigger changeOption`); }; } 樣板調整除了\u0026lt;draggable\u0026gt;的屬性:move、@change之外，眼尖的朋友可以注意到兩個\u0026lt;draggable\u0026gt;分別添加了ref=\u0026quot;first\u0026quot; 和ref=\u0026quot;second\u0026quot;對應到第一/第二牌堆的元素，主要是為了第1點在:move函數執行中可以判斷來源和目標陣列對應到cardStacks內的哪一個陣列。 \u0026lt;GameBoard\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h4 class=\u0026#34;title\u0026#34;\u0026gt;牌堆1\u0026lt;/h4\u0026gt; \u0026lt;draggable :list=\u0026#34;cardStacks.first\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;\u0026#34; :move=\u0026#34;limitLocalMove\u0026#34; @change=\u0026#34;cardChange\u0026#34; ref=\u0026#34;first\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h4 class=\u0026#34;title\u0026#34;\u0026gt;牌堆2\u0026lt;/h4\u0026gt; \u0026lt;draggable :list=\u0026#34;cardStacks.second\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;padding: 1px;\u0026#34; :move=\u0026#34;limitLocalMove\u0026#34; @change=\u0026#34;cardChange\u0026#34; ref=\u0026#34;second\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/GameBoard\u0026gt; 因為:move本身攜帶的資訊無法得到拖曳來源、目標的:list，但卻有紀錄拖曳列表來源、目標的DOM(from,to)，所以撰寫一個函數可取得DOM所對應的牌組名稱。\nfunction getDomName(dom) { if (dom == first.value.targetDomElement) { return \u0026#39;first\u0026#39;; } else if (dom == second.value.targetDomElement) { return \u0026#39;second\u0026#39;; } else { return \u0026#39;none\u0026#39;; } } 上方的first/second都有先定義成ref(null)否則執行可是會失敗的喔!\n如下所示:\n\u0026lt;script setup\u0026gt; const first = ref(null); const second = ref(null); // ... \u0026lt;/script\u0026gt; 小結 雖然原本除了多筆拖曳還想要額外判斷特定順序，但花了蠻多時間在vue.draggable.next要如何正常實現畫面，最終還是只撰寫/實作多筆拖曳的功能。\n實作前思考最理想的狀態，實作中則逐步去做取捨，若一昧追求完美便無法完成作品/寫稿，但身為軟體工程師同時需要考慮到作品的未來運行和功能上的調整，實作後仍需思考是否有改善的空間。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day11 參考\nSortableJS/Sortable SortableJS/vue.draggable.next ","permalink":"https://zongjia.me/posts/it-day11/","summary":"\u003cp\u003e今日預計只實作如何\u003ccode\u003e一次拖曳\u003c/code\u003e \u003ccode\u003e多張卡牌\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"多張卡牌拖曳的考察研究\"\u003e多張卡牌拖曳的考察研究\u003c/h2\u003e\n\u003cp\u003e這部分可能會讓很多人(我)失望，因為\u003ccode\u003evue.draggable.next\u003c/code\u003e最近一次的合併更新在2021年8月，\n所以目前\u003ccode\u003eVue3\u003c/code\u003e無法像原本\u003ccode\u003eVue2\u003c/code\u003e能使用\u003ccode\u003evue.draggable\u003c/code\u003e的\u003ccode\u003eMulti-drag\u003c/code\u003e的擴充功能，所以我捨棄使用\u003ccode\u003e套件原生多筆拖曳\u003c/code\u003e的想法和 拖曳多張牌\u003ccode\u003e完美的畫面效果\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果願意改變資料結構為巢狀\u003ccode\u003eVue3\u003c/code\u003e版本還是有辦法對\u003ca href=\"https://sortablejs.github.io/vue.draggable.next/#/nested-example\"\u003e巢狀物件進行一次性的拖曳\u003c/a\u003e，但對我來說在未來資料處理的靈活性降低又提高判斷卡牌順序的複雜度因此不考慮。\u003c/p\u003e\n\u003ch3 id=\"想法邏輯\"\u003e想法邏輯\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e從\u003ccode\u003e來源牌堆\u003c/code\u003e先拖曳一張牌\u003ccode\u003eA\u003c/code\u003e移動到\u003ccode\u003e目標牌堆\u003c/code\u003e的指定位置\u003c/li\u003e\n\u003cli\u003e將\u003ccode\u003e來源牌堆\u003c/code\u003e中\u003ccode\u003eA牌\u003c/code\u003e後的剩餘卡片複製到\u003ccode\u003e目標牌堆\u003c/code\u003e的指定位置後方\u003c/li\u003e\n\u003cli\u003e刪除\u003ccode\u003e來源牌堆\u003c/code\u003e原\u003ccode\u003eA\u003c/code\u003e位置後的剩餘元素\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e實作後發現其實可以先複製一份\u003ccode\u003e來源牌堆\u003c/code\u003e、\u003ccode\u003e目標牌堆\u003c/code\u003e移動後的結果，後續處理會更為靈活。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"實作邏輯\"\u003e實作邏輯\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e在\u003ccode\u003e:move\u003c/code\u003e對應的函數中判斷可拖曳時，產生『若拖曳成功後，來源/目標陣列的新狀態』並封裝成一個箭頭函數儲存至ref變數\u003ccode\u003echangeOption\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elimitLocalMove\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 限制同個牌堆無法拖曳\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDomName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edraggedContext\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 產生多筆拖曳後，來源牌堆、目的牌堆的陣列變動後的結果\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ...\u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eslice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efutureIndex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 將變動牌堆的函數暫存，預計等到拖曳完成後執行\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewFromCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ecardStacks\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enewToCards\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 仍使用原生的拖曳效果\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e當\u003ccode\u003e@change\u003c/code\u003e事件發生時，若定義ref變數\u003ccode\u003echangeOption\u003c/code\u003e有值則執行第1點暫存的函數，將最終結果更新對應的牌堆陣列之中。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e@change\u003c/code\u003e只有在卡牌拖曳完成對陣列產生異動時才會自動被執行，此為\u003ccode\u003edraggable\u003c/code\u003e原始機制\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardChange\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevent\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003echangeOption\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`no trigger changeOption`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e樣板調整除了\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e的屬性\u003ccode\u003e:move\u003c/code\u003e、\u003ccode\u003e@change\u003c/code\u003e之外，眼尖的朋友可以注意到兩個\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e分別添加了\u003ccode\u003eref=\u0026quot;first\u0026quot;\u003c/code\u003e 和\u003ccode\u003eref=\u0026quot;second\u0026quot;\u003c/code\u003e對應到第一/第二牌堆的元素，主要是為了第1點在\u003ccode\u003e:move\u003c/code\u003e函數執行中可以判斷來源和目標陣列對應到\u003ccode\u003ecardStacks\u003c/code\u003e內的哪一個陣列。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eGameBoard\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eh4\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e牌堆1\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eh4\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks.first\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pokers\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:move\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;limitLocalMove\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e@change\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e=\u0026#34;cardChange\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;first\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eh4\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e牌堆2\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eh4\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardStacks.second\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pokers\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;padding: 1px;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:move\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;limitLocalMove\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e@change\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e=\u0026#34;cardChange\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;second\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eGameBoard\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因為\u003ccode\u003e:move\u003c/code\u003e本身攜帶的資訊無法得到拖曳來源、目標的\u003ccode\u003e:list\u003c/code\u003e，但卻有紀錄拖曳列表來源、目標的DOM(\u003ccode\u003efrom\u003c/code\u003e,\u003ccode\u003eto\u003c/code\u003e)，所以撰寫一個函數可取得DOM所對應的牌組名稱。\u003c/p\u003e","title":"Day 11 拖曳紙牌的效果(三)如何一次拖曳多張卡牌"},{"content":"今天來研究兩個列表的拖曳和如何限制列表的拖曳，學習內容主要來自vue.draggable文件的內容和親身實作進行分析。\n先實現兩個列表的拖曳 昨天已學過如何製作單一列表的拖曳，先將相同的\u0026lt;draggable\u0026gt;內容複製往下貼， 複製的另一個\u0026lt;draggable\u0026gt;只需要調整屬性:list成想要對應的另一個陣列，並且兩個\u0026lt;draggable\u0026gt;添加相同的屬性group則自動實現兩個列表拖曳的關聯。\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;secondCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 如何限制列表的拖曳 前面已先實現了兩列表的拖曳，但為求理解仍保留著@change=\u0026quot;console.log\u0026quot;，在限制拖曳之前，我必須先觀察拖曳完成前能得到的資訊，所以我必須先觀察變動後@change實際印了什麼有用的資訊。\n因為如果只是要單純限制一個\u0026lt;draggable\u0026gt;不能拖曳移入移出，只需要設定屬性:move=\u0026quot;() =\u0026gt; false\u0026quot;，但我想做的不僅僅如此。\n不同牌堆的移動 將牌堆1的梅花A移動到牌堆2後，可觀察到開發人員工具的Console依序印出兩個物件:\n內含added屬性，且added物件本身包含陣列移動的元素element和目標陣列內的新位置newIndex 內含removed屬性，且removed物件本身包含陣列移動的元素element和原陣列內的舊位置oldIndex 這兩個@change是由各自受影響的Draggable所觸發，但內含的元素是相同的\n同牌堆的移動 將同牌堆的第三張牌(梅花3)移動到第六張牌(梅花6)的位置，則只印出一個包含屬性moved的物件， 且moved物件本身包含陣列移動的元素本身element和新位置newIndex和舊位置oldIndex的資訊。 從此可推測，如果要禁止同牌堆內的移動，只需要禁止moved的行為。\n禁止同牌堆的內部拖曳 從官方文件中可查到屬性:move對應的函數只要回傳false即可取消此次的拖曳。\nfunction onMoveCallback(evt, originalEvent){ ... // return false; — for cancel } 這邊我只印出參數evt得到的資料，內容跟@change不一樣的超乎想像多資訊😫，而且跟@change不同的是，這個:move對應函數只要拖曳卡牌到某一張卡的上面就會觸發一次 但好險\u0026hellip;如果只需要判斷是否在同個牌堆只需要看evt內的屬性from, to是否為相同DOM元素即可， 因為from、to分別代表拖曳的元素是 來自哪一個draggable元件 和 即將放置在哪一個draggable元件。\nfunction limitLocalMove(evt, originalEvent) { // 限制同個牌堆無法拖曳 return evt.from !== evt.to; } 小結 今天慢慢花時間理解也希望能幫助打算使用vue.draggable，也理解如何限制拖曳發生。\n明天預計實作牌堆需要在特定順序才能進行拖曳、如何一次拖曳多筆元素。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day10 參考\nvue.draggable.next#move ","permalink":"https://zongjia.me/posts/it-day10/","summary":"\u003cp\u003e今天來研究\u003ccode\u003e兩個列表的拖曳\u003c/code\u003e和\u003ccode\u003e如何限制列表的拖曳\u003c/code\u003e，學習內容主要來自\u003ccode\u003evue.draggable\u003c/code\u003e文件的內容和親身實作進行分析。\u003c/p\u003e\n\u003ch2 id=\"先實現兩個列表的拖曳\"\u003e先實現兩個列表的拖曳\u003c/h2\u003e\n\u003cp\u003e昨天已學過如何製作單一列表的拖曳，先將相同的\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e內容複製往下貼，\n複製的另一個\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e只需要調整屬性\u003ccode\u003e:list\u003c/code\u003e成想要對應的另一個陣列，並且兩個\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e添加相同的屬性\u003ccode\u003egroup\u003c/code\u003e則自動實現兩個列表拖曳的關聯。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;firstCardStack\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pokers\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;secondCardStack\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroup\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pokers\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"如何限制列表的拖曳\"\u003e如何限制列表的拖曳\u003c/h2\u003e\n\u003cp\u003e前面已先實現了兩列表的拖曳，但為求理解仍保留著\u003ccode\u003e@change=\u0026quot;console.log\u0026quot;\u003c/code\u003e，在限制拖曳之前，我必須先觀察拖曳完成前能得到的資訊，所以我必須先觀察變動後\u003ccode\u003e@change\u003c/code\u003e實際印了什麼有用的資訊。\u003c/p\u003e\n\u003cp\u003e因為如果只是要單純限制一個\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e不能拖曳移入移出，只需要設定屬性\u003ccode\u003e:move=\u0026quot;() =\u0026gt; false\u0026quot;\u003c/code\u003e，但我想做的不僅僅如此。\u003c/p\u003e\n\u003ch3 id=\"不同牌堆的移動\"\u003e不同牌堆的移動\u003c/h3\u003e\n\u003cp\u003e將牌堆1的梅花A移動到牌堆2後，可觀察到開發人員工具的Console依序印出兩個物件:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e內含\u003ccode\u003eadded\u003c/code\u003e屬性，且added物件本身包含陣列移動的元素\u003ccode\u003eelement\u003c/code\u003e和目標陣列內的新位置\u003ccode\u003enewIndex\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e內含\u003ccode\u003eremoved\u003c/code\u003e屬性，且removed物件本身包含陣列移動的元素\u003ccode\u003eelement\u003c/code\u003e和原陣列內的舊位置\u003ccode\u003eoldIndex\u003c/code\u003e\n\u003cimg alt=\"從牌堆1移動到牌堆2則會觸發change的added和remove事件\" loading=\"lazy\" src=\"/images/20230919%E5%AF%A6%E9%A9%97%E4%B8%80.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e這兩個@change是由各自受影響的Draggable所觸發，但內含的元素是相同的\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"同牌堆的移動\"\u003e同牌堆的移動\u003c/h3\u003e\n\u003cp\u003e將同牌堆的第三張牌(梅花3)移動到第六張牌(梅花6)的位置，則只印出一個包含屬性\u003ccode\u003emoved\u003c/code\u003e的物件，\n且moved物件本身包含陣列移動的元素本身\u003ccode\u003eelement\u003c/code\u003e和新位置\u003ccode\u003enewIndex\u003c/code\u003e和舊位置\u003ccode\u003eoldIndex\u003c/code\u003e的資訊。\n\u003cimg alt=\"同一個牌堆內部移動只會觸發change的moved事件\" loading=\"lazy\" src=\"/images/20230919%E5%AF%A6%E9%A9%97%E4%BA%8C.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e從此可推測，如果要禁止同牌堆內的移動，只需要禁止\u003ccode\u003emoved\u003c/code\u003e的行為。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"禁止同牌堆的內部拖曳\"\u003e禁止同牌堆的內部拖曳\u003c/h3\u003e\n\u003cp\u003e從官方文件中可查到屬性\u003ccode\u003e:move\u003c/code\u003e對應的函數只要回傳\u003ccode\u003efalse\u003c/code\u003e即可取消此次的拖曳。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonMoveCallback\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eevt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eoriginalEvent\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// return false; — for cancel\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這邊我只印出參數\u003ccode\u003eevt\u003c/code\u003e得到的資料，內容跟\u003ccode\u003e@change\u003c/code\u003e不一樣的超乎想像多資訊😫，而且跟\u003ccode\u003e@change\u003c/code\u003e不同的是，這個\u003ccode\u003e:move\u003c/code\u003e對應函數只要拖曳卡牌到某一張卡的上面就會觸發一次\n\u003cimg alt=\":move內參數evt印出的資訊超多\" loading=\"lazy\" src=\"/images/20230919move%E5%85%A7%E5%8F%83%E6%95%B8evt.png\"\u003e\u003c/p\u003e","title":"Day 10 拖曳紙牌的效果(二)限制內部拖曳"},{"content":"玩紙牌接龍最重要的就是卡牌會移來移去，之前都是用點的移動定點， 今天來試試看如何撰寫拖曳紙牌的功能。\n安裝依賴 因為重頭學習理解拖曳，對我來說太麻煩也太無聊， 乾脆就使用現成的套件Vue.Draggable吧!\n因為使用的是Vue3專案，所以必須安裝有標註next的版本。\nnpm i -S vuedraggable@next 單一列表的拖曳使用 我也還在理解該套件中，接下來的過程會盡可能去蕪存菁，但不失細節。\n首先一定要先引入vuedraggable，如下所示:\n\u0026lt;script setup\u0026gt; import draggable from \u0026#39;vuedraggable\u0026#39; // ...other template \u0026lt;/script\u0026gt; 樣板的部分則如下:\n\u0026lt;template\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; itemKey=\u0026#34;value\u0026#34; @change=\u0026#34;console.log\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/template\u0026gt; 這樣的寫法在通常就已可運用，接下來讓我們來逐一理解\u0026lt;draggable\u0026gt;每個欄位的意義和預設行為\u0026hellip;\n:list 首先:list內設定的是一個參考到陣列的ref或reactive變數，只要裡面參考到的是Array即可， 這可以讓\u0026lt;draggable\u0026gt;明白當列表項目被拖曳移動時自動修改的對象。\n// 此處genearateDeck(20, true)會回傳20個物件的Array物件 const firstCardStack = ref(geneateDeck(20, true)); // 為求簡單也能寫成底下這樣 // const firstCardStack = ref([]); itemKey屬性 第二個重要的屬性是itemKey，代表前面陣列中每一個元素的唯一值，基本上就跟v-for內用到的:key有相同作用，可讓元件從itemKey明白內部元素的差異進而去做列表更新。\n此處會設定itemKey=\u0026quot;value\u0026quot;，是因為參考的陣列firstCardStack每一個元素的構造如下:\n{ value: number, // 撲克牌值，Ex: 0 對應 ♣A isOpen: boolean // 開牌狀態，Ex: false 對應 蓋牌樣式 } 嘗試過不添加itemKey仍可拖曳且參考的陣列有更新，但會發生UI不會刷新的窘境🤣\n@change屬性 目前先使用console.log，可印出包含欄位moved的物件，moved內的構造如下:\n{ newIndex: 13 // 拖曳後項目的新索引 oldIndex: 0 // 拖曳項目的原索引 } \u0026lt;draggable\u0026gt;內部 傳進draggable內部的slot區塊，這部分我在重寫一次如下:\n\u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; 可以方便理解成只是從下方v-for寫法換成上方的兩層式寫法:\n\u0026lt;Card v-for=\u0026#34;(element, index) in firstCardStack\u0026#34; :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; 外層的\u0026lt;template\u0026gt;的屬性#item只是省略了要迭代哪個陣列的v-for寫法而已，至於為什麼要這樣設計就要問原作者了哈哈ˊWˋ\n小結 目前的卡牌列表是可以任意切換順序，但真實的接龍是不能這樣隨意拖曳， 明日再來研究如何限制列表的拖曳、兩個列表的拖曳。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day09 參考資料\nvue.draggable的Github vue.draggable 兩列表交換範例(SFC) ","permalink":"https://zongjia.me/posts/it-day9/","summary":"\u003cp\u003e玩紙牌接龍最重要的就是卡牌會移來移去，之前都是用點的移動定點，\n今天來試試看如何撰寫拖曳紙牌的功能。\u003c/p\u003e\n\u003ch2 id=\"安裝依賴\"\u003e安裝依賴\u003c/h2\u003e\n\u003cp\u003e因為重頭學習理解拖曳，對我來說太麻煩也太無聊，\n乾脆就使用現成的套件\u003ccode\u003eVue.Draggable\u003c/code\u003e吧!\u003c/p\u003e\n\u003cp\u003e因為使用的是\u003cstrong\u003eVue3\u003c/strong\u003e專案，所以必須安裝有標註\u003cstrong\u003enext\u003c/strong\u003e的版本。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm i -S vuedraggable@next\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"單一列表的拖曳使用\"\u003e單一列表的拖曳使用\u003c/h2\u003e\n\u003cp\u003e我也還在理解該套件中，接下來的過程會盡可能去蕪存菁，但不失細節。\u003cbr\u003e\n首先一定要先引入\u003ccode\u003evuedraggable\u003c/code\u003e，如下所示:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vuedraggable\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ...other template\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e樣板的部分則如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:list\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;firstCardStack\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eitemKey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e@change\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e=\u0026#34;console.log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem);\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ element, index }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;element.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003edraggable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這樣的寫法在通常就已可運用，接下來讓我們來逐一理解\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e每個欄位的意義和預設行為\u0026hellip;\u003c/p\u003e\n\u003ch3 id=\"list\"\u003e:list\u003c/h3\u003e\n\u003cp\u003e首先\u003ccode\u003e:list\u003c/code\u003e內設定的是一個參考到陣列的\u003ccode\u003eref\u003c/code\u003e或\u003ccode\u003ereactive\u003c/code\u003e變數，只要裡面參考到的是Array即可，\n這可以讓\u003ccode\u003e\u0026lt;draggable\u0026gt;\u003c/code\u003e明白當\u003cstrong\u003e列表項目被拖曳移動\u003c/strong\u003e時自動修改的對象。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 此處genearateDeck(20, true)會回傳20個物件的Array物件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efirstCardStack\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egeneateDeck\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 為求簡單也能寫成底下這樣\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// const firstCardStack = ref([]);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"itemkey屬性\"\u003eitemKey屬性\u003c/h3\u003e\n\u003cp\u003e第二個重要的屬性是\u003ccode\u003eitemKey\u003c/code\u003e，代表前面陣列中每一個元素的唯一值，基本上就跟\u003ccode\u003ev-for\u003c/code\u003e內用到的\u003ccode\u003e:key\u003c/code\u003e有相同作用，可讓元件從\u003ccode\u003eitemKey\u003c/code\u003e明白內部元素的差異進而去做列表更新。\u003c/p\u003e\n\u003cp\u003e此處會設定\u003ccode\u003eitemKey=\u0026quot;value\u0026quot;\u003c/code\u003e，是因為參考的陣列\u003ccode\u003efirstCardStack\u003c/code\u003e每一個元素的構造如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{ \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumber\u003c/span\u003e,  \u003cspan style=\"color:#75715e\"\u003e// 撲克牌值，Ex: 0 對應 ♣A\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 開牌狀態，Ex: false 對應 蓋牌樣式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e嘗試過不添加\u003ccode\u003eitemKey\u003c/code\u003e仍可拖曳且參考的陣列有更新，但會發生UI不會刷新的窘境🤣\u003c/p\u003e","title":"Day 09 拖曳紙牌的效果(一)"},{"content":"重點提醒: 沒有真的成功實作卡牌無中斷的移動 在實作的過程中遇到了一些問題，找到替代方案先記錄下來。\n最初的思路 在前一篇文章中，我們已經完成了牌堆的製作，接下來我們要來製作牌堆的卡牌移動動畫。 在開始實作之前，我必須決定要用CSS或是JS實現?\n如果牌堆的位置永遠是固定的，或許可以用CSS來實現，但是我們要移動的是牌堆位置不一定永遠在那， 而且牌堆的卡牌數量是不固定的，更加深了預設的座標位置，所以我想這必須用JS來實現， 至少需要JS取得動態元素的位置。\n動畫的實作 第一個問題對我來說是，我要怎麼知道卡牌的位置? 起始和結束的位置都是不固定的，所以我必須要先取得卡牌的位置，才能夠進行動畫的實作。\n取得當前牌堆的位置的方法有很多種，我在這邊使用的是getBoundingClientRect()， 這個方法可以取得當前元素的相對位置+寬高，但是這個方法是在DOM上的，所以我利用const cardBox = ref(null)設定一個參考， Vue3會自動找到template中使用ref=\u0026quot;cardBox\u0026quot;的元素，並且將其綁定到cardBox上，這樣我就可以在\u0026lt;script setup\u0026gt;中使用cardBox.value來取得HTML元素本身。\n因為元件渲染掛載畫面上便會觸發onMounted事件，所以我在onMounted中取得元素的位置，並且透過emit傳遞卡片的絕對位置給父元件。\n至於為什麼是絕對位置，因為我們要移動的是卡片，而不是牌堆，所以我們必須要知道卡片的絕對位置，才能夠進行移動。 雖然後來我失敗了，但是我還是想記錄一下這個方法，因為我覺得這個方法還是很有用的。\n// CardColumn.vue \u0026lt;script setup\u0026gt; // ... const cardBox = ref(null); onMounted(() =\u0026gt; { const rect = cardBox.value.getBoundingClientRect(); const x = window.scrollX + rect.left; const y = window.scrollY + rect.top; emit(\u0026#39;position\u0026#39;, { x, y }); }) \u0026lt;/script\u0026gt; \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34; ref=\u0026#34;cardBox\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;(event) =\u0026gt; onClick(event.target)\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 然後在上層HomeView.vue就寫@position接收到x,y位置變數後，基礎工作就完成了。\n// HomeView.vue \u0026lt;script setup\u0026gt; // 第1, 2個卡堆的位置 const fstCardsPos = ref({ x: 0, y: 0 }); const secondCardsPos = ref({ x: 0, y: 0 }); \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;CardColumn :onClick=\u0026#34;moveCardFromAToB\u0026#34; :cards=\u0026#34;fstCards\u0026#34; @position=\u0026#34;(pos) =\u0026gt; fstCardsPos = pos\u0026#34;\u0026gt;\u0026lt;/CardColumn\u0026gt; \u0026lt;/template\u0026gt; 悲劇開始、希望的結尾 打算在HomeView平常隱藏一個卡片，當卡片從卡堆移動出來時就顯示，並嘗試使用requestAnimationFrame並慢慢移動卡片的絕對位置， 但是我太天真了，程式碼變得一蹋糊塗，浪費一堆時間還沒有成功。\nrequestAnimationFrame 似乎更適合用在Canvas動畫的更新上，而不是DOM移動的實作上\n所以我決定先放棄這個方法，改用Vue3的Transition-group來更簡單實現。\n基本上就是在\u0026lt;TransitionGroup\u0026gt;包裹\u0026lt;Card v-for=\u0026quot;...\u0026quot; /\u0026gt;來渲染卡片，並且在\u0026lt;TransitionGroup\u0026gt;中設定name屬性對應動畫class名稱的前綴 fade，還有因為\u0026lt;TransitionGroup\u0026gt;預設會渲染一個\u0026lt;span\u0026gt;，但是我們要渲染的是\u0026lt;div\u0026gt;，所以要設定tag為\u0026lt;div\u0026gt;。\n\u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34; ref=\u0026#34;cardBox\u0026#34;\u0026gt; \u0026lt;TransitionGroup name=\u0026#34;fade\u0026#34; tag=\u0026#34;div\u0026#34; style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;(event) =\u0026gt; onClick(event.target)\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/TransitionGroup\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; /* 定義動畫的過渡效果 */ .fade-enter-active, .fade-leave-active { transition: opacity 0.5s; transform: translateX(3rem); } .fade-enter, .fade-leave-to { opacity: 0; } \u0026lt;/style\u0026gt; 結論 雖然最後畫面上的卡片流暢的移動效果沒有實現，但還接觸到requestAnimationFrame、getBoundingClientRect()、TransitionGroup等等之前沒用過的知識，所以我覺得這次的實作還是很有收穫的。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day08 參考資料 Shubo的程式開發筆記-深入了解 getBoundingClientRect() 函數，輕鬆獲得元素的大小和位置 Vue官網文件 transition-group 30天實作線上簡報播放機制-使用requestAnimationFrame() ","permalink":"https://zongjia.me/posts/it-day8/","summary":"\u003ch2 id=\"重點提醒-沒有真的成功實作卡牌無中斷的移動\"\u003e重點提醒: 沒有真的成功實作卡牌無中斷的移動\u003c/h2\u003e\n\u003cp\u003e在實作的過程中遇到了一些問題，找到替代方案先記錄下來。\u003c/p\u003e\n\u003ch2 id=\"最初的思路\"\u003e最初的思路\u003c/h2\u003e\n\u003cp\u003e在前一篇文章中，我們已經完成了牌堆的製作，接下來我們要來製作牌堆的卡牌移動動畫。\n在開始實作之前，我必須決定要用CSS或是JS實現?\u003c/p\u003e\n\u003cp\u003e如果牌堆的位置永遠是固定的，或許可以用CSS來實現，但是我們要移動的是牌堆位置不一定永遠在那，\n而且牌堆的卡牌數量是不固定的，更加深了預設的座標位置，所以我想這必須用JS來實現，\n至少需要JS取得動態元素的位置。\u003c/p\u003e\n\u003ch2 id=\"動畫的實作\"\u003e動畫的實作\u003c/h2\u003e\n\u003cp\u003e第一個問題對我來說是，我要怎麼知道卡牌的位置?\n起始和結束的位置都是不固定的，所以我必須要先取得卡牌的位置，才能夠進行動畫的實作。\u003c/p\u003e\n\u003cp\u003e取得當前牌堆的位置的方法有很多種，我在這邊使用的是\u003ccode\u003egetBoundingClientRect()\u003c/code\u003e，\n這個方法可以取得當前元素的相對位置+寬高，但是這個方法是在DOM上的，所以我利用\u003ccode\u003econst cardBox = ref(null)\u003c/code\u003e設定一個參考，\nVue3會自動找到template中使用\u003ccode\u003eref=\u0026quot;cardBox\u0026quot;\u003c/code\u003e的元素，並且將其綁定到\u003ccode\u003ecardBox\u003c/code\u003e上，這樣我就可以在\u003ccode\u003e\u0026lt;script setup\u0026gt;\u003c/code\u003e中使用\u003ccode\u003ecardBox.value\u003c/code\u003e來取得HTML元素本身。\u003c/p\u003e\n\u003cp\u003e因為元件渲染掛載畫面上便會觸發\u003ccode\u003eonMounted\u003c/code\u003e事件，所以我在\u003ccode\u003eonMounted\u003c/code\u003e中取得元素的位置，並且透過\u003ccode\u003eemit\u003c/code\u003e傳遞卡片的絕對位置給父元件。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e至於為什麼是絕對位置，因為我們要移動的是卡片，而不是牌堆，所以我們必須要知道卡片的絕對位置，才能夠進行移動。\n雖然後來我失敗了，但是我還是想記錄一下這個方法，因為我覺得這個方法還是很有用的。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// CardColumn.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardBox\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eonMounted\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erect\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecardBox\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetBoundingClientRect\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e window.\u003cspan style=\"color:#a6e22e\"\u003escrollX\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erect\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eleft\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e window.\u003cspan style=\"color:#a6e22e\"\u003escrollY\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erect\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etop\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;position\u0026#39;\u003c/span\u003e, { \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-box\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:class\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: hidden;\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cardBox\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev-for\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(card, index) in cards\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(event) =\u0026gt; onClick(event.target)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:key\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#a6e22e\"\u003e:value\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然後在上層\u003ccode\u003eHomeView.vue\u003c/code\u003e就寫\u003ccode\u003e@position\u003c/code\u003e接收到x,y位置變數後，基礎工作就完成了。\u003c/p\u003e","title":"Day 08 牌堆的卡牌移動動畫"},{"content":"今日完成目標 多張卡牌實現垂直重疊，但露出非交疊的部分 垂直重疊 為了產生重疊的效果，個人覺得最酷的方式應該是使用CSS的grid排版， 所以在這之前我利用一個GRID GARDEN的網站練習了一下。\n原本問ChatGPT是得知用每一張卡堆疊都還要套用不同的CSS，如果要多一張牌就要多一個class，或是用sass的寫法達成，但以上這些我都不想要，一來太麻煩、二來sass還要額外引入新依賴，畢竟我只是想堆疊卡牌而已。\n接著說明實際我達成的方式是靠display: grid;要求格狀排列，然後設定grid-template-rows為 repeat(13, 3rem);，這樣就可以讓每一張牌所在的格子都只有3rem的高度，設定13是因為我認為這樣垂直重疊排列卡牌最多只有13張，畢竟紙牌接龍不同花色暫時串再一起也就13張，在現實還是虛擬我的認知都是這樣，當然在設定比13高一點也不會影響，但如果出現第14、15張就會有卡牌不重疊，這點還請注意。\n那為什麼達成重疊呢?我在容器內裝13個元件，每一個元件都只裝一張牌，且元件高度限制都在3rem，但實際元件 牌的高度是超過3rem，所以當我裝入第二張牌就會擋住第一張牌，讓第一張牌只露出3rem的高度，以此類推，最後一張牌則會露出全部。\n// CardColumn.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 1;\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isEmpty\u0026#34;\u0026gt;沒牌\u0026lt;/div\u0026gt; \u0026lt;div v-else style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;onClick\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 額外補充可以注意到card-box內第一個元素是用來稱基本的寬高， 所以第二個元素我則讓他設定position: absolute這樣可以讓其中的格狀排列不會受到第一個元素的影響也不會影響到外部元素。\n若少掉position: absolute的話，會變成底下這樣: 本日小結 原本今天是要用水平堆疊，但看了撲克才發現接龍平常都是玩垂直的\u0026hellip;\n至於卡牌移動則留在明天吧，因為堆疊卡牌的關係讓我意識到沒有我想像動畫的只是水平移動那麼簡單。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day07\n參考資料 GRID GARDEN CSS Grid Layout ","permalink":"https://zongjia.me/posts/it-day7/","summary":"\u003ch2 id=\"今日完成目標\"\u003e今日完成目標\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e 多張卡牌實現垂直重疊，但露出非交疊的部分\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"垂直重疊\"\u003e垂直重疊\u003c/h2\u003e\n\u003cp\u003e為了產生重疊的效果，個人覺得最酷的方式應該是使用CSS的\u003ccode\u003egrid\u003c/code\u003e排版，\n所以在這之前我利用一個\u003ca href=\"https://cssgridgarden.com/\"\u003eGRID GARDEN\u003c/a\u003e的網站練習了一下。\u003c/p\u003e\n\u003cp\u003e原本問ChatGPT是得知用每一張卡堆疊都還要套用不同的CSS，如果要多一張牌就要多一個class，或是用sass的寫法達成，但以上這些我都不想要，一來太麻煩、二來sass還要額外引入新依賴，畢竟我只是想堆疊卡牌而已。\u003c/p\u003e\n\u003cp\u003e接著說明實際我達成的方式是靠\u003ccode\u003edisplay: grid;\u003c/code\u003e要求格狀排列，然後設定\u003ccode\u003egrid-template-rows\u003c/code\u003e為 \u003ccode\u003erepeat(13, 3rem);\u003c/code\u003e，這樣就可以讓每一張牌所在的格子都只有3rem的高度，設定13是因為我認為這樣垂直重疊排列卡牌最多只有13張，畢竟紙牌接龍不同花色暫時串再一起也就13張，在現實還是虛擬我的認知都是這樣，當然在設定比13高一點也不會影響，但如果出現第14、15張就會有卡牌不重疊，這點還請注意。\u003c/p\u003e\n\u003cp\u003e那為什麼達成重疊呢?我在容器內裝13個元件，每一個元件都只裝一張牌，且元件高度限制都在\u003ccode\u003e3rem\u003c/code\u003e，但實際元件\n牌的高度是超過\u003ccode\u003e3rem\u003c/code\u003e，所以當我裝入第二張牌就會擋住第一張牌，讓第一張牌只露出\u003ccode\u003e3rem\u003c/code\u003e的高度，以此類推，最後一張牌則會露出全部。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// CardColumn.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-box\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: hidden;\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: visible; position: absolute; z-index: 1;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;isEmpty\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e沒牌\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-else\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;; display: grid; grid-template-rows: repeat(13, 3rem);\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-for\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;onClick\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#f92672\"\u003e:isOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"success card column stack\" loading=\"lazy\" src=\"/images/day7-card-column.png\"\u003e\n額外補充可以注意到card-box內第一個元素是用來稱基本的寬高，\n所以第二個元素我則讓他設定\u003ccode\u003eposition: absolute\u003c/code\u003e這樣可以讓其中的格狀排列不會受到第一個元素的影響也不會影響到外部元素。\u003c/p\u003e\n\u003cp\u003e若少掉\u003ccode\u003eposition: absolute\u003c/code\u003e的話，會變成底下這樣:\n\u003cimg alt=\"fail card column stack\" loading=\"lazy\" src=\"/images/day7-without-absolute.png\"\u003e\u003c/p\u003e","title":"Day 07 卡牌垂直重疊"},{"content":"今日目標 研究如何製作牌堆 製作牌堆 製作CardBox元件負責用來擺放卡片的容器，所以結構上就只是比原本卡片元件的稍寬，所以設計成可放子元件進去的樣板，然後當沒放牌時會產生跟牌一個寬高的隱藏區塊到slot裡面。\n// CardBox.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;slot\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 所以目前首頁是長這樣，放了兩個空的CardBox佔位置。\n// HomeView.vue \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;/div\u0026gt; 接著思考如何實作卡牌從A點發到B點，看著畫面思考發現， 不如今天就來實作兩邊卡堆點擊後會移動到對方卡堆的功能。\n這邊為了簡單驗證想法，定義函數geneateDeck(5, true)生成五張卡牌依序是梅花A~5(設為開牌)， 我預計實驗兩個卡堆，所以函數也就設計以下兩個非常相似的函數， 功用正是將卡堆的最後一張卡彈出，並推到另一個牌堆。\n// HomeView.vue const fstCards = ref(geneateDeck(5, true)); const secondCards = ref([]); const moveCardFromAToB = () =\u0026gt; { const card = fstCards.value.pop(); if (card === undefined) return; secondCards.value.push(card); }; const moveCardFromBToA = () =\u0026gt; { const card = secondCards.value.pop(); if (card === undefined) return; fstCards.value.push(card); }; 在經過一番折騰，發現CardBox.vue應該要內部自帶Card元件， 由外面用slot的方式注入進去畫面反而不好寫版面，當然也有可能是我排版功力不夠，改由props傳入cards陣列，由外部HomeView.vue處理資料傳遞，但由CardBox.vue負責卡片的顯示。\n所以可以看到以下CardBox.vue會判斷當前有牌沒牌渲染不同的樣式。\n// CardBox.vue \u0026lt;script setup\u0026gt; import { computed } from \u0026#39;vue\u0026#39;; import Card from \u0026#39;../components/Card.vue\u0026#39;; const { cards } = defineProps([\u0026#39;cards\u0026#39;]); const isEmpty = computed(() =\u0026gt; { return cards.length == 0; }); \u0026lt;/script\u0026gt; \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isEmpty\u0026#34;\u0026gt;沒牌啦\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 遊戲大廳HomeView.vue負責處理資料的部分依舊如上，但樣板改成傳簡單的卡片陣列進到\u0026lt;CardBox /\u0026gt;\n// HomeView.vue \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;第一卡堆: \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;第二卡堆: \u0026lt;/div\u0026gt; \u0026lt;CardBox @Click=\u0026#34;moveCardFromAToB\u0026#34; :cards=\u0026#34;fstCards\u0026#34; /\u0026gt; \u0026lt;CardBox @Click=\u0026#34;moveCardFromBToA\u0026#34; :cards=\u0026#34;secondCards\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 小結 本來理想上是要有卡片飛過去特效，但至少有先完成牌堆顯示的部分， 今天開發學習進度不理想或許也卡在我想要如何顯示，而忘記先去思考資料如何改變。\n預計明天會來研究該如何處理牌堆之間飛越的效果，以及牌如何實現水平重疊的部分。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day06\n參考\nChatGPT ","permalink":"https://zongjia.me/posts/it-day6/","summary":"\u003ch1 id=\"今日目標\"\u003e今日目標\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e 研究如何製作牌堆\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"製作牌堆\"\u003e製作牌堆\u003c/h2\u003e\n\u003cp\u003e製作\u003ccode\u003eCardBox\u003c/code\u003e元件負責用來擺放卡片的容器，所以結構上就只是比原本卡片元件的稍寬，所以設計成可放子元件進去的樣板，然後當沒放牌時會產生跟牌一個寬高的隱藏區塊到slot裡面。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// CardBox.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-box\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eslot\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;visibility: hidden;\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eslot\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所以目前首頁是長這樣，放了兩個空的CardBox佔位置。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// HomeView.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estyle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCardBox\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eCardBox\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCardBox\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eCardBox\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"cardbox.vue demo image\" loading=\"lazy\" src=\"/images/day06-cardbox.png\"\u003e\u003c/p\u003e\n\u003cp\u003e接著思考如何實作卡牌從A點發到B點，看著畫面思考發現，\n不如今天就來實作兩邊卡堆點擊後會移動到對方卡堆的功能。\u003c/p\u003e\n\u003cp\u003e這邊為了簡單驗證想法，定義函數\u003ccode\u003egeneateDeck(5, true)\u003c/code\u003e生成五張卡牌依序是梅花A~5(設為開牌)，\n我預計實驗兩個卡堆，所以函數也就設計以下兩個非常相似的函數，\n功用正是將卡堆的最後一張卡彈出，並推到另一個牌堆。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// HomeView.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efstCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egeneateDeck\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esecondCards\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eref\u003c/span\u003e([]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emoveCardFromAToB\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efstCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eundefined\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esecondCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emoveCardFromBToA\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esecondCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eundefined\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efstCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在經過一番折騰，發現\u003ccode\u003eCardBox.vue\u003c/code\u003e應該要內部自帶\u003ccode\u003eCard\u003c/code\u003e元件，\n由外面用\u003ccode\u003eslot\u003c/code\u003e的方式注入進去畫面反而不好寫版面，當然也有可能是我排版功力不夠，改由\u003ccode\u003eprops\u003c/code\u003e傳入cards陣列，由外部\u003ccode\u003eHomeView.vue\u003c/code\u003e處理資料傳遞，但由\u003ccode\u003eCardBox.vue\u003c/code\u003e負責卡片的顯示。\u003c/p\u003e\n\u003cp\u003e所以可以看到以下\u003ccode\u003eCardBox.vue\u003c/code\u003e會判斷當前有牌沒牌渲染不同的樣式。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// CardBox.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ecomputed\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vue\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;../components/Card.vue\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefineProps\u003c/span\u003e([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;cards\u0026#39;\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisEmpty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecomputed\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card card-box\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-if\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;isEmpty\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e沒牌啦\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-else\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ev-for\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(card, index) in cards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e遊戲大廳\u003ccode\u003eHomeView.vue\u003c/code\u003e負責處理資料的部分依舊如上，但樣板改成傳簡單的卡片陣列進到\u003ccode\u003e\u0026lt;CardBox /\u0026gt;\u003c/code\u003e\u003c/p\u003e","title":"Day 06 實現自訂義牌堆"},{"content":"因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\n引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。\n安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中\n定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import HomeView from \u0026#39;../views/HomeView.vue\u0026#39; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;home\u0026#39;, component: HomeView }, { path: \u0026#39;/game1\u0026#39;, name: \u0026#39;game1\u0026#39;, // Lazy Loading component: () =\u0026gt; import(\u0026#39;../views/Game1View.vue\u0026#39;) } ] }) export default router 接著App.vue修改成以下結構，RouterView就是渲染對應路由的元件，RouterLink則是像\u0026lt;a\u0026gt;的連結會修改網址的對應路由，只是不會重新整理整個網頁，而是動態載入去切換部分畫面、網址。 // App.vue \u0026lt;script setup\u0026gt; import { RouterView, RouterLink } from \u0026#39;vue-router\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;RouterLink to=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/RouterLink\u0026gt; \u0026lt;RouterLink to=\u0026#34;/game1\u0026#34;\u0026gt;撲克牌連連看\u0026lt;/RouterLink\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;RouterView /\u0026gt; \u0026lt;/template\u0026gt; 如果需要當前路由對應到對應連結時自動套用特定class的話，不一定要在每個\u0026lt;RouterLink\u0026gt;寫:class=\u0026quot;\u0026quot;去做判斷，只需要在\u0026lt;style\u0026gt;...\u0026lt;/style\u0026gt;中定義class .router-link-active即可\n.router-link-active { color: #ff4500; font-weight: bold; } 調整main.js，讓Vue實際掛載第四步驟定義的Router // main.js import router from \u0026#39;./router\u0026#39; // 略 const app = createApp(App); app.use(router); app.mount(\u0026#39;#app\u0026#39;) 使用slot重構遊戲標題 一直以來都是用自訂義的Vue組件都是把props的方式傳值進去， 但其實還有一個slot的用法可以把外部組件傳進去。\nslot用法非常簡單，只需要在元件中添加\u0026lt;slot\u0026gt;...\u0026lt;/slot\u0026gt;， 以當前專案舉例，因為之後\u0026lt;FoxyHeader\u0026gt;可能會添加在每個遊戲上方，因為每個遊戲的標題都不相同，所以在此改用slot做調整。\n// FoxyHeader.vue \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!-- 以下slot就是標題位置 --\u0026gt; \u0026lt;slot\u0026gt;No child component passed in\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;../assets/imgs/foxy01.jpg\u0026#34; class=\u0026#34;foxyHead\u0026#34; /\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/template\u0026gt; 然後在\u0026lt;FoxyHeader\u0026gt;和\u0026lt;/FoxyHeader\u0026gt;中間添加想要的文字或HTML組件，就填充到對應的slot位置，如果沒填充才會顯示上方寫的No child component passed in。\n// Game1view.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;GameBoard /\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 更多的利用slot 將牌桌\u0026lt;GameBoard\u0026gt;改用slot，控制牌桌上卡片排序的職責也拆成一個新元件\u0026lt;CardRow\u0026gt;， 將撲克牌連連看的內容都移入全都移入Game1View.vue，所以後者的樣板變成以下結構:\n// Game1View.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;button style=\u0026#34;font-size: 1.5rem;\u0026#34; @click=\u0026#34;resetGame\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;div style=\u0026#34;font-size:1.5rem;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;當前分數: {{ gameScore }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;時間經過: {{ timerFormat }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;GameBoard\u0026gt; \u0026lt;CardRow\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; :isDone=\u0026#34;card.isDone\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; \u0026lt;/CardRow\u0026gt; \u0026lt;/GameBoard\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 小結 本來想先做牌堆沒做成，倒是學習如何應用Vue Router和slot 程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day05 參考\nhttps://github.com/derycktse/treer https://router.vuejs.org/guide/ ","permalink":"https://zongjia.me/posts/it-day5/","summary":"\u003cp\u003e因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換，\n所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\u003c/p\u003e\n\u003ch2 id=\"引入-vue-router\"\u003e引入 Vue Router\u003c/h2\u003e\n\u003cp\u003e接下來步驟我是參考『直接使用\u003ccode\u003enpm create vue@latest\u003c/code\u003e指令產生預設攜帶有用\u003ccode\u003eVue Router\u003c/code\u003e專案的檔案架構』\n下去調整的，所以步驟草率請敬請見諒。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e安裝依賴\u003ccode\u003eVue Router\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install vue-router@4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e在src底下新增兩個資料夾\u003ccode\u003eviews\u003c/code\u003e和\u003ccode\u003erouter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在\u003ccode\u003eviews\u003c/code\u003e資料夾底下新增兩個頁面檔\u003ccode\u003eGame1View.vue\u003c/code\u003e和\u003ccode\u003eHomeView.vue\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esrc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─App.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─main.js\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─views\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   ├─Game1View.vue \u003cspan style=\"color:#75715e\"\u003e# 撲克連連看\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   └─HomeView.vue  \u003cspan style=\"color:#75715e\"\u003e# 首頁\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─utils\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   ├─constants.js\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   └─poker-helper.js\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─router\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   └─index.js\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├─components\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|     ├─Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|     ├─FoxyHeader.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|     ├─GameBoard.vue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| 略... \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行\u003ccode\u003enpx treer -e ./result.txt\u003c/code\u003e 便會\n將樹狀結構寫到當前的\u003ccode\u003eresult.txt\u003c/code\u003e文件中\u003c/p\u003e\u003c/blockquote\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e定義路由應對應的元件，routes的部分可以有預先載入的功能\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// router/index.js\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ecreateRouter\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecreateWebHistory\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vue-router\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHomeView\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;../views/HomeView.vue\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erouter\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecreateRouter\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehistory\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecreateWebHistory\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emeta\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBASE_URL\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eroutes\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;home\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecomponent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHomeView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/game1\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;game1\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Lazy Loading\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecomponent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;../views/Game1View.vue\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erouter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e接著\u003ccode\u003eApp.vue\u003c/code\u003e修改成以下結構，\u003ccode\u003eRouterView\u003c/code\u003e就是渲染對應路由的元件，\u003ccode\u003eRouterLink\u003c/code\u003e則是像\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e的連結會修改網址的對應路由，只是不會重新整理整個網頁，而是動態載入去切換部分畫面、網址。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vue\" data-lang=\"vue\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// App.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003eRouterView\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eRouterLink\u003c/span\u003e } \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;vue-router\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003eheader\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003enav\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u0026lt;\u003cspan style=\"color:#f92672\"\u003eRouterLink\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003eHome\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eRouterLink\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u0026lt;\u003cspan style=\"color:#f92672\"\u003eRouterLink\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/game1\u0026#34;\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003e撲克牌連連看\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eRouterLink\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003enav\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eheader\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;\u003cspan style=\"color:#f92672\"\u003eRouterView\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e如果需要當前路由對應到對應連結時自動套用特定class的話，不一定要在每個\u003ccode\u003e\u0026lt;RouterLink\u0026gt;\u003c/code\u003e寫\u003ccode\u003e:class=\u0026quot;\u0026quot;\u003c/code\u003e去做判斷，只需要在\u003ccode\u003e\u0026lt;style\u0026gt;...\u0026lt;/style\u0026gt;\u003c/code\u003e中定義class \u003ccode\u003e.router-link-active\u003c/code\u003e即可\u003c/p\u003e","title":"Day 05 引入Vue Router切換頁面"},{"content":"改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\n為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;card-flip\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isOpen\u0026#34; class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。\n// Card.vue \u0026lt;style scoped\u0026gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i \u0026lt; length; i++) { let rand_to_swap = Math.floor(Math.random()*(length-i)); let tmp = deck[length-1-i]; deck[length-1-i] = deck[rand_to_swap]; deck[rand_to_swap] = tmp; } return deck; } 產生52張洗亂的牌geneateShuffleDeck，這邊的isDone是為了儲存比對成功， 原本在實作上是會消失，但後來發現連連看的版面會跑掉，所以設計isDone為true時卡片會變成顯示不可點擊的小綠卡。 function geneateShuffleDeck() { let deck = []; for (let i = 0; i \u0026lt; 52; i++) { deck.push({ value: i, isOpen: false, isDone: false }); } return shuffle(deck); } 製作撲克牌連連看 簡單就是52張牌洗亂擺在桌上，翻出兩張牌打開有相同的就等於連上， 因為我記憶力沒多好，所以遊戲規則調整成一次最多可以翻六張，超過張數的話牌就會蓋起來!\n雖然樣式很醜，但也做了記錄了分數、當前經過時間和遊戲重置的功能。 因為有越來越多變數用ref存著，在\u0026lt;script setup\u0026gt;中每次對ref的變數取值/設值都要加 .value 越來越冗長，後面想到可以用reactive宣告一個遊戲狀態存多個屬性欄位，尤其是陣列的部分\n// GameBoard.vue const boardCards = ref(geneateShuffleDeck()); const gameScore = ref(0); const game = reactive({ timer: 0, // 當前經過時間 timerInterval: null, // 儲存執行 setInterval()回傳的intevealId，重置會需要用到 deckCards: [], // 將目前打開的牌放到裡面，方便之後比對是否有數字相同的卡 }) 另外遊戲判定成功，我是使用Watcher去看有沒有分數(gameScore)達到182的，才去跳出結束訊息， 但看網路上watch好像都是用在接收API結果觸發時居多。\n// GameBoard.vue watch(gameScore, (newScore, oldScore) =\u0026gt; { if (newScore \u0026gt;= 182) { alert(`遊戲結束，花費時間: ${timerFormat.value} 總分數: ${newScore}!!!`); resetGame(); } }); 實作完後覺得最複雜的可能就是點卡牌後觸發的翻轉功能，判定成功與否真的蠻麻煩， 傳值/取值也是如果可以有個簡單的中央儲存控管就好了。\n最後成功實作出來也玩了幾回，至少真的像在玩一個遊戲的感覺，雖然最多可以點開六張是比較寬鬆。\n以下是實際運作影片: 參考\n簡單又複雜的洗牌演算法 Vue官網的Watchers 明日預計會做紙牌接龍會用到的牌堆設計，感謝觀看!\n","permalink":"https://zongjia.me/posts/it-day4/","summary":"\u003ch2 id=\"改變翻牌效果\"\u003e改變翻牌效果\u003c/h2\u003e\n\u003cp\u003e研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u003ccode\u003e\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt;\u003c/code\u003e 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\u003c/p\u003e\n\u003cp\u003e為了在時間內完成，我打消原本水平翻轉的作法，我改採\u003ccode\u003eTransition\u003c/code\u003e結合\u003ccode\u003ev-if\u003c/code\u003e的方式去顯示卡牌正反兩面，\n發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-flip\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;isOpen\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-front\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;numberClass\u0026#34;\u003c/span\u003e\u0026gt;{{ \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e }}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-back\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eTransition\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e參考Vue官方的\u003ca href=\"https://vuejs.org/guide/built-ins/transition.html#transition-between-elements\"\u003e範例\u003c/a\u003e，\n在style添加以下後綴是\u003ccode\u003e-enter-active\u003c/code\u003e/\u003ccode\u003eleave-active\u003c/code\u003e/\u003ccode\u003e-enter-from\u003c/code\u003e/\u003ccode\u003e-leave-to\u003c/code\u003e的class，是為了讓Transition知道動畫要如何改變。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003estyle\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003escoped\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eflip\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eenter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eactive\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eflip\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleave\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eactive\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etransition\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eease\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eflip\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eenter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecard\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eflip\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleave\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eto\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eopacity\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u003cspan style=\"color:#75715e\"\u003e/* 略 */\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"實作洗牌\"\u003e實作洗牌\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e實作兩個函數存於\u003ccode\u003eutils/poker-helper.js\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e洗牌的函數\u003ccode\u003eshuffle\u003c/code\u003e，洗牌採用的演算法參考看別人文章實作 \u003cstrong\u003eFisher-Yates\u003c/strong\u003e 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshuffle\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand_to_swap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003efloor\u003c/span\u003e(Math.\u003cspan style=\"color:#a6e22e\"\u003erandom\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etmp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003erand_to_swap\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003erand_to_swap\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etmp\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e產生52張洗亂的牌\u003ccode\u003egeneateShuffleDeck\u003c/code\u003e，這邊的\u003ccode\u003eisDone\u003c/code\u003e是為了儲存比對成功，\n原本在實作上是會消失，但後來發現連連看的版面會跑掉，所以設計\u003ccode\u003eisDone\u003c/code\u003e為true時卡片會變成顯示不可點擊的小綠卡。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egeneateShuffleDeck\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eisDone\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshuffle\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edeck\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"製作撲克牌連連看\"\u003e製作撲克牌連連看\u003c/h2\u003e\n\u003cp\u003e簡單就是52張牌洗亂擺在桌上，翻出兩張牌打開有相同的就等於連上，\n因為我記憶力沒多好，所以遊戲規則調整成一次最多可以翻六張，超過張數的話牌就會蓋起來!\u003c/p\u003e","title":"Day 04 調整翻牌效果\u0026實作洗牌\u0026外加撲克牌連連看"},{"content":"原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式\n實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34; :class=\u0026#34;backCardClass\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([\u0026#34;poker-flip\u0026#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.value.findIndex((item) =\u0026gt; item.value === num) boardCards.value[targetIdx].isOpen = !boardCards.value[targetIdx].isOpen; } 今天也有犯一點蠢，發現開牌的狀態一直傳不下去，但toggleFlip函數又有拿到對應的數字和改變的狀態，\n原來是GameBoard.vue中寫的 \u0026lt;Card /\u0026gt; 元件沒寫屬性 :isOpen 導致程式沒報錯，但有執行異常的情況\u0026hellip;\n今日進度 卡牌翻面有了，點擊後可翻開/覆蓋卡牌，但CSS水平反轉的動畫只套用到蓋牌(開牌就沒動畫)， 雖然有發現Vue3的Transition寫法但奈何悟性不足今天無法應用在上面 Vue3的Transition的寫法也是ChatGPT跟我說的，雖然是錯的居多(範例給我 \u0026lt;transition\u0026gt; 但第一字母其實應該大寫才對XD)，但身為前端菜逼八也是先把它當成關鍵字搜尋引擎使用\n發牌排到明天再做 參考資料\n2018鐵人賽文章-撲克翻轉 ","permalink":"https://zongjia.me/posts/it-day3/","summary":"\u003cp\u003e原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果，\n但現實的能力讓我想先說說今天的開發方式\u003c/p\u003e\n\u003ch1 id=\"實際思考開發的過程\"\u003e實際思考/開發的過程\u003c/h1\u003e\n\u003ch2 id=\"卡牌翻面\"\u003e卡牌翻面\u003c/h2\u003e\n\u003ch3 id=\"想像的實作過程\"\u003e想像的實作過程\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e沿用原本的\u003ccode\u003eCard.vue\u003c/code\u003e內的樣板，在裡面分成兩個div區塊，\n一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。\u003c/li\u003e\n\u003cli\u003e在\u003ccode\u003eCard.vue\u003c/code\u003e內撰寫 \u003cstrong\u003e@click\u003c/strong\u003e 去改變卡片的狀態\u003c/li\u003e\n\u003cli\u003e撰寫CSS的動畫去實現翻面的過程\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"現實開發\"\u003e現實開發\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 \u003ccode\u003ebackground-size: cover;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出\u003ca href=\"https://eyesofkids.gitbooks.io/css3/content/contents/transform3d.html\"\u003e3D方塊\u003c/a\u003e，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法\u003c/li\u003e\n\u003cli\u003e意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板\u003c/li\u003e\n\u003cli\u003e並且添加\u003ccode\u003e@click\u003c/code\u003e 會觸發\u003ccode\u003eemit\u003c/code\u003e將點到的卡牌數字回傳至上層進行更新\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;backCardClass\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-front\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;numberClass\u0026#34;\u003c/span\u003e\u0026gt;{{ \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e }}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card-back\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003etemplate\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e因為我Vue3是採用\u003ca href=\"https://vuejs.org/guide/scaling-up/sfc.html#single-file-components\"\u003eSFC(Single-File Components)\u003c/a\u003e的寫法，所以定義emit的方式如下所示:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eemit\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefineEmits\u003c/span\u003e([\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;poker-flip\u0026#34;\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e在上層的元件要接會使用剛剛定義在defineEmits的名稱 \u003ccode\u003e@poker-flip\u003c/code\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// GameBoard.vue 其他都略\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eCard\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efor\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card in boardCards\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.value\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;card.isOpen\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epoker\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eflip\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;toggleFlip\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，\u003ccode\u003etoggleFlip\u003c/code\u003e是我撰寫\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// GameBoard.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoggleFlip\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 找到對應的開牌狀態且翻轉\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etargetIdx\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eboardCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efindIndex\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eboardCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etargetIdx\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eboardCards\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etargetIdx\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e今天也有犯一點蠢，發現開牌的狀態一直傳不下去，但toggleFlip函數又有拿到對應的數字和改變的狀態，\u003cbr\u003e\n原來是GameBoard.vue中寫的 \u003ccode\u003e\u0026lt;Card /\u0026gt;\u003c/code\u003e 元件沒寫屬性 \u003ccode\u003e:isOpen\u003c/code\u003e 導致程式沒報錯，但有執行異常的情況\u0026hellip;\u003c/p\u003e","title":"Day 03 完成卡牌自動翻面的效果，但還不完整"},{"content":"動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\n意外發現原來App.vue檔(放置卡牌區的元件)在\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;定義的class雖然會套用到App.vue的\u0026lt;template\u0026gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue\u0026lt;template\u0026gt;內使用相同class名稱的元素\n修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:\nmain { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。\nheader { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\n因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\n複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\n卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\n// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在\u0026lt;script setup\u0026gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 \u0026lt;template\u0026gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\n// Card.vue const pokerValue = props.value; // 對應撲克花色符號，Ex: ♣A const content = PokerValuesMap[pokerValue].content; // 對應撲克顏色class const numberClass = PokerValuesMap[pokerValue].isRed ? \u0026#39;card card-red\u0026#39; : \u0026#39;card\u0026#39;; 卡片也實際使用到 :class 去決定要顯示指定的class，畢竟紅心/梅花是套用紅色。 Card.vue的樣板很簡單是因為把一些轉換顏色物件的部分移到我自訂義的uitls/constants.js進行map對照產生Card實際顯示的花色符號。\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div :class=\u0026#34;numberClass\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 使用到v-for去執行迴圈在GameBoard元件產生52張牌\n// GameBoard.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;game-board\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-row\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 今日進度 明日預計製作發牌和卡牌自動翻面的效果\n參考: 學習 CSS 版面配置 https://zh-tw.learnlayout.com/ ChatGPT\n","permalink":"https://zongjia.me/posts/it-day2/","summary":"\u003ch2 id=\"動工前的準備\"\u003e動工前的準備\u003c/h2\u003e\n\u003cp\u003e因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\u003c/p\u003e\n\u003cp\u003e意外發現原來App.vue檔(放置卡牌區的元件)在\u003ccode\u003e\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;\u003c/code\u003e定義的class雖然會套用到App.vue的\u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e的元件中，但卻不影響App.vue內引入的GameBoard.vue\u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e內使用相同class名稱的元素\u003c/p\u003e\n\u003ch2 id=\"修正重疊問題\"\u003e修正重疊問題\u003c/h2\u003e\n\u003cp\u003e關於排版的部分身為前端菜雞，就現學現賣使用將元件內部\u003cstrong\u003eflex-wrap: wrap\u003c/strong\u003e將包裹\u003cstrong\u003e標題\u003c/strong\u003e和\u003cstrong\u003e卡牌區\u003c/strong\u003e的main元素進行調整，如下所示:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003emain\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eflex\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eflex-wrap\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ewrap\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置，\n採用 \u003cstrong\u003eoverflow: hidden;\u003c/strong\u003e 這可以避免header內的元素超出限制範圍的部分進行隱藏。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eheader\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003erem\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eflex\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ealign-items\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ecenter\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e: fit-content;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003emax-height\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etext-align\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ecenter\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoverflow\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ehidden\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"顯示卡牌在牌桌\"\u003e顯示卡牌在牌桌\u003c/h2\u003e\n\u003cp\u003e處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色，\n所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案\n\u003ca href=\"https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\"\u003ehttps://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e因為我昨天刻的桌子似乎不太適合顯示一堆卡牌，\n馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\u003c/p\u003e\n\u003cp\u003e複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。\n我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\u003c/p\u003e\n\u003ch2 id=\"卡牌元件\"\u003e卡牌元件\u003c/h2\u003e\n\u003cp\u003e每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。\n另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprops\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefineProps\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Number,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eisOpen\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e Boolean\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e另外也學到如果要在\u003ccode\u003e\u0026lt;script setup\u0026gt;\u003c/code\u003e中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像  \u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Card.vue\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprops\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 對應撲克花色符號，Ex: ♣A\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePokerValuesMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 對應撲克顏色class\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumberClass\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePokerValuesMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003epokerValue\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003eisRed\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;card card-red\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;card\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e卡片也實際使用到 \u003cstrong\u003e:class\u003c/strong\u003e 去決定要顯示指定的class，畢竟紅心/梅花是套用紅色。\nCard.vue的樣板很簡單是因為把一些轉換顏色物件的部分移到我自訂義的\u003cstrong\u003euitls/constants.js\u003c/strong\u003e進行map對照產生Card實際顯示的花色符號。\u003c/p\u003e","title":"Day 02 調整css調整桌面\u0026產生52張紙牌"},{"content":"前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。\n原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。\n中短期目標 目前預計想完成的目標如下:\n前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame \u0026amp;\u0026amp; npm run dev 2. 在新專案中建好git repo\ngit init git commit -am \u0026#39;initial\u0026#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip; 照理來說狐狸圖應該要上下對齊才對! 小結 記錄好自己的目標後，Vue建立專案和元件的方式跟React很像， 後面git的步驟只是記錄我是雷包，還好是因為空專案才可以放心執行git push -f\n明日預計來研究CSS怎麼排版\u0026hellip;太久沒碰都忘記了QwQ\n還要想怎麼顯示一張張卡牌在畫面上，真的是毫無信心，就看明天能否靠ChatGPT拯救這一切吧\n參考 Vue建立專案\n","permalink":"https://zongjia.me/posts/it-day1/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\u003cbr\u003e\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合，\n此次參賽也是為了督促自己在前端的技術進步。\u003c/p\u003e\n\u003cp\u003e原本是想單純參加自我挑戰組，\n因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成，\n過了9年後的我可不想在同個地方掛彩。\u003c/p\u003e\n\u003ch2 id=\"中短期目標\"\u003e中短期目標\u003c/h2\u003e\n\u003cp\u003e目前預計想完成的目標如下:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e前期目標\n\u003cul\u003e\n\u003cli\u003e可以玩牌的畫面\u003c/li\u003e\n\u003cli\u003e產生紙牌\u003c/li\u003e\n\u003cli\u003e拖曳紙牌\u003c/li\u003e\n\u003cli\u003e洗牌\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e中期目標\n\u003cul\u003e\n\u003cli\u003e紙牌動畫移動\u003c/li\u003e\n\u003cli\u003e紙牌翻轉\u003c/li\u003e\n\u003cli\u003e使用前面的技術實現心臟病遊戲\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e後期目標\n\u003cul\u003e\n\u003cli\u003e紙牌接龍\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"今日目標-建好專案\"\u003e今日目標-建好專案\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e建立Vue3專案並啟動成功\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm create vue@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ithelp-pokergame \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e npm run dev\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"begin-project\" loading=\"lazy\" src=\"/images/2023-09-10begin-project.png\"\u003e\n2. 在新專案中建好git repo\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -am \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;initial\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e在Github建好一個新的\u003ca href=\"https://github.com/kabuto412rock/ithelp-pokergame\"\u003e儲存庫 ithelp-pokergame\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e將本地的git庫跟Github的庫連上對應\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 先在本地建一個main分支\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit checkout -b main \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 砍了本地原始master分支\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit branch -D master\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 嘗試拖拉儲存庫\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit pull\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 設定本地main和遠端main分支對應\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit branch --set-upstream-to\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eorigin/main main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 乾脆直接把本地分支全部強推上遠端\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push -f\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"6\"\u003e\n\u003cli\u003e自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip;\n照理來說狐狸圖應該要上下對齊才對!\n\u003cimg alt=\"vuePagePicture with foxy\" loading=\"lazy\" src=\"/images/day1-result.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"小結\"\u003e小結\u003c/h2\u003e\n\u003cp\u003e記錄好自己的目標後，Vue建立專案和元件的方式跟React很像，\n後面git的步驟只是記錄我是雷包，還好是因為空專案才可以放心執行\u003cstrong\u003egit push -f\u003c/strong\u003e\u003c/p\u003e","title":"Day 01 開發遊戲前先設定目標策略"},{"content":" 前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷\n參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已\n補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!\n在提到參賽主題之前，我想先說明工作後的經歷\n工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\n名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗\n可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\n日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\n當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\n第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\n那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\n那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\n話題扯遠了!\n在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\n這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\n後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\n技術總是層出不窮，身為工程師也只能適應變化 by 我\n現在的工作? 待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\n或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\n參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\n因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，\n但這次想從前端開始著手製作小遊戲!預計會採用不熟悉的Vue3開發專案，希望也能成為下個敲門磚。\n結論 打算報名主題 SideProject30 ，標題就暫定 毫無自信的開發Web遊戲接龍-成為創造龍的英雄之路\n接下來幾天會先摸索一下能用的工具， 姑且就先報名吧? 參賽前的內心話，就先到這吧! ","permalink":"https://zongjia.me/posts/adventure-again/","summary":"\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E5%89%8D%E8%A8%80\"\u003e前言\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%8F%83%E8%B3%BD%E5%8B%95%E5%8A%9B\"\u003e參賽動力\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%B7%A5%E4%BD%9C%E7%B6%93%E6%AD%B7\"\u003e工作經歷\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C-%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB\"\u003e第一份工作-軟體工程師\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%AC%AC%E4%BA%8C%E4%BB%BD%E5%B7%A5%E4%BD%9C-%E5%BE%8C%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB\"\u003e第二份工作-後端工程師\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%8F%BE%E5%9C%A8%E7%9A%84%E5%B7%A5%E4%BD%9C\"\u003e現在的工作?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%8F%83%E8%B3%BD%E4%B8%BB%E9%A1%8C%E6%96%B9%E5%90%91\"\u003e參賽主題方向\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e結論\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力，\n撰寫為什麼要參加比賽的原因?\n同時回顧自己開始工作後的經歷\u003c/p\u003e\n\u003ch1 id=\"參賽動力\"\u003e參賽動力\u003c/h1\u003e\n\u003cp\u003e從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加，\n但回頭來看只是\u003cdel\u003e害怕失敗和變化而已\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e補充\u003c/strong\u003e: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip;\n\u003ca href=\"https://ithelp.ithome.com.tw/articles/10159509\"\u003ec++第十二天-字串是用陣列存取\u003c/a\u003e\n\u003cimg alt=\"曾參加2014鐵人賽半途而廢的照片QwQ\" loading=\"lazy\" src=\"/images/2023-09-10%E5%8E%9F%E4%BE%86%E6%88%91%E6%9B%BE%E5%8F%83%E8%B3%BD%E9%81%8E.png\"\u003e\u003c/p\u003e\n\u003cp\u003e這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了，\n或許是經過社會的摩擦後，這次我不想再逃避了!!\u003c/p\u003e\n\u003cp\u003e在提到參賽主題之前，我想先說明工作後的經歷\u003c/p\u003e\n\u003ch1 id=\"工作經歷\"\u003e工作經歷\u003c/h1\u003e\n\u003ch2 id=\"第一份工作-軟體工程師\"\u003e第一份工作-軟體工程師\u003c/h2\u003e\n\u003cp\u003e第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作，\n新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\u003c/p\u003e\n\u003cp\u003e名為軟體工程師，但實際工作的項目就是開發Web版的系統，\n開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)，\n身為一個菜鳥也是個很珍貴的經驗\u003c/p\u003e\n\u003cp\u003e可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號，\n如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\u003c/p\u003e\n\u003cp\u003e日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發，\n而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\u003c/p\u003e\n\u003cp\u003e當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\u003c/p\u003e\n\u003ch2 id=\"第二份工作-後端工程師\"\u003e第二份工作-後端工程師\u003c/h2\u003e\n\u003cp\u003e找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後，\n後來在Udemy買課自學用\u003ccode\u003eMERN\u003c/code\u003e架構寫了\u003ca href=\"https://github.com/kabuto412rock/todo-platform\"\u003eTodo-Platform\u003c/a\u003e\n\u003cimg alt=\"Todo-Platform首頁圖\" loading=\"lazy\" src=\"/images/todo-platform-home.png\"\u003e\u003c/p\u003e\n\u003cp\u003e在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\u003c/p\u003e\n\u003cp\u003e那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\u003cbr\u003e\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e那時使用的便是 \u003ca href=\"https://daisyui.com/\"\u003edaisyUI\u003c/a\u003e ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e話題扯遠了!\u003c/p\u003e\n\u003cp\u003e在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件，\n中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\u003c/p\u003e\n\u003cp\u003e這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\u003c/p\u003e\n\u003cp\u003e後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 \u003cbr\u003e\n畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e技術總是層出不窮，身為工程師也只能適應變化 by 我\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"現在的工作\"\u003e現在的工作?\u003c/h2\u003e\n\u003cp\u003e待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\u003c/p\u003e\n\u003cp\u003e或許是慣性思維在後端，即使離職後我在Hahow上 \u003ca href=\"https://hahow.in/courses/5fe22e7fe810e10fc483dd78\"\u003eJava Spring Boot課程\u003c/a\u003e，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\u003c/p\u003e\n\u003ch1 id=\"參賽主題方向\"\u003e參賽主題方向\u003c/h1\u003e\n\u003cp\u003e在上份工作中， 身為\u003cstrong\u003e後端工程師\u003c/strong\u003e不太有機會去寫前端，\n而是花更多時間去開發API、確認架構、資料等等，\n即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\u003c/p\u003e\n\u003cp\u003e因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用\n不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，\u003c/p\u003e\n\u003cp\u003e但這次想從前端開始著手製作小遊戲!預計會採用不熟悉的Vue3開發專案，希望也能成為下個敲門磚。\u003c/p\u003e\n\u003ch1 id=\"結論\"\u003e結論\u003c/h1\u003e\n\u003cp\u003e打算報名主題 \u003ccode\u003eSideProject30\u003c/code\u003e ，標題就暫定 \u003cstrong\u003e毫無自信的開發Web遊戲接龍-成為創造龍的英雄之路\u003c/strong\u003e\u003c/p\u003e","title":"參加2023鐵人賽前的自我回顧"},{"content":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.json的host值與MySQL容器名稱相同，這是因為容器的hostname預設與名稱相同，其他password等設定可以參考上面對照 { \u0026#34;development\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;dbuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;youiIIDSA2hGpassword\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;mydb\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;express-mysqldb\u0026#34;, \u0026#34;dialect\u0026#34;: \u0026#34;mysql\u0026#34; }, // 略... } 結語 還好當初有在blog的repo設定好Github Aciton和寫README備忘，才可以像現在簡單git push一下就能生成新文章。\n雖然這篇有點水，但至少是好習慣的開始。\n","permalink":"https://zongjia.me/posts/express-mysql-docker/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e距離上一篇文章\u003ca href=\"../node-docker\"\u003e使用Docker建立Nodejs開發環境範本\n\u003c/a\u003e已經有1年啦!\n那時竟然還擔心部落格太多文章，Github page是否會被限制\u003c/p\u003e\n\u003ch1 id=\"nodejs-expressjs--mysql-server\"\u003eNode.js (Express.js + MySQL Server)\u003c/h1\u003e\n\u003ch2 id=\"建置流程快速克隆---趕時間\"\u003e建置流程(快速克隆 -\u0026gt; 趕時間)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e直接使用git clone語法下載範例\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e啟動服務、關閉服務\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 進到目錄底層\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd node-demo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 啟動Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose up -d\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 停止Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose down\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"相對上篇文章的差異\"\u003e相對上篇文章的差異\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累\u003c/li\u003e\n\u003cli\u003edocker-compose.yaml多加MySQL容器、Adminer容器\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eexpress-mysqldb\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emysql:8.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: --\u003cspan style=\"color:#ae81ff\"\u003edefault-authentication-plugin=mysql_native_password\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003erestart\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ealways\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3308:3306\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eenvironment\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# root的密碼\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eMYSQL_ROOT_PASSWORD\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ePyoA2hGpSDQordaDAbuiQIIDS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 預設建立的DB名稱\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eMYSQL_DATABASE\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emydb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# DB使用者的帳號\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eMYSQL_USER\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edbuser\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# DB使用者的密碼\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eMYSQL_PASSWORD\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eyouiIIDSA2hGpassword\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003emy-app資料夾可以注意到\u003ccode\u003econfig/config.json\u003c/code\u003e的host值與MySQL容器名稱相同，這是因為容器的\u003ccode\u003ehostname\u003c/code\u003e預設與名稱相同，其他password等設定可以參考上面對照\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;development\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dbuser\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;youiIIDSA2hGpassword\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;database\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mydb\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;express-mysqldb\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dialect\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mysql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  // 略...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"結語\"\u003e結語\u003c/h2\u003e\n\u003cp\u003e還好當初有在blog的repo設定好Github Aciton和寫README備忘，才可以像現在簡單git push一下就能生成新文章。\u003c/p\u003e","title":"使用Docker建立Node容器+MySQL容器的範本"},{"content":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import\n","permalink":"https://zongjia.me/posts/gen-import-file/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e因為同事目前使用\u003ccode\u003e動態載入\u003c/code\u003e資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\u003c/p\u003e\n\u003cp\u003e我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾，\n最後統一由models/\u003ccode\u003eindex.js\u003c/code\u003e做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用\u003ccode\u003eindex.js\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"好處\"\u003e好處\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e只要在models新增一個新Model檔，不用特別修改\u003ccode\u003eindex.js\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e需要任一Model時只需要引用\u003ccode\u003eindex.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"壞處\"\u003e壞處\u003c/h2\u003e\n\u003cp\u003e失去了開發時可以享受靜態引用的\u003ccode\u003eVSCode\u003c/code\u003e提示(AutoComplete、Intellisense)\u003c/p\u003e\n\u003cp\u003e所以問題是如何保持好處且消除壞處\u003c/p\u003e\n\u003ch1 id=\"思考路境\"\u003e思考路境\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003e動態載入\u003c/code\u003e不會被VSCode支援提示是因為Intellisense只支援靜態分析，\n若改為\u003ccode\u003e添加靜態引用\u003c/code\u003e就失去原本的動態載入的方便。\u003c/p\u003e\n\u003cp\u003e除非\u003ccode\u003e添加靜態引用\u003c/code\u003e這件事本身是\u003ccode\u003e自動\u003c/code\u003e的\u0026hellip;\u003c/p\u003e\n\u003ch1 id=\"解法\"\u003e解法\u003c/h1\u003e\n\u003cp\u003e使用腳本\u003ccode\u003e生成靜態引用\u003c/code\u003e，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到\u003ccode\u003e自動生成靜態引用\u003c/code\u003e的功能。\u003c/p\u003e\n\u003ch1 id=\"範例\"\u003e範例\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kabuto412rock/gen-static-import\"\u003ehttps://github.com/kabuto412rock/gen-static-import\u003c/a\u003e\u003c/p\u003e","title":"如何解決動態載入(Dynamic Import)不支援智能提示"},{"content":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作\n","permalink":"https://zongjia.me/posts/chmod-777/","summary":"\u003ch2 id=\"問題\"\u003e問題:\u003c/h2\u003e\n\u003cp\u003eWSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝\u003ccode\u003ehomebrew\u003c/code\u003e\n想用\u003ccode\u003eVSCode\u003c/code\u003e編輯Docker容器產生的文章後，發現我\u003ccode\u003eVSCode\u003c/code\u003e竟然沒有權限修改檔案。\u003c/p\u003e\n\u003ch2 id=\"解法\"\u003e解法:\u003c/h2\u003e\n\u003cp\u003e辦法很簡單，修改檔案權限全開\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echmod -R \u003cspan style=\"color:#ae81ff\"\u003e777\u003c/span\u003e content/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這篇是用來測試Github action是否還有正常運作\u003c/p\u003e","title":"Linux指令-設定檔案讀寫權限 chmod"},{"content":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.json） $ mkdir -p node-demo/app/src $ cd node-demo $ touch app/package.json \u0026amp;\u0026amp; touch app/src/index.js \u0026amp;\u0026amp; touch docker-compose.yaml 複製以下程式碼貼到對應的檔案 node-demo/app/package.json { \u0026#34;name\u0026#34;: \u0026#34;node-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;nodemon src/index.js\u0026#34; }, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.3\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.15\u0026#34; } } node-demo/app/src/index.js const express = require(\u0026#34;express\u0026#34;); const port = 8000; const app = express(); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.status(200).json({ message: \u0026#34;Hello\u0026#34;, }); }); app.listen(port); node-demo/docker-compose.yaml version: \u0026#39;3.1\u0026#39; services: app: image: node:16-alpine command: sh -c \u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34; ports: - 80:8000 working_dir: /app volumes: - \u0026#39;./app/src:/app/src\u0026#39; - \u0026#39;./app/package.json:/app/package.json\u0026#39; - \u0026#39;./app/yarn.lock:/app/yarn.lock\u0026#39; 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 資料夾結構 ├── app │ ├── package.json │ ├── src │ │ └── index.js │ └── yarn.lock └── docker-compose.yaml docker-compose建置說明 說明一下docker-compose.yaml內的細節，因為這些設定的屬性都是docker-compose up時參考的定義，一定要了解一下。\nversion 是說明使用docker-compose.yaml的語法版本，是給Docker CLI看的版本名稱，此處為3.1\nservices 裡面可以看到app有開始往右靠，是因為app是這份文件的其中一個服務\napp (實際上可以取你自己喜歡的名稱web-app之類的) image: 定義app使用的基礎映像檔，比如說node就是一個已經裝好nodejs、npm的環境。 command: 容器啟動每次都會執行的指令 sh -c 只是從執行後面字串\u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34;的指令，去安裝並執行package.json定義的start腳本 ports: 80:8000 代表本地主機的Port 80 會對應到容器的Port 8000 working_dir: 指定容器內當前所在的目錄/app，因為這樣執行command執行 命令時，才可以找到正確package.json後，正確執行相對位置的檔案 volumes: 掛載本地端的./app到容器內的/app，修改本地端./app內的資料夾同時會修改到容器內的/app的程式碼，反之亦然。 不使用DockerFile的COPY的方式，是因為nodemon會監控檔案的變化，COPY的方式只是啟動時一次性的複製到容器內，而非持續性。 結語 這篇文章開頭先描述過程不解釋原理，只是想避免在操作過程、解釋原理這兩件事交錯，因為我想之後可能也會來看這篇文章，但有時真不會看什麼原理（畢竟已經很清楚了）。\n雖然使用Node.js通常還會結合資料庫，但鑑於這篇是第一篇Docker文章，就先不提高文章知識難度，但最後還是囉唆地多寫一點docker-compose細節的部份。\n下一篇應該彙整併MongoDB，感謝你的閱讀。\n","permalink":"https://zongjia.me/posts/node-docker/","summary":"\u003cp\u003e大綱\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E5%89%8D%E8%A8%80\"\u003e前言\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E7%94%A8docker%E9%83%A8%E5%B1%AC\"\u003e為什麼要用Docker部屬\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#nodejs-expressjs\"\u003eNode.js (Express.js)\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E5%BB%BA%E7%BD%AE%E6%B5%81%E7%A8%8Bver-1%E5%BF%AB%E9%80%9F%E5%85%8B%E9%9A%86---%E8%B6%95%E6%99%82%E9%96%93\"\u003e建置流程Ver 1(快速克隆 -\u0026gt; 趕時間)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%BB%BA%E7%BD%AE%E6%B5%81%E7%A8%8Bver-2-%E6%89%8B%E5%8B%95---%E7%B7%B4%E7%BF%92%E9%81%8E%E7%A8%8B\"\u003e建置流程Ver 2 (手動 -\u0026gt; 練習過程)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#node-demoapppackagejson\"\u003enode-demo/app/package.json\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#node-demoappsrcindexjs\"\u003enode-demo/app/src/index.js\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#node-demodocker-composeyaml\"\u003enode-demo/docker-compose.yaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B\"\u003e資料夾結構\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#docker-compose%E5%BB%BA%E7%BD%AE%E8%AA%AA%E6%98%8E\"\u003edocker-compose建置說明\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#version\"\u003eversion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#services\"\u003eservices\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#app-%E5%AF%A6%E9%9A%9B%E4%B8%8A%E5%8F%AF%E4%BB%A5%E5%8F%96%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AD%A1%E7%9A%84%E5%90%8D%E7%A8%B1web-app%E4%B9%8B%E9%A1%9E%E7%9A%84\"\u003eapp (實際上可以取你自己喜歡的名稱web-app之類的)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%B5%90%E8%AA%9E\"\u003e結語\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\u003c/p\u003e\n\u003cp\u003e想看docker-compose建置Express + MYSQL環境，\u003ca href=\"../express-mysql-docker\"\u003e請走這\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"為什麼要用docker部屬\"\u003e為什麼要用Docker部屬\u003c/h1\u003e\n\u003cp\u003e雖然網路上可以找到很多理由，但我的理由是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用git版本控制，設定檔本身就取代環境建置說明文件\u003c/li\u003e\n\u003cli\u003e不弄髒本地環境，想刪就刪\u003c/li\u003e\n\u003cli\u003e替換依賴容易，Ex: MySQL -\u0026gt; Postgresl\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDocker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以，\n且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\u003c/p\u003e\n\u003cp\u003e廢話不多說，開始部屬吧\u0026hellip;\u003c/p\u003e\n\u003ch1 id=\"nodejs-expressjs\"\u003eNode.js (Express.js)\u003c/h1\u003e\n\u003ch2 id=\"建置流程ver-1快速克隆---趕時間\"\u003e建置流程Ver 1(快速克隆 -\u0026gt; 趕時間)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e直接使用git clone語法下載範例\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e啟動服務、關閉服務\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 進到目錄底層\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd node-demo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 啟動Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose up -d\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 停止Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose down\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e檢查實際結果 http://localhost/\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"建置流程ver-2-手動---練習過程\"\u003e建置流程Ver 2 (手動 -\u0026gt; 練習過程)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e建立相關的檔案＆安裝Express（主要是為了產生package.json）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ mkdir -p node-demo/app/src\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd node-demo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ touch app/package.json \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e touch app/src/index.js \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e touch docker-compose.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e複製以下程式碼貼到對應的檔案\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"node-demoapppackagejson\"\u003enode-demo/app/package.json\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;node-demo\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1.0.0\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index.js\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;scripts\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nodemon src/index.js\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;license\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MIT\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;dependencies\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;express\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^4.17.3\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;devDependencies\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;nodemon\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^2.0.15\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"node-demoappsrcindexjs\"\u003enode-demo/app/src/index.js\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;express\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elisten\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"node-demodocker-composeyaml\"\u003enode-demo/docker-compose.yaml\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3.1\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enode:16-alpine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003esh -c \u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eworking_dir\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./app/src:/app/src\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./app/package.json:/app/package.json\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./app/yarn.lock:/app/yarn.lock\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e啟動服務、關閉服務\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 進到目錄底層\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd node-demo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 啟動Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose up -d\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 停止Docker服務\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode-demo\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ docker-compose down\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e檢查實際結果 http://localhost/\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"資料夾結構\"\u003e資料夾結構\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e├── app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e│   ├── package.json\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e│   ├── src\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e│   │   └── index.js\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e│   └── yarn.lock\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e└── docker-compose.yaml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"docker-compose建置說明\"\u003edocker-compose建置說明\u003c/h2\u003e\n\u003cp\u003e說明一下docker-compose.yaml內的細節，因為這些設定的屬性都是docker-compose up時參考的定義，一定要了解一下。\u003c/p\u003e","title":"[教學] 使用Docker建立Nodejs開發環境範本"},{"content":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：\nsnap refresh hugo --channel=extended 產生一個GithubPage的儲存庫 基本上遇到的問題也只有上面的版本問題， 接著一路照著官方教學建立文章看結果， 最後使用hugo -D 建立靜態的HTML檔案，確認public資料夾是否產生資料。\n接著來搞定github page的設定 我參考的是GihubPage的官方教學\n反正照著做在Github建立出一個 username.github.io的儲存庫（Repository)， 後面發布的部落格就是存在這個儲存庫。 接著準備將本地端內容更新到GithubPage的儲存庫。\ngit init # 在本地端建一個Git儲存庫 git branch -m master main # 把本地預設的分支名稱從master改成main git commit -am \u0026#39;init blog\u0026#39;# 把本地端所有檔案都加入版本管理，並產生一個Git commit紀錄。 git remote add origin https://github.com/你的Github帳號/你的Github帳號.github.io.git git push origin main #把本地儲存庫的main分支版本 -\u0026gt; 遠端origin這個儲存庫 但應該100%會出現以下這個錯誤 當前的git push無法直接合併，因為git自動合併至少需要前面的commit是可以對得上的\nBug2 所以第一件事就是把遠端的分支差異移到本地端 先說明一下底下的指令將會導致一些問題發生，因為這篇文章是篇Debug文章\ngit fetch # 執行git fetch後的結果： 可以注意到本地端多了一個斷掉的分支(Branch)叫做origin/main， 且Commit的時間在比本地端的main還早，因為那是之前在Github上手動建時產生的Commit。\n但這時候如果直接下git merge origin/main會出現fatal: 拒絕合併無關的歷史， 我怎麼知道\u0026hellip;因為我試過\u0026hellip;早知道乖乖用git pull的方式就好。\n挽救解法 重新git pull遠端，然後以rebase的方式解決分支衝突問題\ngit pull origin main --rebase --allow-unrelated-histories 可以注意到main和origin/main終於合併成一條線 終於可以成功git push到遠端\ngit push origin main #將在本地端合併好的main分支，重新推上遠端origin 最終關卡是設定Github Action 01 在blog資料夾開一個檔案 .github/workflows/gh-pages.yml 包含以下內容：\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 02 先讓git版本管理，重新測試GithubAction\ngit add . git commit -am \u0026#39;成功建立Github Action的設定檔\u0026#39; git push ","permalink":"https://zongjia.me/posts/my-first-post/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章，\n因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄，\n而大部分問題都是我自己不照教學走導致需要Debug的文章，\n但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\u003c/p\u003e\n\u003ch2 id=\"bug1-前幾次hugo-server--d啟動正常後來卻出錯\"\u003eBug1 前幾次hugo server -D啟動正常，後來卻出錯?\u003c/h2\u003e\n\u003cp\u003e本來想說安裝extended版本比較好，所以重新用snap安裝穩定版，\n結果啟動伺服器得到以下結果：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo v0.89.4 linux/amd64 BuildDate\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e2021-11-17T14:49:26Z\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eError: Error building site: TOCSS: failed to transform \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ananke/css/main.css\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003etext/css\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e. Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e more information\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBuilt in \u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e ms\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我是在Ubuntu的環境下用 \u003ccode\u003esnap install hugo\u003c/code\u003e安裝Hugo，\n而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版，\n但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\u003c/p\u003e\n\u003ch2 id=\"解法\"\u003e解法\u003c/h2\u003e\n\u003cp\u003e因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esnap remove hugo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esnap install hugo --channel\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eextended\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或是使用官方提供的方法切換版本：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esnap refresh hugo --channel\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eextended\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"產生一個githubpage的儲存庫\"\u003e產生一個GithubPage的儲存庫\u003c/h2\u003e\n\u003cp\u003e基本上遇到的問題也只有上面的版本問題，\n接著一路照著官方教學建立文章看結果，\n最後使用hugo -D 建立靜態的HTML檔案，確認public資料夾是否產生資料。\u003c/p\u003e","title":"[Debug過程] 學Hugo並發布到Github page"}]