[{"content":"因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\n引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。\n安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中\n定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import HomeView from \u0026#39;../views/HomeView.vue\u0026#39; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;home\u0026#39;, component: HomeView }, { path: \u0026#39;/game1\u0026#39;, name: \u0026#39;game1\u0026#39;, // Lazy Loading component: () =\u0026gt; import(\u0026#39;../views/Game1View.vue\u0026#39;) } ] }) export default router 接著App.vue修改成以下結構，RouterView就是渲染對應路由的元件，RouterLink則是像\u0026lt;a\u0026gt;的連結會修改網址的對應路由，只是不會重新整理整個網頁，而是動態載入去切換部分畫面、網址。 // App.vue \u0026lt;script setup\u0026gt; import { RouterView, RouterLink } from \u0026#39;vue-router\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;RouterLink to=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/RouterLink\u0026gt; \u0026lt;RouterLink to=\u0026#34;/game1\u0026#34;\u0026gt;撲克牌連連看\u0026lt;/RouterLink\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;RouterView /\u0026gt; \u0026lt;/template\u0026gt; 如果需要當前路由對應到對應連結時自動套用特定class的話，不一定要在每個\u0026lt;RouterLink\u0026gt;寫:class=\u0026quot;\u0026quot;去做判斷，只需要在\u0026lt;style\u0026gt;...\u0026lt;/style\u0026gt;中定義class .router-link-active即可\n.router-link-active { color: #ff4500; font-weight: bold; } 調整main.js，讓Vue實際掛載第四步驟定義的Router // main.js import router from \u0026#39;./router\u0026#39; // 略 const app = createApp(App); app.use(router); app.mount(\u0026#39;#app\u0026#39;) 使用slot重構遊戲標題 一直以來都是用自訂義的Vue組件都是把props的方式傳值進去， 但其實還有一個slot的用法可以把外部組件傳進去。\nslot用法非常簡單，只需要在元件中添加\u0026lt;slot\u0026gt;...\u0026lt;/slot\u0026gt;， 以當前專案舉例，因為之後\u0026lt;FoxyHeader\u0026gt;可能會添加在每個遊戲上方，因為每個遊戲的標題都不相同，所以在此改用slot做調整。\n// FoxyHeader.vue \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!-- 以下slot就是標題位置 --\u0026gt; \u0026lt;slot\u0026gt;No child component passed in\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;../assets/imgs/foxy01.jpg\u0026#34; class=\u0026#34;foxyHead\u0026#34; /\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/template\u0026gt; 然後在\u0026lt;FoxyHeader\u0026gt;和\u0026lt;/FoxyHeader\u0026gt;中間添加想要的文字或HTML組件，就填充到對應的slot位置，如果沒填充才會顯示上方寫的No child component passed in。\n// Game1view.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;GameBoard /\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 更多的利用slot 將牌桌\u0026lt;GameBoard\u0026gt;改用slot，控制牌桌上卡片排序的職責也拆成一個新元件\u0026lt;CardRow\u0026gt;， 將撲克牌連連看的內容都移入全都移入Game1View.vue，所以後者的樣板變成以下結構:\n// Game1View.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;button style=\u0026#34;font-size: 1.5rem;\u0026#34; @click=\u0026#34;resetGame\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;div style=\u0026#34;font-size:1.5rem;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;當前分數: {{ gameScore }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;時間經過: {{ timerFormat }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;GameBoard\u0026gt; \u0026lt;CardRow\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; :isDone=\u0026#34;card.isDone\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; \u0026lt;/CardRow\u0026gt; \u0026lt;/GameBoard\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 小結 本來想先做牌堆沒做成，倒是學習如何應用Vue Router和slot 程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day05 參考\nhttps://github.com/derycktse/treer https://router.vuejs.org/guide/ ","permalink":"https://kabuto412rock.github.io/posts/it-day5/","summary":"因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\n引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。\n安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中\n定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import HomeView from \u0026#39;../views/HomeView.vue\u0026#39; const router = createRouter({ history: createWebHistory(import.","title":"Day 05 引入Vue Router切換頁面"},{"content":"改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\n為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;card-flip\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isOpen\u0026#34; class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。\n// Card.vue \u0026lt;style scoped\u0026gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i \u0026lt; length; i++) { let rand_to_swap = Math.floor(Math.random()*(length-i)); let tmp = deck[length-1-i]; deck[length-1-i] = deck[rand_to_swap]; deck[rand_to_swap] = tmp; } return deck; } 產生52張洗亂的牌geneateShuffleDeck，這邊的isDone是為了儲存比對成功， 原本在實作上是會消失，但後來發現連連看的版面會跑掉，所以設計isDone為true時卡片會變成顯示不可點擊的小綠卡。 function geneateShuffleDeck() { let deck = []; for (let i = 0; i \u0026lt; 52; i++) { deck.push({ value: i, isOpen: false, isDone: false }); } return shuffle(deck); } 製作撲克牌連連看 簡單就是52張牌洗亂擺在桌上，翻出兩張牌打開有相同的就等於連上， 因為我記憶力沒多好，所以遊戲規則調整成一次最多可以翻六張，超過張數的話牌就會蓋起來!\n雖然樣式很醜，但也做了記錄了分數、當前經過時間和遊戲重置的功能。 因為有越來越多變數用ref存著，在\u0026lt;script setup\u0026gt;中每次對ref的變數取值/設值都要加 .value 越來越冗長，後面想到可以用reactive宣告一個遊戲狀態存多個屬性欄位，尤其是陣列的部分\n// GameBoard.vue const boardCards = ref(geneateShuffleDeck()); const gameScore = ref(0); const game = reactive({ timer: 0, // 當前經過時間 timerInterval: null, // 儲存執行 setInterval()回傳的intevealId，重置會需要用到 deckCards: [], // 將目前打開的牌放到裡面，方便之後比對是否有數字相同的卡 }) 另外遊戲判定成功，我是使用Watcher去看有沒有分數(gameScore)達到182的，才去跳出結束訊息， 但看網路上watch好像都是用在接收API結果觸發時居多。\n// GameBoard.vue watch(gameScore, (newScore, oldScore) =\u0026gt; { if (newScore \u0026gt;= 182) { alert(`遊戲結束，花費時間: ${timerFormat.value} 總分數: ${newScore}!!!`); resetGame(); } }); 實作完後覺得最複雜的可能就是點卡牌後觸發的翻轉功能，判定成功與否真的蠻麻煩， 傳值/取值也是如果可以有個簡單的中央儲存控管就好了。\n最後成功實作出來也玩了幾回，至少真的像在玩一個遊戲的感覺，雖然最多可以點開六張是比較寬鬆。\n以下是實際運作影片: 參考\n簡單又複雜的洗牌演算法 Vue官網的Watchers 明日預計會做紙牌接龍會用到的牌堆設計，感謝觀看!\n","permalink":"https://kabuto412rock.github.io/posts/it-day4/","summary":"改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\n為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;card-flip\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isOpen\u0026#34; class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。\n// Card.vue \u0026lt;style scoped\u0026gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i \u0026lt; length; i++) { let rand_to_swap = Math.","title":"Day 04 調整翻牌效果\u0026實作洗牌\u0026外加撲克牌連連看"},{"content":"原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式\n實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34; :class=\u0026#34;backCardClass\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([\u0026#34;poker-flip\u0026#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.value.findIndex((item) =\u0026gt; item.value === num) boardCards.value[targetIdx].isOpen = !boardCards.value[targetIdx].isOpen; } 今天也有犯一點蠢，發現開牌的狀態一直傳不下去，但toggleFlip函數又有拿到對應的數字和改變的狀態，\n原來是GameBoard.vue中寫的 \u0026lt;Card /\u0026gt; 元件沒寫屬性 :isOpen 導致程式沒報錯，但有執行異常的情況\u0026hellip;\n今日進度 卡牌翻面有了，點擊後可翻開/覆蓋卡牌，但CSS水平反轉的動畫只套用到蓋牌(開牌就沒動畫)， 雖然有發現Vue3的Transition寫法但奈何悟性不足今天無法應用在上面 Vue3的Transition的寫法也是ChatGPT跟我說的，雖然是錯的居多(範例給我 \u0026lt;transition\u0026gt; 但第一字母其實應該大寫才對XD)，但身為前端菜逼八也是先把它當成關鍵字搜尋引擎使用\n發牌排到明天再做 參考資料\n2018鐵人賽文章-撲克翻轉 ","permalink":"https://kabuto412rock.github.io/posts/it-day3/","summary":"原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式\n實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34; :class=\u0026#34;backCardClass\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([\u0026#34;poker-flip\u0026#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.","title":"Day 03 完成卡牌自動翻面的效果，但還不完整"},{"content":"動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\n意外發現原來App.vue檔(放置卡牌區的元件)在\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;定義的class雖然會套用到App.vue的\u0026lt;template\u0026gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue\u0026lt;template\u0026gt;內使用相同class名稱的元素\n修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:\nmain { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。\nheader { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\n因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\n複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\n卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\n// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在\u0026lt;script setup\u0026gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 \u0026lt;template\u0026gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\n// Card.vue const pokerValue = props.value; // 對應撲克花色符號，Ex: ♣A const content = PokerValuesMap[pokerValue].content; // 對應撲克顏色class const numberClass = PokerValuesMap[pokerValue].isRed ? \u0026#39;card card-red\u0026#39; : \u0026#39;card\u0026#39;; 卡片也實際使用到 :class 去決定要顯示指定的class，畢竟紅心/梅花是套用紅色。 Card.vue的樣板很簡單是因為把一些轉換顏色物件的部分移到我自訂義的uitls/constants.js進行map對照產生Card實際顯示的花色符號。\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div :class=\u0026#34;numberClass\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 使用到v-for去執行迴圈在GameBoard元件產生52張牌\n// GameBoard.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;game-board\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-row\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 今日進度 明日預計製作發牌和卡牌自動翻面的效果\n參考: 學習 CSS 版面配置 https://zh-tw.learnlayout.com/ ChatGPT\n","permalink":"https://kabuto412rock.github.io/posts/it-day2/","summary":"動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\n意外發現原來App.vue檔(放置卡牌區的元件)在\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;定義的class雖然會套用到App.vue的\u0026lt;template\u0026gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue\u0026lt;template\u0026gt;內使用相同class名稱的元素\n修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:\nmain { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。\nheader { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\n因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\n複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\n卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\n// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在\u0026lt;script setup\u0026gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 \u0026lt;template\u0026gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\n// Card.vue const pokerValue = props.","title":"Day 02 調整css調整桌面\u0026產生52張紙牌"},{"content":"前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。\n原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。\n中短期目標 目前預計想完成的目標如下:\n前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame \u0026amp;\u0026amp; npm run dev 2. 在新專案中建好git repo\ngit init git commit -am \u0026#39;initial\u0026#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip; 照理來說狐狸圖應該要上下對齊才對! 小結 記錄好自己的目標後，Vue建立專案和元件的方式跟React很像， 後面git的步驟只是記錄我是雷包，還好是因為空專案才可以放心執行git push -f\n明日預計來研究CSS怎麼排版\u0026hellip;太久沒碰都忘記了QwQ\n還要想怎麼顯示一張張卡牌在畫面上，真的是毫無信心，就看明天能否靠ChatGPT拯救這一切吧\n參考 Vue建立專案\n","permalink":"https://kabuto412rock.github.io/posts/it-day1/","summary":"前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。\n原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。\n中短期目標 目前預計想完成的目標如下:\n前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame \u0026amp;\u0026amp; npm run dev 2. 在新專案中建好git repo\ngit init git commit -am \u0026#39;initial\u0026#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip; 照理來說狐狸圖應該要上下對齊才對!","title":"Day 01 開發遊戲前先設定目標策略"},{"content":" 前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷\n參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已\n補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!\n在提到參賽主題之前，我想先說明工作後的經歷\n工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\n名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗\n可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\n日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\n當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\n第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\n那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\n那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\n話題扯遠了!\n在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\n這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\n後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\n技術總是層出不窮，身為工程師也只能適應變化 by 我\n現在的工作? 待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\n或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\n參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\n因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，\n但這次想從前端開始著手製作小遊戲!預計會採用不熟悉的Vue3開發專案，希望也能成為下個敲門磚。\n結論 打算報名主題 SideProject30 ，標題就暫定 毫無自信的開發Web遊戲接龍-成為創造龍的英雄之路\n接下來幾天會先摸索一下能用的工具， 姑且就先報名吧? 參賽前的內心話，就先到這吧! ","permalink":"https://kabuto412rock.github.io/posts/adventure-again/","summary":"前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷\n參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已\n補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!\n在提到參賽主題之前，我想先說明工作後的經歷\n工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\n名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗\n可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\n日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\n當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\n第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\n那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\n那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\n話題扯遠了!\n在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\n這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\n後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\n技術總是層出不窮，身為工程師也只能適應變化 by 我\n現在的工作? 待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\n或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\n參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\n因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，","title":"參加2023鐵人賽前的自我回顧"},{"content":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.json的host值與MySQL容器名稱相同，這是因為容器的hostname預設與名稱相同，其他password等設定可以參考上面對照 { \u0026#34;development\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;dbuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;youiIIDSA2hGpassword\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;mydb\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;express-mysqldb\u0026#34;, \u0026#34;dialect\u0026#34;: \u0026#34;mysql\u0026#34; }, // 略... } 結語 還好當初有在blog的repo設定好Github Aciton和寫README備忘，才可以像現在簡單git push一下就能生成新文章。\n雖然這篇有點水，但至少是好習慣的開始。\n","permalink":"https://kabuto412rock.github.io/posts/express-mysql-docker/","summary":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.","title":"使用Docker建立Node容器+MySQL容器的範本"},{"content":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import\n","permalink":"https://kabuto412rock.github.io/posts/gen-import-file/","summary":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import","title":"如何解決動態載入(Dynamic Import)不支援智能提示"},{"content":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作\n","permalink":"https://kabuto412rock.github.io/posts/chmod-777/","summary":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作","title":"Linux指令-設定檔案讀寫權限 chmod"},{"content":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.json） $ mkdir -p node-demo/app/src $ cd node-demo $ touch app/package.json \u0026amp;\u0026amp; touch app/src/index.js \u0026amp;\u0026amp; touch docker-compose.yaml 複製以下程式碼貼到對應的檔案 node-demo/app/package.json { \u0026#34;name\u0026#34;: \u0026#34;node-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;nodemon src/index.js\u0026#34; }, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.3\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.15\u0026#34; } } node-demo/app/src/index.js const express = require(\u0026#34;express\u0026#34;); const port = 8000; const app = express(); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.status(200).json({ message: \u0026#34;Hello\u0026#34;, }); }); app.listen(port); node-demo/docker-compose.yaml version: \u0026#39;3.1\u0026#39; services: app: image: node:16-alpine command: sh -c \u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34; ports: - 80:8000 working_dir: /app volumes: - \u0026#39;./app/src:/app/src\u0026#39; - \u0026#39;./app/package.json:/app/package.json\u0026#39; - \u0026#39;./app/yarn.lock:/app/yarn.lock\u0026#39; 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 資料夾結構 ├── app │ ├── package.json │ ├── src │ │ └── index.js │ └── yarn.lock └── docker-compose.yaml docker-compose建置說明 說明一下docker-compose.yaml內的細節，因為這些設定的屬性都是docker-compose up時參考的定義，一定要了解一下。\nversion 是說明使用docker-compose.yaml的語法版本，是給Docker CLI看的版本名稱，此處為3.1\nservices 裡面可以看到app有開始往右靠，是因為app是這份文件的其中一個服務\napp (實際上可以取你自己喜歡的名稱web-app之類的) image: 定義app使用的基礎映像檔，比如說node就是一個已經裝好nodejs、npm的環境。 command: 容器啟動每次都會執行的指令 sh -c 只是從執行後面字串\u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34;的指令，去安裝並執行package.json定義的start腳本 ports: 80:8000 代表本地主機的Port 80 會對應到容器的Port 8000 working_dir: 指定容器內當前所在的目錄/app，因為這樣執行command執行 命令時，才可以找到正確package.json後，正確執行相對位置的檔案 volumes: 掛載本地端的./app到容器內的/app，修改本地端./app內的資料夾同時會修改到容器內的/app的程式碼，反之亦然。 不使用DockerFile的COPY的方式，是因為nodemon會監控檔案的變化，COPY的方式只是啟動時一次性的複製到容器內，而非持續性。 結語 這篇文章開頭先描述過程不解釋原理，只是想避免在操作過程、解釋原理這兩件事交錯，因為我想之後可能也會來看這篇文章，但有時真不會看什麼原理（畢竟已經很清楚了）。\n雖然使用Node.js通常還會結合資料庫，但鑑於這篇是第一篇Docker文章，就先不提高文章知識難度，但最後還是囉唆地多寫一點docker-compose細節的部份。\n下一篇應該彙整併MongoDB，感謝你的閱讀。\n","permalink":"https://kabuto412rock.github.io/posts/node-docker/","summary":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.","title":"[教學] 使用Docker建立Nodejs開發環境範本"},{"content":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：\nsnap refresh hugo --channel=extended 產生一個GithubPage的儲存庫 基本上遇到的問題也只有上面的版本問題， 接著一路照著官方教學建立文章看結果， 最後使用hugo -D 建立靜態的HTML檔案，確認public資料夾是否產生資料。\n接著來搞定github page的設定 我參考的是GihubPage的官方教學\n反正照著做在Github建立出一個 username.github.io的儲存庫（Repository)， 後面發布的部落格就是存在這個儲存庫。 接著準備將本地端內容更新到GithubPage的儲存庫。\ngit init # 在本地端建一個Git儲存庫 git branch -m master main # 把本地預設的分支名稱從master改成main git commit -am \u0026#39;init blog\u0026#39;# 把本地端所有檔案都加入版本管理，並產生一個Git commit紀錄。 git remote add origin https://github.com/你的Github帳號/你的Github帳號.github.io.git git push origin main #把本地儲存庫的main分支版本 -\u0026gt; 遠端origin這個儲存庫 但應該100%會出現以下這個錯誤 當前的git push無法直接合併，因為git自動合併至少需要前面的commit是可以對得上的\nBug2 所以第一件事就是把遠端的分支差異移到本地端 先說明一下底下的指令將會導致一些問題發生，因為這篇文章是篇Debug文章\ngit fetch # 執行git fetch後的結果： 可以注意到本地端多了一個斷掉的分支(Branch)叫做origin/main， 且Commit的時間在比本地端的main還早，因為那是之前在Github上手動建時產生的Commit。\n但這時候如果直接下git merge origin/main會出現fatal: 拒絕合併無關的歷史， 我怎麼知道\u0026hellip;因為我試過\u0026hellip;早知道乖乖用git pull的方式就好。\n挽救解法 重新git pull遠端，然後以rebase的方式解決分支衝突問題\ngit pull origin main --rebase --allow-unrelated-histories 可以注意到main和origin/main終於合併成一條線 終於可以成功git push到遠端\ngit push origin main #將在本地端合併好的main分支，重新推上遠端origin 最終關卡是設定Github Action 01 在blog資料夾開一個檔案 .github/workflows/gh-pages.yml 包含以下內容：\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 02 先讓git版本管理，重新測試GithubAction\ngit add . git commit -am \u0026#39;成功建立Github Action的設定檔\u0026#39; git push ","permalink":"https://kabuto412rock.github.io/posts/my-first-post/","summary":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：","title":"[Debug過程] 學Hugo並發布到Github page"}]