[{"content":"前言 今日要製作結算牌堆，跟中間的7疊牌不同，結算牌堆只有4堆且只能允許同花色疊在上面，必須由小到大(A-\u0026gt;K)放上去，放上去的牌會擋住底下的牌。\n修正發牌區拖曳Bug 在開發今日功能前，測試遊玩發牌區到中間七牌堆發現能任意插到七牌堆的中間， 在函數dealerMove中補上evt.draggedContext.futureIndex == cardStacks[to].length的判斷後才正常，以下是修正後的程式碼:\n/** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 只能移動至目標牌堆的最後一張牌 let result = futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.value = () =\u0026gt; { cardStacks.delaerStacks = cardStacks.delaerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } 製作結算牌堆樣板 看一下草稿圖，接著想像畫面應該會有四個長方塊並排，四個長方都有個底圖對應花色， 底圖上方都可以擺一張牌。\n跟製作發牌區\u0026lt;DealerArea\u0026gt;相同，打算先做出元件\u0026lt;FinishedArea\u0026gt;在整合進原本的接龍區塊， 以下是目前的樣板程式碼:\n// FinishedArea.vue \u0026lt;template\u0026gt; \u0026lt;div style=\u0026#34;display: flex;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card club\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card diamond\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card heart\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card spade\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 補上拖曳的樣板前，這部分會需要考慮四個牌堆的資料， 所以資料結構就設計成四個花色各自對應1個Card陣列的狀態\n為了之後測試方便，僅先將各花色A放入對應陣列。\n// FinishedArea.vue const fourCards = reactive({ club: [], // 梅花 diamond: [],// 方塊 heart: [], // 紅心 spade: [], // 黑桃 }); onMounted(() =\u0026gt; { const cards = geneateDeck(52, true); fourCards.club = cards.slice(0, 1); fourCards.diamond = cards.slice(13, 14); fourCards.heart = cards.slice(26, 27); fourCards.spade = cards.slice(39, 40); }) 接著將樣板調整成有添加draggable元件，因為沒有添加:move屬性所以預設同個group的\u0026lt;draggable\u0026gt;內的元素是可以互相堆疊。\n// FinishedArea.vue \u0026lt;template\u0026gt; \u0026lt;div style=\u0026#34;display: flex;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card club\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.club\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card diamond\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.diamond\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card heart\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.heart\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card spade\u0026#34;\u0026gt; \u0026lt;draggable :list=\u0026#34;fourCards.spade\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;drag-cards\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 上方有添加class=\u0026quot;drag-cards\u0026quot;在\u0026lt;draggable\u0026gt;上面是為了讓無拖曳元素的牌堆區可以自動撐到最高最寬， 因為預設拖曳目標的有效空間就是\u0026lt;draggable\u0026gt;元件本身的寬高，所以才特地補這個CSS。\n/* FinishedArea.vue */ .drag-cards { width: 100%; height: 100%; } 小結 今天先定義結算牌堆\u0026lt;FinishedArea\u0026gt;的樣板、資料結構，明日再來嘗試整合進接龍頁面，研究要如何相容不同的疊牌拖曳規則😊\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day17 ","permalink":"https://kabuto412rock.github.io/posts/it-day17/","summary":"前言 今日要製作結算牌堆，跟中間的7疊牌不同，結算牌堆只有4堆且只能允許同花色疊在上面，必須由小到大(A-\u0026gt;K)放上去，放上去的牌會擋住底下的牌。\n修正發牌區拖曳Bug 在開發今日功能前，測試遊玩發牌區到中間七牌堆發現能任意插到七牌堆的中間， 在函數dealerMove中補上evt.draggedContext.futureIndex == cardStacks[to].length的判斷後才正常，以下是修正後的程式碼:\n/** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 只能移動至目標牌堆的最後一張牌 let result = futureIndex == cardStacks[to].length; // 檢查疊牌順序、花色是否正確 result = result \u0026amp;\u0026amp; checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.value = () =\u0026gt; { cardStacks.delaerStacks = cardStacks.delaerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } 製作結算牌堆樣板 看一下草稿圖，接著想像畫面應該會有四個長方塊並排，四個長方都有個底圖對應花色， 底圖上方都可以擺一張牌。\n跟製作發牌區\u0026lt;DealerArea\u0026gt;相同，打算先做出元件\u0026lt;FinishedArea\u0026gt;在整合進原本的接龍區塊， 以下是目前的樣板程式碼:\n// FinishedArea.vue \u0026lt;template\u0026gt; \u0026lt;div style=\u0026#34;display: flex;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card club\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card diamond\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card heart\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card spade\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 補上拖曳的樣板前，這部分會需要考慮四個牌堆的資料， 所以資料結構就設計成四個花色各自對應1個Card陣列的狀態","title":"Day 17 實作結算牌堆元件(一)樣板\u0026資料結構"},{"content":"前言 今天要來處理\u0026lt;DealerArea\u0026gt;內的元素如何整合拖曳移動到7個牌堆， 這部分會拆成2個部分來看:\n可將\u0026lt;DealerArea\u0026gt;卡牌移入至牌堆上方，且遵守移動遊戲規則的條件 其他牌堆的牌無法移入\u0026lt;DealerArea\u0026gt;牌堆中 實作將\u0026lt;DealerArea\u0026gt;卡牌移入牌堆 這邊在DragDemo.vue中設定提供給發牌區\u0026lt;DealerArea\u0026gt;判斷用的:move函數，因為這個函數不像函數limitLocalMove函數是同時給7個牌堆各自使用，所以可以看到沒有特別提到from的部分，因為不用特別想就可以知道一定是來自(from)發牌區。\n如果不清楚limitLocalMove是做什麼的，這部分從 第10天~第12天 的文章都有提到，主要是對應\u0026lt;draggable\u0026gt;元件的:move函數判斷使否可拖曳成功。\n檢查疊牌遊戲規則的部分就由函數checkNextOk判斷，幾天前寫好的函數重新複用了👍 這邊只要result回傳true就會讓卡牌移動自動產生變化。\n// DragDemo.vue /** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); return result; } 樣板的部分就是小調整而已:\n// DragDemo.vue \u0026lt;DealerArea :deck=\u0026#34;cardStacks.delaerStacks\u0026#34; :moveCard=\u0026#34;dealerMove\u0026#34; /\u0026gt; 結果看起來拖曳過去是沒問題，但本該移動過去的元素也仍留在原地， 如下圖GIF出現了2個梅花9，此為禁忌的二重身問題💀必須修正。 修正陰魂不散的元素 因為還是有拖曳成功，只是舊資料殘留在發牌區的陣列cardStacks.delaerStacks，所以只要在拖曳完成時，將發牌區的陣列去除已經發出去的那一張牌即可，以下是修正後的程式碼:\n// DragDemo.vue function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.value = () =\u0026gt; { cardStacks.delaerStacks = cardStacks.delaerStacks.filter(card =\u0026gt; card.value !== dealerCard.value); changeOption.value = null; }; } return result; } changeOption的使用在第11天有提到的。\n小結 今天主要就是完成單方面的拖曳和修Bug，本來還想說要如何防止其他卡堆的牌移入\u0026lt;DealerArea\u0026gt;的牌堆中， 後來發現這件事不會發生。\n反而是實現\u0026lt;DealerArea\u0026gt;專屬的函數dealerMove後意外發現的Bug-二重身， 這可能是因為\u0026lt;DealerArea\u0026gt;內拖曳的撲克牌是使用computed計算出來的陣列，被移除了元素也不會影響原本上游的陣列。\n明日預計實作 結算牌堆，敬請期待!\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day16 參考\nDay 10 拖曳紙牌的效果(二)限制內部拖曳 Day 11 拖曳紙牌的效果(三)如何一次拖曳多張卡牌 Day 12 實作拖曳卡牌只能置放到目標牌堆的牌尾、蓋牌無法拖曳 ","permalink":"https://kabuto412rock.github.io/posts/it-day16/","summary":"前言 今天要來處理\u0026lt;DealerArea\u0026gt;內的元素如何整合拖曳移動到7個牌堆， 這部分會拆成2個部分來看:\n可將\u0026lt;DealerArea\u0026gt;卡牌移入至牌堆上方，且遵守移動遊戲規則的條件 其他牌堆的牌無法移入\u0026lt;DealerArea\u0026gt;牌堆中 實作將\u0026lt;DealerArea\u0026gt;卡牌移入牌堆 這邊在DragDemo.vue中設定提供給發牌區\u0026lt;DealerArea\u0026gt;判斷用的:move函數，因為這個函數不像函數limitLocalMove函數是同時給7個牌堆各自使用，所以可以看到沒有特別提到from的部分，因為不用特別想就可以知道一定是來自(from)發牌區。\n如果不清楚limitLocalMove是做什麼的，這部分從 第10天~第12天 的文章都有提到，主要是對應\u0026lt;draggable\u0026gt;元件的:move函數判斷使否可拖曳成功。\n檢查疊牌遊戲規則的部分就由函數checkNextOk判斷，幾天前寫好的函數重新複用了👍 這邊只要result回傳true就會讓卡牌移動自動產生變化。\n// DragDemo.vue /** 發牌區移動 */ function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); return result; } 樣板的部分就是小調整而已:\n// DragDemo.vue \u0026lt;DealerArea :deck=\u0026#34;cardStacks.delaerStacks\u0026#34; :moveCard=\u0026#34;dealerMove\u0026#34; /\u0026gt; 結果看起來拖曳過去是沒問題，但本該移動過去的元素也仍留在原地， 如下圖GIF出現了2個梅花9，此為禁忌的二重身問題💀必須修正。 修正陰魂不散的元素 因為還是有拖曳成功，只是舊資料殘留在發牌區的陣列cardStacks.delaerStacks，所以只要在拖曳完成時，將發牌區的陣列去除已經發出去的那一張牌即可，以下是修正後的程式碼:\n// DragDemo.vue function dealerMove(evt) { const to = getDomName(evt.to); const dealerCard = evt.draggedContext.element; // 檢查疊牌順序、花色是否正確 const result = checkNextOk(cardStacks[to], dealerCard); if (result) { changeOption.","title":"Day16 接龍發牌區功能實作(三)拖曳與疊牌區整合"},{"content":"前言 今天要來補強昨日缺少的拖曳功能和將整個頁面封裝成提供整合至接龍遊戲的元件發牌區。\n移牌區改為可拖曳 首先將移牌區的部分調整成從原生HTML元素div替換成這幾天都在使用draggable元件，程式碼如下:\n\u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;draggable :list=\u0026#34;canTakeCards\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;list-group\u0026#34; \u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; 發牌區調整動畫 雖然移牌區感覺在加牌的時候應該要套用動畫，但無奈vue.draggable.next的transition-group有Bug存在且已被官方棄養，在issue也有許多類似問題issue with transition-group in composition API就不細講。\n不論是Vue2使用的vue.draggable或Vue3使用的vue.draggable.next都是對SortableJS進行包裝的容器，基本上不滿意的話只能自己重封裝實現只是CP值不高，所以我不考慮這麼做。\n這不代表選擇放棄動畫，打算以CSS來實現以下動畫效果。 實際調整 首先調整樣板程式碼，主要是針對有牌時添加對應的class\u0026quot;card-back animtion\u0026quot;，也順便將點擊事件@click移到外層div:\n\u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%;\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; class=\u0026#34;card-back animation\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 添加對應CSS實現點擊後往左快速位移一次的效果\n@keyframes move-left { from { transform: translateX(0rem); } to { transform: translateX(-100rem); } } .card-back.animation:active { animation: move-left 0.55s ease; animation-iteration-count: 1; } 添加對應CSS當滑鼠移到發牌堆上方使其左右搖晃的效果\n@keyframes swing { 0% { transform: rotate(-5deg); } 50% { transform: rotate(5deg); } 100% { transform: rotate(-5deg); } } .card-back:hover { cursor: pointer; animation: swing 1s ease infinite; } 封裝成元件 在目錄 src/components 內新增檔案DealerArea.vue，並將DealerAreaView.vue的程式碼完全複製到新檔案DealerArea.vue， 但需要調整卡牌陣列deck從外部取得，所以DealerArea.vue程式碼需將變數deck改寫成以下形式:\n// DealerArea.vue const { deck } = defineProps( { deck: { type: Array, default: () =\u0026gt; [] } } ) 實際在外部引用 因為卡牌是在onMounted時才會初始化cardStacks內的每個陣列， 但不清楚為什麼初始化結束後，\u0026lt;DealerArea /\u0026gt;仍顯示無牌可用。\n/** DragDemo.vue */ \u0026lt;DealerArea :deck=\u0026#34;cardStacks.delaerStacks\u0026#34; /\u0026gt; 查詢網路資料後，才知道原來子組件props如果會整個異動的話需要用watch去監控變化才會重新觸發渲染， 所以再次調整DealerArea.vue的程式碼:\n// DealerArea.vue const props = defineProps( { deck: { type: Array, default: () =\u0026gt; [] }, moveCard: { type: Function, default: () =\u0026gt; { return false; } } } ) const deck = ref([]); watch(() =\u0026gt; props.deck, (newVal) =\u0026gt; { deck.value = newVal; }); 添加上方程式碼後，這裡\u0026lt;DealerArea\u0026gt;已可以根據props.deck的變動去做相對應的畫面更新。\n但可以注意到defineProps突然多出moveCard屬性，實際上這是實作元件\u0026lt;DealerArea\u0026gt;忘記考慮被拖曳到其他區塊的行為。\n所以再次調整DealerArea.vue的樣板，將\u0026lt;draggable的屬性:move對應到函數props.moveCard製作額外判斷是否可以被移出的函數，目前預設為回傳false的函數可以阻止元件內部\u0026lt;draggable\u0026gt;內的元素被移入到別的\u0026lt;draggable元件。\n在樣板中使用props中的屬性moveCard為空，則會自動套用props屬性定義的預設值default\n// DealerArea.vue \u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;draggable :list=\u0026#34;canTakeCards\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;list-group\u0026#34; :move=\u0026#34;moveCard\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; 小結 今天將昨天的頁面轉成元件DealerArea並添加一些CSS動畫，也學到子元件需要監聽外部props變動重新渲染的前端做法。 明日將實作讓\u0026lt;DealerArea\u0026gt;內移牌區內的牌有辦法實際拖曳至中間的7個牌堆上並一樣遵守拖曳的遊戲規則。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day15 參考 在 CSS 中模擬 Onclick 事件 CSS左右搖晃 Re-render a component when prop changes ","permalink":"https://kabuto412rock.github.io/posts/it-day15/","summary":"前言 今天要來補強昨日缺少的拖曳功能和將整個頁面封裝成提供整合至接龍遊戲的元件發牌區。\n移牌區改為可拖曳 首先將移牌區的部分調整成從原生HTML元素div替換成這幾天都在使用draggable元件，程式碼如下:\n\u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;draggable :list=\u0026#34;canTakeCards\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; class=\u0026#34;list-group\u0026#34; \u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; 發牌區調整動畫 雖然移牌區感覺在加牌的時候應該要套用動畫，但無奈vue.draggable.next的transition-group有Bug存在且已被官方棄養，在issue也有許多類似問題issue with transition-group in composition API就不細講。\n不論是Vue2使用的vue.draggable或Vue3使用的vue.draggable.next都是對SortableJS進行包裝的容器，基本上不滿意的話只能自己重封裝實現只是CP值不高，所以我不考慮這麼做。\n這不代表選擇放棄動畫，打算以CSS來實現以下動畫效果。 實際調整 首先調整樣板程式碼，主要是針對有牌時添加對應的class\u0026quot;card-back animtion\u0026quot;，也順便將點擊事件@click移到外層div:\n\u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%;\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; class=\u0026#34;card-back animation\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 添加對應CSS實現點擊後往左快速位移一次的效果","title":"Day15 接龍發牌區功能實作(二)拖曳功能及CSS發牌動畫"},{"content":"為了實現接龍發牌區功能，必須先思考如何讓撲克牌循環利用，這部分程式碼我是先拆一個頁面來練習實作，避免單一頁面的程式碼邏輯太過混亂。\n發牌區的樣板 今日實作的目標會是一個左邊移牌區右邊發牌堆結合在一起的， 點擊發牌堆會將牌發到移牌區顯示，移牌區最多同時顯示三張牌。 實作的樣板程式碼 // DealerAreaView.vue \u0026lt;GameBoard\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1.5fr 1fr; gap:3rem; width: fit-content;\u0026#34;\u0026gt; \u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: repeat(3, 3rem);\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;card in canTakeCards\u0026#34; :key=\u0026#34;card.value\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%; \u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; @click=\u0026#34;clickCard\u0026#34; class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/GameBoard\u0026gt; 可以注意到發牌堆使用\u0026lt;Transition\u0026gt;包裹，裡面的元件使用v-if和v-else-if去判斷三種情況顯示元件， 這邊使用到的deckState是一個計算結果。\n在說明deckState之前，先講一下此範例使用到的變數index、deck。\nconst index = ref(0); const deck = ref(geneateDeck(14, true)); deck就是包含著發牌堆+移牌區的卡牌陣列，日後會改用屬性props傳進元件， 但因為今天在練習實作就先自己產生。\nindex則是對應發到第幾張牌的指標(Pointer)，採用指標的原因是可以不用將把發牌堆、移牌區分成兩個陣列儲存，當指標index為0時代表移牌區沒有牌，index為1時則代表已發到第1張牌，以此類推。\n回到變數deckState就是用指標位置和牌堆數量計算出來發牌堆會有3種顯示狀態:\n發牌堆和移牌區都沒牌時，顯示無牌可用 (empty) 發牌堆已發完牌但移牌區仍有牌，則顯示重新循環 (full) 發牌堆還有牌可以發，顯示撲克卡背 (normal) const deckState = computed(() =\u0026gt; { if (index.value === 0 \u0026amp;\u0026amp; deck.value.length == 0) return \u0026#39;empty\u0026#39;; if (index.value === deck.value.length) return \u0026#39;full\u0026#39;; return \u0026#39;normal\u0026#39;; }); 移牌區顯示的撲克陣列canTakeCards也是用index和deck計算出來的最多回傳3個元素的陣列， 因為Array.slice只會回傳複製陣列，所以不會影響deck陣列本身。\n/** 玩家可拿取的牌 */ const canTakeCards = computed(() =\u0026gt; { let startIndex = index.value \u0026lt; 3 ? 0 : index.value - 3; return deck.value.slice(startIndex, index.value); }); 點擊發牌堆觸發的函數也只是改變指標index往前移動，間接影響上面使用computed計算出來的結果。\nfunction clickCard() { index.value++; if (index.value \u0026gt; deck.value.length) { index.value = 0; } } 小結 發牌區內部的部分使用陣列指標的方式去判斷，可以減少對陣列本身的push和pop等異動原堆疊資料的行為。\n目前移牌區沒有使用到\u0026lt;draggable\u0026gt;包裹，實際上移牌區的牌應該要可被拖曳至中心的集牌區進行移動，但中心的集牌區的牌不能被拖回發牌區的移牌區，這部分明天才會做但還是先提一下。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day14 ","permalink":"https://kabuto412rock.github.io/posts/it-day14/","summary":"為了實現接龍發牌區功能，必須先思考如何讓撲克牌循環利用，這部分程式碼我是先拆一個頁面來練習實作，避免單一頁面的程式碼邏輯太過混亂。\n發牌區的樣板 今日實作的目標會是一個左邊移牌區右邊發牌堆結合在一起的， 點擊發牌堆會將牌發到移牌區顯示，移牌區最多同時顯示三張牌。 實作的樣板程式碼 // DealerAreaView.vue \u0026lt;GameBoard\u0026gt; \u0026lt;div class=\u0026#34;text\u0026#34;\u0026gt;發牌區\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1.5fr 1fr; gap:3rem; width: fit-content;\u0026#34;\u0026gt; \u0026lt;!-- 移牌區 - 左邊水平疊牌最多三張 --\u0026gt; \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: repeat(3, 3rem);\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;card in canTakeCards\u0026#34; :key=\u0026#34;card.value\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 發牌堆 --\u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; width: 100%;height: 100%; \u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;slide-left\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;deckState == \u0026#39;empty\u0026#39;\u0026#34;\u0026gt;無牌可用\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;full\u0026#39;\u0026#34; class=\u0026#34;card\u0026#34; @click=\u0026#34;clickCard\u0026#34;\u0026gt;重新循環\u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;deckState == \u0026#39;normal\u0026#39;\u0026#34; @click=\u0026#34;clickCard\u0026#34; class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/GameBoard\u0026gt; 可以注意到發牌堆使用\u0026lt;Transition\u0026gt;包裹，裡面的元件使用v-if和v-else-if去判斷三種情況顯示元件， 這邊使用到的deckState是一個計算結果。","title":"Day14 接龍發牌區功能實作(一)發牌循環"},{"content":"今日預計實作項目:\n☑️ 只能對牌尾進行翻牌 ☑️ 牌尾自動翻牌 ☑️ 限制疊牌順序 只能對牌尾進行翻牌 新增函數openCard(cards, element)因為需要確認點擊卡牌確實是在牌尾， 所以需要參數cards對應原本的卡牌陣列、參數element對應點擊的卡牌元素。\n檢查牌尾就單純檢查element的數字(value)是否跟陣列cards的最後一筆數字相同， 在這邊的情況不用擔心cards的長度為0，因為所在牌堆沒有卡牌自然就不會渲染使用openCard函數的\u0026lt;Card\u0026gt;元件。\n/** 開牌函數 * @param {Card[]} cards * @param {Card} element */ function openCard(cards, element) { let same = cards[cards.length - 1].value == element.value; if (same) { element.isOpen = true; } } 調整每一個\u0026lt;Card\u0026gt;元件的@click監聽，以下以第1牌堆的樣板舉例:\n\u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; @click=\u0026#34;openCard(cardStacks.first, element)\u0026#34; /\u0026gt; 第2、3牌堆只需將cardStacks.first中的first替換成對應陣列second和third， 雖然下一步牌尾會自動翻牌不需要人去手動翻開、但還是要避免有人去對非牌尾的開牌。\n牌尾自動翻牌 這部分我是依賴Vue本身的watch去監聽牌堆的變化， 跟上一個步驟很像的取得最後一張牌lastCard並打開isOpen = true，不一樣的是需要真的檢查牌堆是否為空的情況，避免出現undefined的Error\nwatch(cardStacks, (stacks) =\u0026gt; { // 檢查每組牌堆最後一張 [\u0026#39;first\u0026#39;, \u0026#39;second\u0026#39;, \u0026#39;third\u0026#39;].forEach(cardName =\u0026gt; { if (stacks[cardName].length \u0026gt; 0) { const lastCard = stacks[cardName][stacks[cardName].length - 1]; lastCard.isOpen = true; } }); }); 限制疊牌順序 這邊先解釋以下在紙牌接龍的中心會有七個疊牌區， 疊牌的規局會是不同花色以黑紅交錯，黑牌後面只能接紅牌，紅牌後面只能接黑牌， 且數字必須是前面的減一，不能多也不能少，例如梅花K後面只能接方塊Q或紅心Q\n例外: 疊牌區若為空則可以放任意花色的K\n為了開發方便測試，我決定直接把畫面改成有七個牌堆並且改回垂直疊牌，且牌堆的牌數數量依序為1、2、\u0026hellip;7張， 這部分程式就略過。\n主要是做了一個檢查這一張牌是否能放上去的函數，以刪去法的邏輯實現檢查:\n卡堆為空，擺放數字不為K則失敗 卡牌顏色相同則失敗 原卡堆最後一張的數字減1等於擺放數字則成功，否則失敗 以下是實現的程式碼:\n程式碼中以回傳布林值true、false表達成功、失敗\n/** 檢查下一張牌是否可以放上去 * @param {Card[]} targetDeck * @param {Card} card * * @returns {Boolean} 是否可以放上去 */ function checkNextOk(targetDeck, card) { // 如果目標為空牌堆，則只有K可以放上去 if (targetDeck.length === 0) { return (card.value % 13) === 12; } // 如果目標非空牌堆，則檢查最後一張 const lastCard = targetDeck[targetDeck.length - 1]; // 取得兩張牌花色必須一紅一黑 const lastCardSymbol = Math.floor(lastCard.value / 13); const cardSymbol = Math.floor(card.value / 13); // 兩張牌顏色相同則移動無效 if (lastCardSymbol == cardSymbol || (lastCardSymbol + cardSymbol) == 3) { return false; } // 檢查數字是否連續 return (lastCard.value % 13 - 1) == (card.value % 13) } 小結 今天主要是撰寫邏輯去限制撲克牌的移動，過程中推導公式也蠻開心的， 甚至還為專案補上@types強化VSCode的開發體驗，同時也將畫面調整接近紙牌接龍的狀態。\n目前持續快兩週的一邊開發一邊寫稿，文章變得更像Side Project的錨點讓我隨時找回開發的方向，而程式碼也在約束文章不能太空泛，這種彼此牽制的開發模式目前感受良好也從中學習許多。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day13 參考\nWiki 紙牌接龍 虛擬加載-typescript-jsdoc-定義檔 ","permalink":"https://kabuto412rock.github.io/posts/it-day13/","summary":"今日預計實作項目:\n☑️ 只能對牌尾進行翻牌 ☑️ 牌尾自動翻牌 ☑️ 限制疊牌順序 只能對牌尾進行翻牌 新增函數openCard(cards, element)因為需要確認點擊卡牌確實是在牌尾， 所以需要參數cards對應原本的卡牌陣列、參數element對應點擊的卡牌元素。\n檢查牌尾就單純檢查element的數字(value)是否跟陣列cards的最後一筆數字相同， 在這邊的情況不用擔心cards的長度為0，因為所在牌堆沒有卡牌自然就不會渲染使用openCard函數的\u0026lt;Card\u0026gt;元件。\n/** 開牌函數 * @param {Card[]} cards * @param {Card} element */ function openCard(cards, element) { let same = cards[cards.length - 1].value == element.value; if (same) { element.isOpen = true; } } 調整每一個\u0026lt;Card\u0026gt;元件的@click監聽，以下以第1牌堆的樣板舉例:\n\u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; @click=\u0026#34;openCard(cardStacks.first, element)\u0026#34; /\u0026gt; 第2、3牌堆只需將cardStacks.first中的first替換成對應陣列second和third， 雖然下一步牌尾會自動翻牌不需要人去手動翻開、但還是要避免有人去對非牌尾的開牌。\n牌尾自動翻牌 這部分我是依賴Vue本身的watch去監聽牌堆的變化， 跟上一個步驟很像的取得最後一張牌lastCard並打開isOpen = true，不一樣的是需要真的檢查牌堆是否為空的情況，避免出現undefined的Error\nwatch(cardStacks, (stacks) =\u0026gt; { // 檢查每組牌堆最後一張 [\u0026#39;first\u0026#39;, \u0026#39;second\u0026#39;, \u0026#39;third\u0026#39;].forEach(cardName =\u0026gt; { if (stacks[cardName].","title":"Day13 牌尾自動翻牌、限制疊牌順序"},{"content":"今天預計實作接龍紙牌的拖曳規則\n☑️ 拖曳卡牌只能置放到目標牌堆的牌尾 -\u0026gt; 只能置放至目標最後 ☑️ 牌堆只有打開的牌才能進行拖曳 -\u0026gt; 蓋牌無法拖曳 拖曳卡牌只能置放到目標牌堆的牌尾 檢查方式很簡單，首先將昨日的:move函數內的變數result判斷先改成用let宣告， 因為不能任意插入前面的順序，所以增加判斷只有新目標位置futureIndex等於目標牌堆陣列的長度cardStacks[to].length時才可以進行移動。\n如果要移動到的目標牌堆沒有牌，futureIndex就需要等於0 如果要移動到目標牌堆有1張牌，futureIndex就需要等於1 總之目標牌堆有N張牌，futureIndex就要為N，以此類推\u0026hellip; 實際程式碼 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 let result = evt.from !== evt.to; // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const { index, futureIndex } = evt.draggedContext; // 只能移動目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; if (result) { // 中間略 } return result; } 牌堆只有打開的牌才能進行拖曳 先初始化改為39張牌均分給3個牌堆且將所有牌都闔上， 這樣接下來才能測試闔牌狀態不能拖曳。\nconst cardStacks = reactive({ first: [], second: [], third: [] }); onMounted(() =\u0026gt; { const data = geneateDeck(39, false); cardStacks.first = data.slice(0, 13);// 梅花A~梅花K cardStacks.second = data.slice(13, 26);// 方塊A~~方塊K cardStacks.third = data.slice(26); // 紅心A~~紅心K }); 因為多一個牌堆除了調整樣板，但同樣也在新牌堆樣板添加ref=\u0026quot;third\u0026quot;，方便接下來在:move中判斷拖曳來源的DOM是對應cardStacks內的哪個陣列。\n看到這邊聰明的讀者大概想到又要調整:move函數內的變數result，Bingo!\n只需要在函數內if (result) {的上方添加底下程式碼:\n// 移動的牌必須是開著的 result = result \u0026amp;\u0026amp; cardStacks[from][index].isOpen; 到此闔牌無法移動已經完成，但今天的工作還沒結束。\n因為目前全部的牌都處於蓋牌狀態，為了開發測試需要所以決定簡單調整樣板補上@click的事件，讓所有的牌只要點了就會開牌。\n\u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; @click=\u0026#34;() =\u0026gt; element.isOpen = true\u0026#34; /\u0026gt; 小結 今天雖然實作拖曳至牌尾、預防隨意拖曳牌堆的限制，但在紙牌接龍的情況其實還有:\n只能對牌尾進行開牌 牌的數字有順序接號且非同色系的情況才能移動至牌尾 這部分就留待明日繼續煩惱囉😁\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day12 ","permalink":"https://kabuto412rock.github.io/posts/it-day12/","summary":"今天預計實作接龍紙牌的拖曳規則\n☑️ 拖曳卡牌只能置放到目標牌堆的牌尾 -\u0026gt; 只能置放至目標最後 ☑️ 牌堆只有打開的牌才能進行拖曳 -\u0026gt; 蓋牌無法拖曳 拖曳卡牌只能置放到目標牌堆的牌尾 檢查方式很簡單，首先將昨日的:move函數內的變數result判斷先改成用let宣告， 因為不能任意插入前面的順序，所以增加判斷只有新目標位置futureIndex等於目標牌堆陣列的長度cardStacks[to].length時才可以進行移動。\n如果要移動到的目標牌堆沒有牌，futureIndex就需要等於0 如果要移動到目標牌堆有1張牌，futureIndex就需要等於1 總之目標牌堆有N張牌，futureIndex就要為N，以此類推\u0026hellip; 實際程式碼 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 let result = evt.from !== evt.to; // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const { index, futureIndex } = evt.draggedContext; // 只能移動目標牌堆的最後一張牌 result = result \u0026amp;\u0026amp; futureIndex == cardStacks[to].length; if (result) { // 中間略 } return result; } 牌堆只有打開的牌才能進行拖曳 先初始化改為39張牌均分給3個牌堆且將所有牌都闔上， 這樣接下來才能測試闔牌狀態不能拖曳。\nconst cardStacks = reactive({ first: [], second: [], third: [] }); onMounted(() =\u0026gt; { const data = geneateDeck(39, false); cardStacks.","title":"Day 12 實作拖曳卡牌只能置放到目標牌堆的牌尾、蓋牌無法拖曳"},{"content":"今日預計只實作如何一次拖曳 多張卡牌\n多張卡牌拖曳的考察研究 這部分可能會讓很多人(我)失望，因為vue.draggable.next最近一次的合併更新在2021年8月， 所以目前Vue3無法像原本Vue2能使用vue.draggable的Multi-drag的擴充功能，所以我捨棄使用套件原生多筆拖曳的想法和 拖曳多張牌完美的畫面效果。\n如果願意改變資料結構為巢狀Vue3版本還是有辦法對巢狀物件進行一次性的拖曳，但對我來說在未來資料處理的靈活性降低又提高判斷卡牌順序的複雜度因此不考慮。\n想法邏輯 從來源牌堆先拖曳一張牌A移動到目標牌堆的指定位置 將來源牌堆中A牌後的剩餘卡片複製到目標牌堆的指定位置後方 刪除來源牌堆原A位置後的剩餘元素 實作後發現其實可以先複製一份來源牌堆、目標牌堆移動後的結果，後續處理會更為靈活。\n實作邏輯 在:move對應的函數中判斷可拖曳時，產生『若拖曳成功後，來源/目標陣列的新狀態』並封裝成一個箭頭函數儲存至ref變數changeOption。 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 const result = evt.from !== evt.to; if (result) { // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const draggedContext = evt.draggedContext const { index, futureIndex } = draggedContext; // 產生多筆拖曳後，來源牌堆、目的牌堆的陣列變動後的結果 const newFromCards = cardStacks[from].slice(0, index); const newToCards = [ ...cardStacks[to].slice(0, futureIndex), ...cardStacks[from].slice(index), ...cardStacks[to].slice(futureIndex) ]; // 將變動牌堆的函數暫存，預計等到拖曳完成後執行 changeOption.value = () =\u0026gt; { cardStacks[from] = newFromCards; cardStacks[to] = newToCards; changeOption.value = null; }; } // 仍使用原生的拖曳效果 return result; } 當@change事件發生時，若定義ref變數changeOption有值則執行第1點暫存的函數，將最終結果更新對應的牌堆陣列之中。 @change只有在卡牌拖曳完成對陣列產生異動時才會自動被執行，此為draggable原始機制\nfunction cardChange(event) { if (changeOption.value) { changeOption.value(); changeOption.value = null; } else { console.log(`no trigger changeOption`); }; } 樣板調整除了\u0026lt;draggable\u0026gt;的屬性:move、@change之外，眼尖的朋友可以注意到兩個\u0026lt;draggable\u0026gt;分別添加了ref=\u0026quot;first\u0026quot; 和ref=\u0026quot;second\u0026quot;對應到第一/第二牌堆的元素，主要是為了第1點在:move函數執行中可以判斷來源和目標陣列對應到cardStacks內的哪一個陣列。 \u0026lt;GameBoard\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h4 class=\u0026#34;title\u0026#34;\u0026gt;牌堆1\u0026lt;/h4\u0026gt; \u0026lt;draggable :list=\u0026#34;cardStacks.first\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;\u0026#34; :move=\u0026#34;limitLocalMove\u0026#34; @change=\u0026#34;cardChange\u0026#34; ref=\u0026#34;first\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h4 class=\u0026#34;title\u0026#34;\u0026gt;牌堆2\u0026lt;/h4\u0026gt; \u0026lt;draggable :list=\u0026#34;cardStacks.second\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem); background-color: yellow;padding: 1px;\u0026#34; :move=\u0026#34;limitLocalMove\u0026#34; @change=\u0026#34;cardChange\u0026#34; ref=\u0026#34;second\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/GameBoard\u0026gt; 因為:move本身攜帶的資訊無法得到拖曳來源、目標的:list，但卻有紀錄拖曳列表來源、目標的DOM(from,to)，所以撰寫一個函數可取得DOM所對應的牌組名稱。\nfunction getDomName(dom) { if (dom == first.value.targetDomElement) { return \u0026#39;first\u0026#39;; } else if (dom == second.value.targetDomElement) { return \u0026#39;second\u0026#39;; } else { return \u0026#39;none\u0026#39;; } } 上方的first/second都有先定義成ref(null)否則執行可是會失敗的喔!\n如下所示:\n\u0026lt;script setup\u0026gt; const first = ref(null); const second = ref(null); // ... \u0026lt;/script\u0026gt; 小結 雖然原本除了多筆拖曳還想要額外判斷特定順序，但花了蠻多時間在vue.draggable.next要如何正常實現畫面，最終還是只撰寫/實作多筆拖曳的功能。\n實作前思考最理想的狀態，實作中則逐步去做取捨，若一昧追求完美便無法完成作品/寫稿，但身為軟體工程師同時需要考慮到作品的未來運行和功能上的調整，實作後仍需思考是否有改善的空間。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day11 參考\nSortableJS/Sortable SortableJS/vue.draggable.next ","permalink":"https://kabuto412rock.github.io/posts/it-day11/","summary":"今日預計只實作如何一次拖曳 多張卡牌\n多張卡牌拖曳的考察研究 這部分可能會讓很多人(我)失望，因為vue.draggable.next最近一次的合併更新在2021年8月， 所以目前Vue3無法像原本Vue2能使用vue.draggable的Multi-drag的擴充功能，所以我捨棄使用套件原生多筆拖曳的想法和 拖曳多張牌完美的畫面效果。\n如果願意改變資料結構為巢狀Vue3版本還是有辦法對巢狀物件進行一次性的拖曳，但對我來說在未來資料處理的靈活性降低又提高判斷卡牌順序的複雜度因此不考慮。\n想法邏輯 從來源牌堆先拖曳一張牌A移動到目標牌堆的指定位置 將來源牌堆中A牌後的剩餘卡片複製到目標牌堆的指定位置後方 刪除來源牌堆原A位置後的剩餘元素 實作後發現其實可以先複製一份來源牌堆、目標牌堆移動後的結果，後續處理會更為靈活。\n實作邏輯 在:move對應的函數中判斷可拖曳時，產生『若拖曳成功後，來源/目標陣列的新狀態』並封裝成一個箭頭函數儲存至ref變數changeOption。 function limitLocalMove(evt) { // 限制同個牌堆無法拖曳 const result = evt.from !== evt.to; if (result) { // 取得牌堆的來源、目標名稱，對應reactive`cardStacks`內的名稱 const from = getDomName(evt.from); const to = getDomName(evt.to); const draggedContext = evt.draggedContext const { index, futureIndex } = draggedContext; // 產生多筆拖曳後，來源牌堆、目的牌堆的陣列變動後的結果 const newFromCards = cardStacks[from].slice(0, index); const newToCards = [ ...cardStacks[to].slice(0, futureIndex), ...cardStacks[from].slice(index), ...cardStacks[to].slice(futureIndex) ]; // 將變動牌堆的函數暫存，預計等到拖曳完成後執行 changeOption.value = () =\u0026gt; { cardStacks[from] = newFromCards; cardStacks[to] = newToCards; changeOption.","title":"Day 11 拖曳紙牌的效果(三)如何一次拖曳多張卡牌"},{"content":"今天來研究兩個列表的拖曳和如何限制列表的拖曳，學習內容主要來自vue.draggable文件的內容和親身實作進行分析。\n先實現兩個列表的拖曳 昨天已學過如何製作單一列表的拖曳，先將相同的\u0026lt;draggable\u0026gt;內容複製往下貼， 複製的另一個\u0026lt;draggable\u0026gt;只需要調整屬性:list成想要對應的另一個陣列，並且兩個\u0026lt;draggable\u0026gt;添加相同的屬性group則自動實現兩個列表拖曳的關聯。\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;secondCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 如何限制列表的拖曳 前面已先實現了兩列表的拖曳，但為求理解仍保留著@change=\u0026quot;console.log\u0026quot;，在限制拖曳之前，我必須先觀察拖曳完成前能得到的資訊，所以我必須先觀察變動後@change實際印了什麼有用的資訊。\n因為如果只是要單純限制一個\u0026lt;draggable\u0026gt;不能拖曳移入移出，只需要設定屬性:move=\u0026quot;() =\u0026gt; false\u0026quot;，但我想做的不僅僅如此。\n不同牌堆的移動 將牌堆1的梅花A移動到牌堆2後，可觀察到開發人員工具的Console依序印出兩個物件:\n內含added屬性，且added物件本身包含陣列移動的元素element和目標陣列內的新位置newIndex 內含removed屬性，且removed物件本身包含陣列移動的元素element和原陣列內的舊位置oldIndex 這兩個@change是由各自受影響的Draggable所觸發，但內含的元素是相同的\n同牌堆的移動 將同牌堆的第三張牌(梅花3)移動到第六張牌(梅花6)的位置，則只印出一個包含屬性moved的物件， 且moved物件本身包含陣列移動的元素本身element和新位置newIndex和舊位置oldIndex的資訊。 從此可推測，如果要禁止同牌堆內的移動，只需要禁止moved的行為。\n禁止同牌堆的內部拖曳 從官方文件中可查到屬性:move對應的函數只要回傳false即可取消此次的拖曳。\nfunction onMoveCallback(evt, originalEvent){ ... // return false; — for cancel } 這邊我只印出參數evt得到的資料，內容跟@change不一樣的超乎想像多資訊😫，而且跟@change不同的是，這個:move對應函數只要拖曳卡牌到某一張卡的上面就會觸發一次 但好險\u0026hellip;如果只需要判斷是否在同個牌堆只需要看evt內的屬性from, to是否為相同DOM元素即可， 因為from、to分別代表拖曳的元素是 來自哪一個draggable元件 和 即將放置在哪一個draggable元件。\nfunction limitLocalMove(evt, originalEvent) { // 限制同個牌堆無法拖曳 return evt.from !== evt.to; } 小結 今天慢慢花時間理解也希望能幫助打算使用vue.draggable，也理解如何限制拖曳發生。\n明天預計實作牌堆需要在特定順序才能進行拖曳、如何一次拖曳多筆元素。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day10 參考\nvue.draggable.next#move ","permalink":"https://kabuto412rock.github.io/posts/it-day10/","summary":"今天來研究兩個列表的拖曳和如何限制列表的拖曳，學習內容主要來自vue.draggable文件的內容和親身實作進行分析。\n先實現兩個列表的拖曳 昨天已學過如何製作單一列表的拖曳，先將相同的\u0026lt;draggable\u0026gt;內容複製往下貼， 複製的另一個\u0026lt;draggable\u0026gt;只需要調整屬性:list成想要對應的另一個陣列，並且兩個\u0026lt;draggable\u0026gt;添加相同的屬性group則自動實現兩個列表拖曳的關聯。\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;draggable :list=\u0026#34;secondCardStack\u0026#34; group=\u0026#34;pokers\u0026#34; itemKey=\u0026#34;value\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 如何限制列表的拖曳 前面已先實現了兩列表的拖曳，但為求理解仍保留著@change=\u0026quot;console.log\u0026quot;，在限制拖曳之前，我必須先觀察拖曳完成前能得到的資訊，所以我必須先觀察變動後@change實際印了什麼有用的資訊。\n因為如果只是要單純限制一個\u0026lt;draggable\u0026gt;不能拖曳移入移出，只需要設定屬性:move=\u0026quot;() =\u0026gt; false\u0026quot;，但我想做的不僅僅如此。\n不同牌堆的移動 將牌堆1的梅花A移動到牌堆2後，可觀察到開發人員工具的Console依序印出兩個物件:\n內含added屬性，且added物件本身包含陣列移動的元素element和目標陣列內的新位置newIndex 內含removed屬性，且removed物件本身包含陣列移動的元素element和原陣列內的舊位置oldIndex 這兩個@change是由各自受影響的Draggable所觸發，但內含的元素是相同的\n同牌堆的移動 將同牌堆的第三張牌(梅花3)移動到第六張牌(梅花6)的位置，則只印出一個包含屬性moved的物件， 且moved物件本身包含陣列移動的元素本身element和新位置newIndex和舊位置oldIndex的資訊。 從此可推測，如果要禁止同牌堆內的移動，只需要禁止moved的行為。\n禁止同牌堆的內部拖曳 從官方文件中可查到屬性:move對應的函數只要回傳false即可取消此次的拖曳。\nfunction onMoveCallback(evt, originalEvent){ ... // return false; — for cancel } 這邊我只印出參數evt得到的資料，內容跟@change不一樣的超乎想像多資訊😫，而且跟@change不同的是，這個:move對應函數只要拖曳卡牌到某一張卡的上面就會觸發一次 但好險\u0026hellip;如果只需要判斷是否在同個牌堆只需要看evt內的屬性from, to是否為相同DOM元素即可， 因為from、to分別代表拖曳的元素是 來自哪一個draggable元件 和 即將放置在哪一個draggable元件。","title":"Day 10 拖曳紙牌的效果(二)限制內部拖曳"},{"content":"玩紙牌接龍最重要的就是卡牌會移來移去，之前都是用點的移動定點， 今天來試試看如何撰寫拖曳紙牌的功能。\n安裝依賴 因為重頭學習理解拖曳，對我來說太麻煩也太無聊， 乾脆就使用現成的套件Vue.Draggable吧!\n因為使用的是Vue3專案，所以必須安裝有標註next的版本。\nnpm i -S vuedraggable@next 單一列表的拖曳使用 我也還在理解該套件中，接下來的過程會盡可能去蕪存菁，但不失細節。\n首先一定要先引入vuedraggable，如下所示:\n\u0026lt;script setup\u0026gt; import draggable from \u0026#39;vuedraggable\u0026#39; // ...other template \u0026lt;/script\u0026gt; 樣板的部分則如下:\n\u0026lt;template\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; itemKey=\u0026#34;value\u0026#34; @change=\u0026#34;console.log\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/template\u0026gt; 這樣的寫法在通常就已可運用，接下來讓我們來逐一理解\u0026lt;draggable\u0026gt;每個欄位的意義和預設行為\u0026hellip;\n:list 首先:list內設定的是一個參考到陣列的ref或reactive變數，只要裡面參考到的是Array即可， 這可以讓\u0026lt;draggable\u0026gt;明白當列表項目被拖曳移動時自動修改的對象。\n// 此處genearateDeck(20, true)會回傳20個物件的Array物件 const firstCardStack = ref(geneateDeck(20, true)); // 為求簡單也能寫成底下這樣 // const firstCardStack = ref([]); itemKey屬性 第二個重要的屬性是itemKey，代表前面陣列中每一個元素的唯一值，基本上就跟v-for內用到的:key有相同作用，可讓元件從itemKey明白內部元素的差異進而去做列表更新。\n此處會設定itemKey=\u0026quot;value\u0026quot;，是因為參考的陣列firstCardStack每一個元素的構造如下:\n{ value: number, // 撲克牌值，Ex: 0 對應 ♣A isOpen: boolean // 開牌狀態，Ex: false 對應 蓋牌樣式 } 嘗試過不添加itemKey仍可拖曳且參考的陣列有更新，但會發生UI不會刷新的窘境🤣\n@change屬性 目前先使用console.log，可印出包含欄位moved的物件，moved內的構造如下:\n{ newIndex: 13 // 拖曳後項目的新索引 oldIndex: 0 // 拖曳項目的原索引 } \u0026lt;draggable\u0026gt;內部 傳進draggable內部的slot區塊，這部分我在重寫一次如下:\n\u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; 可以方便理解成只是從下方v-for寫法換成上方的兩層式寫法:\n\u0026lt;Card v-for=\u0026#34;(element, index) in firstCardStack\u0026#34; :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; 外層的\u0026lt;template\u0026gt;的屬性#item只是省略了要迭代哪個陣列的v-for寫法而已，至於為什麼要這樣設計就要問原作者了哈哈ˊWˋ\n小結 目前的卡牌列表是可以任意切換順序，但真實的接龍是不能這樣隨意拖曳， 明日再來研究如何限制列表的拖曳、兩個列表的拖曳。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day09 參考資料\nvue.draggable的Github vue.draggable 兩列表交換範例(SFC) ","permalink":"https://kabuto412rock.github.io/posts/it-day9/","summary":"玩紙牌接龍最重要的就是卡牌會移來移去，之前都是用點的移動定點， 今天來試試看如何撰寫拖曳紙牌的功能。\n安裝依賴 因為重頭學習理解拖曳，對我來說太麻煩也太無聊， 乾脆就使用現成的套件Vue.Draggable吧!\n因為使用的是Vue3專案，所以必須安裝有標註next的版本。\nnpm i -S vuedraggable@next 單一列表的拖曳使用 我也還在理解該套件中，接下來的過程會盡可能去蕪存菁，但不失細節。\n首先一定要先引入vuedraggable，如下所示:\n\u0026lt;script setup\u0026gt; import draggable from \u0026#39;vuedraggable\u0026#39; // ...other template \u0026lt;/script\u0026gt; 樣板的部分則如下:\n\u0026lt;template\u0026gt; \u0026lt;draggable :list=\u0026#34;firstCardStack\u0026#34; itemKey=\u0026#34;value\u0026#34; @change=\u0026#34;console.log\u0026#34; style=\u0026#34;display: grid; grid-template-columns: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;template #item=\u0026#34;{ element, index }\u0026#34;\u0026gt; \u0026lt;Card :value=\u0026#34;element.value\u0026#34; :isOpen=\u0026#34;element.isOpen\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/draggable\u0026gt; \u0026lt;/template\u0026gt; 這樣的寫法在通常就已可運用，接下來讓我們來逐一理解\u0026lt;draggable\u0026gt;每個欄位的意義和預設行為\u0026hellip;\n:list 首先:list內設定的是一個參考到陣列的ref或reactive變數，只要裡面參考到的是Array即可， 這可以讓\u0026lt;draggable\u0026gt;明白當列表項目被拖曳移動時自動修改的對象。\n// 此處genearateDeck(20, true)會回傳20個物件的Array物件 const firstCardStack = ref(geneateDeck(20, true)); // 為求簡單也能寫成底下這樣 // const firstCardStack = ref([]); itemKey屬性 第二個重要的屬性是itemKey，代表前面陣列中每一個元素的唯一值，基本上就跟v-for內用到的:key有相同作用，可讓元件從itemKey明白內部元素的差異進而去做列表更新。\n此處會設定itemKey=\u0026quot;value\u0026quot;，是因為參考的陣列firstCardStack每一個元素的構造如下:\n{ value: number, // 撲克牌值，Ex: 0 對應 ♣A isOpen: boolean // 開牌狀態，Ex: false 對應 蓋牌樣式 } 嘗試過不添加itemKey仍可拖曳且參考的陣列有更新，但會發生UI不會刷新的窘境🤣","title":"Day 09 拖曳紙牌的效果(一)"},{"content":"重點提醒: 沒有真的成功實作卡牌無中斷的移動 在實作的過程中遇到了一些問題，找到替代方案先記錄下來。\n最初的思路 在前一篇文章中，我們已經完成了牌堆的製作，接下來我們要來製作牌堆的卡牌移動動畫。 在開始實作之前，我必須決定要用CSS或是JS實現?\n如果牌堆的位置永遠是固定的，或許可以用CSS來實現，但是我們要移動的是牌堆位置不一定永遠在那， 而且牌堆的卡牌數量是不固定的，更加深了預設的座標位置，所以我想這必須用JS來實現， 至少需要JS取得動態元素的位置。\n動畫的實作 第一個問題對我來說是，我要怎麼知道卡牌的位置? 起始和結束的位置都是不固定的，所以我必須要先取得卡牌的位置，才能夠進行動畫的實作。\n取得當前牌堆的位置的方法有很多種，我在這邊使用的是getBoundingClientRect()， 這個方法可以取得當前元素的相對位置+寬高，但是這個方法是在DOM上的，所以我利用const cardBox = ref(null)設定一個參考， Vue3會自動找到template中使用ref=\u0026quot;cardBox\u0026quot;的元素，並且將其綁定到cardBox上，這樣我就可以在\u0026lt;script setup\u0026gt;中使用cardBox.value來取得HTML元素本身。\n因為元件渲染掛載畫面上便會觸發onMounted事件，所以我在onMounted中取得元素的位置，並且透過emit傳遞卡片的絕對位置給父元件。\n至於為什麼是絕對位置，因為我們要移動的是卡片，而不是牌堆，所以我們必須要知道卡片的絕對位置，才能夠進行移動。 雖然後來我失敗了，但是我還是想記錄一下這個方法，因為我覺得這個方法還是很有用的。\n// CardColumn.vue \u0026lt;script setup\u0026gt; // ... const cardBox = ref(null); onMounted(() =\u0026gt; { const rect = cardBox.value.getBoundingClientRect(); const x = window.scrollX + rect.left; const y = window.scrollY + rect.top; emit(\u0026#39;position\u0026#39;, { x, y }); }) \u0026lt;/script\u0026gt; \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34; ref=\u0026#34;cardBox\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;(event) =\u0026gt; onClick(event.target)\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 然後在上層HomeView.vue就寫@position接收到x,y位置變數後，基礎工作就完成了。\n// HomeView.vue \u0026lt;script setup\u0026gt; // 第1, 2個卡堆的位置 const fstCardsPos = ref({ x: 0, y: 0 }); const secondCardsPos = ref({ x: 0, y: 0 }); \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;CardColumn :onClick=\u0026#34;moveCardFromAToB\u0026#34; :cards=\u0026#34;fstCards\u0026#34; @position=\u0026#34;(pos) =\u0026gt; fstCardsPos = pos\u0026#34;\u0026gt;\u0026lt;/CardColumn\u0026gt; \u0026lt;/template\u0026gt; 悲劇開始、希望的結尾 打算在HomeView平常隱藏一個卡片，當卡片從卡堆移動出來時就顯示，並嘗試使用requestAnimationFrame並慢慢移動卡片的絕對位置， 但是我太天真了，程式碼變得一蹋糊塗，浪費一堆時間還沒有成功。\nrequestAnimationFrame 似乎更適合用在Canvas動畫的更新上，而不是DOM移動的實作上\n所以我決定先放棄這個方法，改用Vue3的Transition-group來更簡單實現。\n基本上就是在\u0026lt;TransitionGroup\u0026gt;包裹\u0026lt;Card v-for=\u0026quot;...\u0026quot; /\u0026gt;來渲染卡片，並且在\u0026lt;TransitionGroup\u0026gt;中設定name屬性對應動畫class名稱的前綴 fade，還有因為\u0026lt;TransitionGroup\u0026gt;預設會渲染一個\u0026lt;span\u0026gt;，但是我們要渲染的是\u0026lt;div\u0026gt;，所以要設定tag為\u0026lt;div\u0026gt;。\n\u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34; ref=\u0026#34;cardBox\u0026#34;\u0026gt; \u0026lt;TransitionGroup name=\u0026#34;fade\u0026#34; tag=\u0026#34;div\u0026#34; style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;(event) =\u0026gt; onClick(event.target)\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/TransitionGroup\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; /* 定義動畫的過渡效果 */ .fade-enter-active, .fade-leave-active { transition: opacity 0.5s; transform: translateX(3rem); } .fade-enter, .fade-leave-to { opacity: 0; } \u0026lt;/style\u0026gt; 結論 雖然最後畫面上的卡片流暢的移動效果沒有實現，但還接觸到requestAnimationFrame、getBoundingClientRect()、TransitionGroup等等之前沒用過的知識，所以我覺得這次的實作還是很有收穫的。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day08 參考資料 Shubo的程式開發筆記-深入了解 getBoundingClientRect() 函數，輕鬆獲得元素的大小和位置 Vue官網文件 transition-group 30天實作線上簡報播放機制-使用requestAnimationFrame() ","permalink":"https://kabuto412rock.github.io/posts/it-day8/","summary":"重點提醒: 沒有真的成功實作卡牌無中斷的移動 在實作的過程中遇到了一些問題，找到替代方案先記錄下來。\n最初的思路 在前一篇文章中，我們已經完成了牌堆的製作，接下來我們要來製作牌堆的卡牌移動動畫。 在開始實作之前，我必須決定要用CSS或是JS實現?\n如果牌堆的位置永遠是固定的，或許可以用CSS來實現，但是我們要移動的是牌堆位置不一定永遠在那， 而且牌堆的卡牌數量是不固定的，更加深了預設的座標位置，所以我想這必須用JS來實現， 至少需要JS取得動態元素的位置。\n動畫的實作 第一個問題對我來說是，我要怎麼知道卡牌的位置? 起始和結束的位置都是不固定的，所以我必須要先取得卡牌的位置，才能夠進行動畫的實作。\n取得當前牌堆的位置的方法有很多種，我在這邊使用的是getBoundingClientRect()， 這個方法可以取得當前元素的相對位置+寬高，但是這個方法是在DOM上的，所以我利用const cardBox = ref(null)設定一個參考， Vue3會自動找到template中使用ref=\u0026quot;cardBox\u0026quot;的元素，並且將其綁定到cardBox上，這樣我就可以在\u0026lt;script setup\u0026gt;中使用cardBox.value來取得HTML元素本身。\n因為元件渲染掛載畫面上便會觸發onMounted事件，所以我在onMounted中取得元素的位置，並且透過emit傳遞卡片的絕對位置給父元件。\n至於為什麼是絕對位置，因為我們要移動的是卡片，而不是牌堆，所以我們必須要知道卡片的絕對位置，才能夠進行移動。 雖然後來我失敗了，但是我還是想記錄一下這個方法，因為我覺得這個方法還是很有用的。\n// CardColumn.vue \u0026lt;script setup\u0026gt; // ... const cardBox = ref(null); onMounted(() =\u0026gt; { const rect = cardBox.value.getBoundingClientRect(); const x = window.scrollX + rect.left; const y = window.scrollY + rect.top; emit(\u0026#39;position\u0026#39;, { x, y }); }) \u0026lt;/script\u0026gt; \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 5;\u0026#34; ref=\u0026#34;cardBox\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 2rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;(event) =\u0026gt; onClick(event.","title":"Day 08 牌堆的卡牌移動動畫"},{"content":"今日完成目標 多張卡牌實現垂直重疊，但露出非交疊的部分 垂直重疊 為了產生重疊的效果，個人覺得最酷的方式應該是使用CSS的grid排版， 所以在這之前我利用一個GRID GARDEN的網站練習了一下。\n原本問ChatGPT是得知用每一張卡堆疊都還要套用不同的CSS，如果要多一張牌就要多一個class，或是用sass的寫法達成，但以上這些我都不想要，一來太麻煩、二來sass還要額外引入新依賴，畢竟我只是想堆疊卡牌而已。\n接著說明實際我達成的方式是靠display: grid;要求格狀排列，然後設定grid-template-rows為 repeat(13, 3rem);，這樣就可以讓每一張牌所在的格子都只有3rem的高度，設定13是因為我認為這樣垂直重疊排列卡牌最多只有13張，畢竟紙牌接龍不同花色暫時串再一起也就13張，在現實還是虛擬我的認知都是這樣，當然在設定比13高一點也不會影響，但如果出現第14、15張就會有卡牌不重疊，這點還請注意。\n那為什麼達成重疊呢?我在容器內裝13個元件，每一個元件都只裝一張牌，且元件高度限制都在3rem，但實際元件 牌的高度是超過3rem，所以當我裝入第二張牌就會擋住第一張牌，讓第一張牌只露出3rem的高度，以此類推，最後一張牌則會露出全部。\n// CardColumn.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 1;\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isEmpty\u0026#34;\u0026gt;沒牌\u0026lt;/div\u0026gt; \u0026lt;div v-else style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;onClick\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 額外補充可以注意到card-box內第一個元素是用來稱基本的寬高， 所以第二個元素我則讓他設定position: absolute這樣可以讓其中的格狀排列不會受到第一個元素的影響也不會影響到外部元素。\n若少掉position: absolute的話，會變成底下這樣: 本日小結 原本今天是要用水平堆疊，但看了撲克才發現接龍平常都是玩垂直的\u0026hellip;\n至於卡牌移動則留在明天吧，因為堆疊卡牌的關係讓我意識到沒有我想像動畫的只是水平移動那麼簡單。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day07\n參考資料 GRID GARDEN CSS Grid Layout ","permalink":"https://kabuto412rock.github.io/posts/it-day7/","summary":"今日完成目標 多張卡牌實現垂直重疊，但露出非交疊的部分 垂直重疊 為了產生重疊的效果，個人覺得最酷的方式應該是使用CSS的grid排版， 所以在這之前我利用一個GRID GARDEN的網站練習了一下。\n原本問ChatGPT是得知用每一張卡堆疊都還要套用不同的CSS，如果要多一張牌就要多一個class，或是用sass的寫法達成，但以上這些我都不想要，一來太麻煩、二來sass還要額外引入新依賴，畢竟我只是想堆疊卡牌而已。\n接著說明實際我達成的方式是靠display: grid;要求格狀排列，然後設定grid-template-rows為 repeat(13, 3rem);，這樣就可以讓每一張牌所在的格子都只有3rem的高度，設定13是因為我認為這樣垂直重疊排列卡牌最多只有13張，畢竟紙牌接龍不同花色暫時串再一起也就13張，在現實還是虛擬我的認知都是這樣，當然在設定比13高一點也不會影響，但如果出現第14、15張就會有卡牌不重疊，這點還請注意。\n那為什麼達成重疊呢?我在容器內裝13個元件，每一個元件都只裝一張牌，且元件高度限制都在3rem，但實際元件 牌的高度是超過3rem，所以當我裝入第二張牌就會擋住第一張牌，讓第一張牌只露出3rem的高度，以此類推，最後一張牌則會露出全部。\n// CardColumn.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;visibility: visible; position: absolute; z-index: 1;\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isEmpty\u0026#34;\u0026gt;沒牌\u0026lt;/div\u0026gt; \u0026lt;div v-else style=\u0026#34;; display: grid; grid-template-rows: repeat(13, 3rem);\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; @click=\u0026#34;onClick\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 額外補充可以注意到card-box內第一個元素是用來稱基本的寬高， 所以第二個元素我則讓他設定position: absolute這樣可以讓其中的格狀排列不會受到第一個元素的影響也不會影響到外部元素。\n若少掉position: absolute的話，會變成底下這樣: 本日小結 原本今天是要用水平堆疊，但看了撲克才發現接龍平常都是玩垂直的\u0026hellip;\n至於卡牌移動則留在明天吧，因為堆疊卡牌的關係讓我意識到沒有我想像動畫的只是水平移動那麼簡單。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day07\n參考資料 GRID GARDEN CSS Grid Layout ","title":"Day 07 卡牌垂直重疊"},{"content":"今日目標 研究如何製作牌堆 製作牌堆 製作CardBox元件負責用來擺放卡片的容器，所以結構上就只是比原本卡片元件的稍寬，所以設計成可放子元件進去的樣板，然後當沒放牌時會產生跟牌一個寬高的隱藏區塊到slot裡面。\n// CardBox.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;slot\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 所以目前首頁是長這樣，放了兩個空的CardBox佔位置。\n// HomeView.vue \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;/div\u0026gt; 接著思考如何實作卡牌從A點發到B點，看著畫面思考發現， 不如今天就來實作兩邊卡堆點擊後會移動到對方卡堆的功能。\n這邊為了簡單驗證想法，定義函數geneateDeck(5, true)生成五張卡牌依序是梅花A~5(設為開牌)， 我預計實驗兩個卡堆，所以函數也就設計以下兩個非常相似的函數， 功用正是將卡堆的最後一張卡彈出，並推到另一個牌堆。\n// HomeView.vue const fstCards = ref(geneateDeck(5, true)); const secondCards = ref([]); const moveCardFromAToB = () =\u0026gt; { const card = fstCards.value.pop(); if (card === undefined) return; secondCards.value.push(card); }; const moveCardFromBToA = () =\u0026gt; { const card = secondCards.value.pop(); if (card === undefined) return; fstCards.value.push(card); }; 在經過一番折騰，發現CardBox.vue應該要內部自帶Card元件， 由外面用slot的方式注入進去畫面反而不好寫版面，當然也有可能是我排版功力不夠，改由props傳入cards陣列，由外部HomeView.vue處理資料傳遞，但由CardBox.vue負責卡片的顯示。\n所以可以看到以下CardBox.vue會判斷當前有牌沒牌渲染不同的樣式。\n// CardBox.vue \u0026lt;script setup\u0026gt; import { computed } from \u0026#39;vue\u0026#39;; import Card from \u0026#39;../components/Card.vue\u0026#39;; const { cards } = defineProps([\u0026#39;cards\u0026#39;]); const isEmpty = computed(() =\u0026gt; { return cards.length == 0; }); \u0026lt;/script\u0026gt; \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card card-box\u0026#34; :class=\u0026#34;{ \u0026#39;empty-card-box\u0026#39;: isEmpty }\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isEmpty\u0026#34;\u0026gt;沒牌啦\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;(card, index) in cards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 遊戲大廳HomeView.vue負責處理資料的部分依舊如上，但樣板改成傳簡單的卡片陣列進到\u0026lt;CardBox /\u0026gt;\n// HomeView.vue \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;第一卡堆: \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;第二卡堆: \u0026lt;/div\u0026gt; \u0026lt;CardBox @Click=\u0026#34;moveCardFromAToB\u0026#34; :cards=\u0026#34;fstCards\u0026#34; /\u0026gt; \u0026lt;CardBox @Click=\u0026#34;moveCardFromBToA\u0026#34; :cards=\u0026#34;secondCards\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 小結 本來理想上是要有卡片飛過去特效，但至少有先完成牌堆顯示的部分， 今天開發學習進度不理想或許也卡在我想要如何顯示，而忘記先去思考資料如何改變。\n預計明天會來研究該如何處理牌堆之間飛越的效果，以及牌如何實現水平重疊的部分。\n程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day06\n參考\nChatGPT ","permalink":"https://kabuto412rock.github.io/posts/it-day6/","summary":"今日目標 研究如何製作牌堆 製作牌堆 製作CardBox元件負責用來擺放卡片的容器，所以結構上就只是比原本卡片元件的稍寬，所以設計成可放子元件進去的樣板，然後當沒放牌時會產生跟牌一個寬高的隱藏區塊到slot裡面。\n// CardBox.vue \u0026lt;template \u0026gt; \u0026lt;div class=\u0026#34;card-box\u0026#34;\u0026gt; \u0026lt;slot\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; style=\u0026#34;visibility: hidden;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 所以目前首頁是長這樣，放了兩個空的CardBox佔位置。\n// HomeView.vue \u0026lt;div style=\u0026#34;display: grid; grid-template-columns: 1fr 1fr;\u0026#34;\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;CardBox\u0026gt;\u0026lt;/CardBox\u0026gt; \u0026lt;/div\u0026gt; 接著思考如何實作卡牌從A點發到B點，看著畫面思考發現， 不如今天就來實作兩邊卡堆點擊後會移動到對方卡堆的功能。\n這邊為了簡單驗證想法，定義函數geneateDeck(5, true)生成五張卡牌依序是梅花A~5(設為開牌)， 我預計實驗兩個卡堆，所以函數也就設計以下兩個非常相似的函數， 功用正是將卡堆的最後一張卡彈出，並推到另一個牌堆。\n// HomeView.vue const fstCards = ref(geneateDeck(5, true)); const secondCards = ref([]); const moveCardFromAToB = () =\u0026gt; { const card = fstCards.value.pop(); if (card === undefined) return; secondCards.value.push(card); }; const moveCardFromBToA = () =\u0026gt; { const card = secondCards.","title":"Day 06 實現自訂義牌堆"},{"content":"因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\n引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。\n安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中\n定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import HomeView from \u0026#39;../views/HomeView.vue\u0026#39; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;home\u0026#39;, component: HomeView }, { path: \u0026#39;/game1\u0026#39;, name: \u0026#39;game1\u0026#39;, // Lazy Loading component: () =\u0026gt; import(\u0026#39;../views/Game1View.vue\u0026#39;) } ] }) export default router 接著App.vue修改成以下結構，RouterView就是渲染對應路由的元件，RouterLink則是像\u0026lt;a\u0026gt;的連結會修改網址的對應路由，只是不會重新整理整個網頁，而是動態載入去切換部分畫面、網址。 // App.vue \u0026lt;script setup\u0026gt; import { RouterView, RouterLink } from \u0026#39;vue-router\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;RouterLink to=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/RouterLink\u0026gt; \u0026lt;RouterLink to=\u0026#34;/game1\u0026#34;\u0026gt;撲克牌連連看\u0026lt;/RouterLink\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;RouterView /\u0026gt; \u0026lt;/template\u0026gt; 如果需要當前路由對應到對應連結時自動套用特定class的話，不一定要在每個\u0026lt;RouterLink\u0026gt;寫:class=\u0026quot;\u0026quot;去做判斷，只需要在\u0026lt;style\u0026gt;...\u0026lt;/style\u0026gt;中定義class .router-link-active即可\n.router-link-active { color: #ff4500; font-weight: bold; } 調整main.js，讓Vue實際掛載第四步驟定義的Router // main.js import router from \u0026#39;./router\u0026#39; // 略 const app = createApp(App); app.use(router); app.mount(\u0026#39;#app\u0026#39;) 使用slot重構遊戲標題 一直以來都是用自訂義的Vue組件都是把props的方式傳值進去， 但其實還有一個slot的用法可以把外部組件傳進去。\nslot用法非常簡單，只需要在元件中添加\u0026lt;slot\u0026gt;...\u0026lt;/slot\u0026gt;， 以當前專案舉例，因為之後\u0026lt;FoxyHeader\u0026gt;可能會添加在每個遊戲上方，因為每個遊戲的標題都不相同，所以在此改用slot做調整。\n// FoxyHeader.vue \u0026lt;template\u0026gt; \u0026lt;header\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!-- 以下slot就是標題位置 --\u0026gt; \u0026lt;slot\u0026gt;No child component passed in\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;../assets/imgs/foxy01.jpg\u0026#34; class=\u0026#34;foxyHead\u0026#34; /\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/template\u0026gt; 然後在\u0026lt;FoxyHeader\u0026gt;和\u0026lt;/FoxyHeader\u0026gt;中間添加想要的文字或HTML組件，就填充到對應的slot位置，如果沒填充才會顯示上方寫的No child component passed in。\n// Game1view.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;GameBoard /\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 更多的利用slot 將牌桌\u0026lt;GameBoard\u0026gt;改用slot，控制牌桌上卡片排序的職責也拆成一個新元件\u0026lt;CardRow\u0026gt;， 將撲克牌連連看的內容都移入全都移入Game1View.vue，所以後者的樣板變成以下結構:\n// Game1View.vue \u0026lt;template setup\u0026gt; \u0026lt;main\u0026gt; \u0026lt;FoxyHeader\u0026gt;撲克牌連連看\u0026lt;/FoxyHeader\u0026gt; \u0026lt;button style=\u0026#34;font-size: 1.5rem;\u0026#34; @click=\u0026#34;resetGame\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;div style=\u0026#34;font-size:1.5rem;\u0026#34;\u0026gt; \u0026lt;div\u0026gt;當前分數: {{ gameScore }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;時間經過: {{ timerFormat }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;GameBoard\u0026gt; \u0026lt;CardRow\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; :key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; :isDone=\u0026#34;card.isDone\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; \u0026lt;/CardRow\u0026gt; \u0026lt;/GameBoard\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; 小結 本來想先做牌堆沒做成，倒是學習如何應用Vue Router和slot 程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day05 參考\nhttps://github.com/derycktse/treer https://router.vuejs.org/guide/ ","permalink":"https://kabuto412rock.github.io/posts/it-day5/","summary":"因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。\n引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。\n安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中\n定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import HomeView from \u0026#39;../views/HomeView.vue\u0026#39; const router = createRouter({ history: createWebHistory(import.","title":"Day 05 引入Vue Router切換頁面"},{"content":"改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\n為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;card-flip\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isOpen\u0026#34; class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。\n// Card.vue \u0026lt;style scoped\u0026gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i \u0026lt; length; i++) { let rand_to_swap = Math.floor(Math.random()*(length-i)); let tmp = deck[length-1-i]; deck[length-1-i] = deck[rand_to_swap]; deck[rand_to_swap] = tmp; } return deck; } 產生52張洗亂的牌geneateShuffleDeck，這邊的isDone是為了儲存比對成功， 原本在實作上是會消失，但後來發現連連看的版面會跑掉，所以設計isDone為true時卡片會變成顯示不可點擊的小綠卡。 function geneateShuffleDeck() { let deck = []; for (let i = 0; i \u0026lt; 52; i++) { deck.push({ value: i, isOpen: false, isDone: false }); } return shuffle(deck); } 製作撲克牌連連看 簡單就是52張牌洗亂擺在桌上，翻出兩張牌打開有相同的就等於連上， 因為我記憶力沒多好，所以遊戲規則調整成一次最多可以翻六張，超過張數的話牌就會蓋起來!\n雖然樣式很醜，但也做了記錄了分數、當前經過時間和遊戲重置的功能。 因為有越來越多變數用ref存著，在\u0026lt;script setup\u0026gt;中每次對ref的變數取值/設值都要加 .value 越來越冗長，後面想到可以用reactive宣告一個遊戲狀態存多個屬性欄位，尤其是陣列的部分\n// GameBoard.vue const boardCards = ref(geneateShuffleDeck()); const gameScore = ref(0); const game = reactive({ timer: 0, // 當前經過時間 timerInterval: null, // 儲存執行 setInterval()回傳的intevealId，重置會需要用到 deckCards: [], // 將目前打開的牌放到裡面，方便之後比對是否有數字相同的卡 }) 另外遊戲判定成功，我是使用Watcher去看有沒有分數(gameScore)達到182的，才去跳出結束訊息， 但看網路上watch好像都是用在接收API結果觸發時居多。\n// GameBoard.vue watch(gameScore, (newScore, oldScore) =\u0026gt; { if (newScore \u0026gt;= 182) { alert(`遊戲結束，花費時間: ${timerFormat.value} 總分數: ${newScore}!!!`); resetGame(); } }); 實作完後覺得最複雜的可能就是點卡牌後觸發的翻轉功能，判定成功與否真的蠻麻煩， 傳值/取值也是如果可以有個簡單的中央儲存控管就好了。\n最後成功實作出來也玩了幾回，至少真的像在玩一個遊戲的感覺，雖然最多可以點開六張是比較寬鬆。\n以下是實際運作影片: 參考\n簡單又複雜的洗牌演算法 Vue官網的Watchers 明日預計會做紙牌接龍會用到的牌堆設計，感謝觀看!\n","permalink":"https://kabuto412rock.github.io/posts/it-day4/","summary":"改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法\u0026lt;Transition\u0026gt;\u0026lt;/Transition\u0026gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。\n為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34;\u0026gt; \u0026lt;Transition name=\u0026#34;card-flip\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isOpen\u0026#34; class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/Transition\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。\n// Card.vue \u0026lt;style scoped\u0026gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i \u0026lt; length; i++) { let rand_to_swap = Math.","title":"Day 04 調整翻牌效果\u0026實作洗牌\u0026外加撲克牌連連看"},{"content":"原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式\n實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34; :class=\u0026#34;backCardClass\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([\u0026#34;poker-flip\u0026#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.value.findIndex((item) =\u0026gt; item.value === num) boardCards.value[targetIdx].isOpen = !boardCards.value[targetIdx].isOpen; } 今天也有犯一點蠢，發現開牌的狀態一直傳不下去，但toggleFlip函數又有拿到對應的數字和改變的狀態，\n原來是GameBoard.vue中寫的 \u0026lt;Card /\u0026gt; 元件沒寫屬性 :isOpen 導致程式沒報錯，但有執行異常的情況\u0026hellip;\n今日進度 卡牌翻面有了，點擊後可翻開/覆蓋卡牌，但CSS水平反轉的動畫只套用到蓋牌(開牌就沒動畫)， 雖然有發現Vue3的Transition寫法但奈何悟性不足今天無法應用在上面 Vue3的Transition的寫法也是ChatGPT跟我說的，雖然是錯的居多(範例給我 \u0026lt;transition\u0026gt; 但第一字母其實應該大寫才對XD)，但身為前端菜逼八也是先把它當成關鍵字搜尋引擎使用\n發牌排到明天再做 參考資料\n2018鐵人賽文章-撲克翻轉 ","permalink":"https://kabuto412rock.github.io/posts/it-day3/","summary":"原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式\n實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card \u0026#34; @click=\u0026#34;emit(\u0026#39;poker-flip\u0026#39;, value)\u0026#34; :class=\u0026#34;backCardClass\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-front\u0026#34; :class=\u0026#34;numberClass\u0026#34;\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-back\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([\u0026#34;poker-flip\u0026#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; :isOpen=\u0026#34;card.isOpen\u0026#34; @poker-flip=\u0026#34;toggleFlip\u0026#34; /\u0026gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.","title":"Day 03 完成卡牌自動翻面的效果，但還不完整"},{"content":"動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\n意外發現原來App.vue檔(放置卡牌區的元件)在\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;定義的class雖然會套用到App.vue的\u0026lt;template\u0026gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue\u0026lt;template\u0026gt;內使用相同class名稱的元素\n修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:\nmain { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。\nheader { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\n因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\n複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\n卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\n// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在\u0026lt;script setup\u0026gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 \u0026lt;template\u0026gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\n// Card.vue const pokerValue = props.value; // 對應撲克花色符號，Ex: ♣A const content = PokerValuesMap[pokerValue].content; // 對應撲克顏色class const numberClass = PokerValuesMap[pokerValue].isRed ? \u0026#39;card card-red\u0026#39; : \u0026#39;card\u0026#39;; 卡片也實際使用到 :class 去決定要顯示指定的class，畢竟紅心/梅花是套用紅色。 Card.vue的樣板很簡單是因為把一些轉換顏色物件的部分移到我自訂義的uitls/constants.js進行map對照產生Card實際顯示的花色符號。\n// Card.vue \u0026lt;template\u0026gt; \u0026lt;div :class=\u0026#34;numberClass\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{ content }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 使用到v-for去執行迴圈在GameBoard元件產生52張牌\n// GameBoard.vue \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;game-board\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-row\u0026#34;\u0026gt; \u0026lt;Card v-for=\u0026#34;card in boardCards\u0026#34; key=\u0026#34;card.value\u0026#34; :value=\u0026#34;card.value\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 今日進度 明日預計製作發牌和卡牌自動翻面的效果\n參考: 學習 CSS 版面配置 https://zh-tw.learnlayout.com/ ChatGPT\n","permalink":"https://kabuto412rock.github.io/posts/it-day2/","summary":"動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。\n意外發現原來App.vue檔(放置卡牌區的元件)在\u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt;定義的class雖然會套用到App.vue的\u0026lt;template\u0026gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue\u0026lt;template\u0026gt;內使用相同class名稱的元素\n修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:\nmain { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。\nheader { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8\n因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』\n複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。\n卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:\n// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在\u0026lt;script setup\u0026gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 \u0026lt;template\u0026gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』\n// Card.vue const pokerValue = props.","title":"Day 02 調整css調整桌面\u0026產生52張紙牌"},{"content":"前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。\n原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。\n中短期目標 目前預計想完成的目標如下:\n前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame \u0026amp;\u0026amp; npm run dev 2. 在新專案中建好git repo\ngit init git commit -am \u0026#39;initial\u0026#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip; 照理來說狐狸圖應該要上下對齊才對! 小結 記錄好自己的目標後，Vue建立專案和元件的方式跟React很像， 後面git的步驟只是記錄我是雷包，還好是因為空專案才可以放心執行git push -f\n明日預計來研究CSS怎麼排版\u0026hellip;太久沒碰都忘記了QwQ\n還要想怎麼顯示一張張卡牌在畫面上，真的是毫無信心，就看明天能否靠ChatGPT拯救這一切吧\n參考 Vue建立專案\n","permalink":"https://kabuto412rock.github.io/posts/it-day1/","summary":"前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。\n遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。\n原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。\n中短期目標 目前預計想完成的目標如下:\n前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame \u0026amp;\u0026amp; npm run dev 2. 在新專案中建好git repo\ngit init git commit -am \u0026#39;initial\u0026#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版\u0026hellip; 照理來說狐狸圖應該要上下對齊才對!","title":"Day 01 開發遊戲前先設定目標策略"},{"content":" 前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷\n參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已\n補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!\n在提到參賽主題之前，我想先說明工作後的經歷\n工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\n名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗\n可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\n日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\n當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\n第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\n那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\n那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\n話題扯遠了!\n在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\n這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\n後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\n技術總是層出不窮，身為工程師也只能適應變化 by 我\n現在的工作? 待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\n或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\n參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\n因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，\n但這次想從前端開始著手製作小遊戲!預計會採用不熟悉的Vue3開發專案，希望也能成為下個敲門磚。\n結論 打算報名主題 SideProject30 ，標題就暫定 毫無自信的開發Web遊戲接龍-成為創造龍的英雄之路\n接下來幾天會先摸索一下能用的工具， 姑且就先報名吧? 參賽前的內心話，就先到這吧! ","permalink":"https://kabuto412rock.github.io/posts/adventure-again/","summary":"前言 參賽動力 工作經歷 第一份工作-軟體工程師 第二份工作-後端工程師 現在的工作? 參賽主題方向 結論 前言 因為要參加鐵人賽，所以比賽前想先鍛鍊自己的寫作能力， 撰寫為什麼要參加比賽的原因? 同時回顧自己開始工作後的經歷\n參賽動力 從大學時期就知道有鐵人賽的存在，當初覺得自己技術不強、文筆也不夠好所以就不參加， 但回頭來看只是害怕失敗和變化而已\n補充: 原來我曾經參加過2014鐵人賽，但沒搞清規則是連續30天在Day 9放棄了\u0026hellip; c++第十二天-字串是用陣列存取 這次參賽起因是查詢技術資料的時候，意外看到今年鐵人賽又要開始了， 或許是經過社會的摩擦後，這次我不想再逃避了!!\n在提到參賽主題之前，我想先說明工作後的經歷\n工作經歷 第一份工作-軟體工程師 第一份是在高雄軟體園區找到的，而在之前還婉拒了一家韌體相關C++的工作， 新鮮人的履歷大致就是畢業專題和各種寵物專案結合。\n名為軟體工程師，但實際工作的項目就是開發Web版的系統， 開發環境就是網頁，你沒有看錯\u0026hellip;以現在來看就是Web版的整合開發環境(StackBlitz)， 身為一個菜鳥也是個很珍貴的經驗\n可以想像成用Google Blogger一樣，寫程式就是登入工程師帳號， 如同寫文章一樣方便，但話雖如此依然需要理解HTML、CSS、JavaScript。\n日常的開發就是，但畫面可以使用Bootstrap和JQuery去開發， 而公司的服務核心主要是提供客戶分析的資料，所以工作中也需要理解SQL相關的語法以及如何用平台的語法連接對應的自訂義資料來源產生圖表。\n當然後端平台來源再怎麼強大，也抵不過客戶更想要靈活功能的強大，而這時往往需要寫JavaScript標準化使用者的輸入，甚至手刻一個獨一無二的時間元件也都是在工作難得的經驗。\n第二份工作-後端工程師 找到這份工作前也是我在猶豫的定位是前端or後端工程師，可能因為有了第一份的經驗後， 後來在Udemy買課自學用MERN架構寫了Todo-Platform 在開發的過程中讓我確定想成為後端工程師，當然這份作品也成了我第二份工作的敲門磚，\n那時還被面試官問說你前端寫的還不錯，怎麼會想投後端工程師?\n我還很誠實地回應是CSS框架夠好\u0026gt;口\u0026lt;\n那時使用的便是 daisyUI ，官網的範例都蠻清楚的(適合喜歡撿現成美感的朋友)\n話題扯遠了!\n在這間後端開發是使用NodeJS的 ExpressJS，後端工程師需要先(後)寫API文件， 中期還引入Jira進行專案管理，需要工程師根據PM開的Story 開任務票、估時數。\n這份經歷讓我體驗到前後端分離的開發，系統事前的規劃、後端/前端工程師/PM之間的溝通，或許是同事比上間多很多才有的分工合作，甚至還有QA的存在，這也是我在上間較小公司難以想像的!\n後端部屬的部分內部是用aaPanel(江湖名稱: 寶塔)，對外部屬就不提囉，我相信很多公司都有自己的部屬方式。 畢竟我只是想分享經驗，而非洩漏機密! 這點非常重要!\n技術總是層出不窮，身為工程師也只能適應變化 by 我\n現在的工作? 待業，規律生活鍛鍊身體\u0026hellip;還有學習新知?!\n或許是慣性思維在後端，即使離職後我在Hahow上 Java Spring Boot課程，學習其他工程師是如何利用成熟的框架是去開發/測試API，畢竟ExpressJS的架構有點太無主見，反而需要花費更多心力在更多後端庫的結合上\n參賽主題方向 在上份工作中， 身為後端工程師不太有機會去寫前端， 而是花更多時間去開發API、確認架構、資料等等， 即使撰寫網頁往往也只是利用最純粹的HTML和JavaScript做個展示\n因為玩了手機App在Netflix上的接龍遊戲，想試試看我能不能用 不熟悉的語言、領域，製作Web版的我自己的接龍遊戲，若有時間也想結合後端的部分進行實作，","title":"參加2023鐵人賽前的自我回顧"},{"content":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.json的host值與MySQL容器名稱相同，這是因為容器的hostname預設與名稱相同，其他password等設定可以參考上面對照 { \u0026#34;development\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;dbuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;youiIIDSA2hGpassword\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;mydb\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;express-mysqldb\u0026#34;, \u0026#34;dialect\u0026#34;: \u0026#34;mysql\u0026#34; }, // 略... } 結語 還好當初有在blog的repo設定好Github Aciton和寫README備忘，才可以像現在簡單git push一下就能生成新文章。\n雖然這篇有點水，但至少是好習慣的開始。\n","permalink":"https://kabuto412rock.github.io/posts/express-mysql-docker/","summary":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.","title":"使用Docker建立Node容器+MySQL容器的範本"},{"content":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import\n","permalink":"https://kabuto412rock.github.io/posts/gen-import-file/","summary":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import","title":"如何解決動態載入(Dynamic Import)不支援智能提示"},{"content":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作\n","permalink":"https://kabuto412rock.github.io/posts/chmod-777/","summary":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作","title":"Linux指令-設定檔案讀寫權限 chmod"},{"content":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.json） $ mkdir -p node-demo/app/src $ cd node-demo $ touch app/package.json \u0026amp;\u0026amp; touch app/src/index.js \u0026amp;\u0026amp; touch docker-compose.yaml 複製以下程式碼貼到對應的檔案 node-demo/app/package.json { \u0026#34;name\u0026#34;: \u0026#34;node-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;nodemon src/index.js\u0026#34; }, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.3\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.15\u0026#34; } } node-demo/app/src/index.js const express = require(\u0026#34;express\u0026#34;); const port = 8000; const app = express(); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.status(200).json({ message: \u0026#34;Hello\u0026#34;, }); }); app.listen(port); node-demo/docker-compose.yaml version: \u0026#39;3.1\u0026#39; services: app: image: node:16-alpine command: sh -c \u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34; ports: - 80:8000 working_dir: /app volumes: - \u0026#39;./app/src:/app/src\u0026#39; - \u0026#39;./app/package.json:/app/package.json\u0026#39; - \u0026#39;./app/yarn.lock:/app/yarn.lock\u0026#39; 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 資料夾結構 ├── app │ ├── package.json │ ├── src │ │ └── index.js │ └── yarn.lock └── docker-compose.yaml docker-compose建置說明 說明一下docker-compose.yaml內的細節，因為這些設定的屬性都是docker-compose up時參考的定義，一定要了解一下。\nversion 是說明使用docker-compose.yaml的語法版本，是給Docker CLI看的版本名稱，此處為3.1\nservices 裡面可以看到app有開始往右靠，是因為app是這份文件的其中一個服務\napp (實際上可以取你自己喜歡的名稱web-app之類的) image: 定義app使用的基礎映像檔，比如說node就是一個已經裝好nodejs、npm的環境。 command: 容器啟動每次都會執行的指令 sh -c 只是從執行後面字串\u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34;的指令，去安裝並執行package.json定義的start腳本 ports: 80:8000 代表本地主機的Port 80 會對應到容器的Port 8000 working_dir: 指定容器內當前所在的目錄/app，因為這樣執行command執行 命令時，才可以找到正確package.json後，正確執行相對位置的檔案 volumes: 掛載本地端的./app到容器內的/app，修改本地端./app內的資料夾同時會修改到容器內的/app的程式碼，反之亦然。 不使用DockerFile的COPY的方式，是因為nodemon會監控檔案的變化，COPY的方式只是啟動時一次性的複製到容器內，而非持續性。 結語 這篇文章開頭先描述過程不解釋原理，只是想避免在操作過程、解釋原理這兩件事交錯，因為我想之後可能也會來看這篇文章，但有時真不會看什麼原理（畢竟已經很清楚了）。\n雖然使用Node.js通常還會結合資料庫，但鑑於這篇是第一篇Docker文章，就先不提高文章知識難度，但最後還是囉唆地多寫一點docker-compose細節的部份。\n下一篇應該彙整併MongoDB，感謝你的閱讀。\n","permalink":"https://kabuto412rock.github.io/posts/node-docker/","summary":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.","title":"[教學] 使用Docker建立Nodejs開發環境範本"},{"content":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：\nsnap refresh hugo --channel=extended 產生一個GithubPage的儲存庫 基本上遇到的問題也只有上面的版本問題， 接著一路照著官方教學建立文章看結果， 最後使用hugo -D 建立靜態的HTML檔案，確認public資料夾是否產生資料。\n接著來搞定github page的設定 我參考的是GihubPage的官方教學\n反正照著做在Github建立出一個 username.github.io的儲存庫（Repository)， 後面發布的部落格就是存在這個儲存庫。 接著準備將本地端內容更新到GithubPage的儲存庫。\ngit init # 在本地端建一個Git儲存庫 git branch -m master main # 把本地預設的分支名稱從master改成main git commit -am \u0026#39;init blog\u0026#39;# 把本地端所有檔案都加入版本管理，並產生一個Git commit紀錄。 git remote add origin https://github.com/你的Github帳號/你的Github帳號.github.io.git git push origin main #把本地儲存庫的main分支版本 -\u0026gt; 遠端origin這個儲存庫 但應該100%會出現以下這個錯誤 當前的git push無法直接合併，因為git自動合併至少需要前面的commit是可以對得上的\nBug2 所以第一件事就是把遠端的分支差異移到本地端 先說明一下底下的指令將會導致一些問題發生，因為這篇文章是篇Debug文章\ngit fetch # 執行git fetch後的結果： 可以注意到本地端多了一個斷掉的分支(Branch)叫做origin/main， 且Commit的時間在比本地端的main還早，因為那是之前在Github上手動建時產生的Commit。\n但這時候如果直接下git merge origin/main會出現fatal: 拒絕合併無關的歷史， 我怎麼知道\u0026hellip;因為我試過\u0026hellip;早知道乖乖用git pull的方式就好。\n挽救解法 重新git pull遠端，然後以rebase的方式解決分支衝突問題\ngit pull origin main --rebase --allow-unrelated-histories 可以注意到main和origin/main終於合併成一條線 終於可以成功git push到遠端\ngit push origin main #將在本地端合併好的main分支，重新推上遠端origin 最終關卡是設定Github Action 01 在blog資料夾開一個檔案 .github/workflows/gh-pages.yml 包含以下內容：\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 02 先讓git版本管理，重新測試GithubAction\ngit add . git commit -am \u0026#39;成功建立Github Action的設定檔\u0026#39; git push ","permalink":"https://kabuto412rock.github.io/posts/my-first-post/","summary":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：","title":"[Debug過程] 學Hugo並發布到Github page"}]