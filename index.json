[{"content":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.json的host值與MySQL容器名稱相同，這是因為容器的hostname預設與名稱相同，其他password等設定可以參考上面對照 { \u0026#34;development\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;dbuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;youiIIDSA2hGpassword\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;mydb\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;express-mysqldb\u0026#34;, \u0026#34;dialect\u0026#34;: \u0026#34;mysql\u0026#34; }, // 略... } 結語 還好當初有在blog的repo設定好Github Aciton和寫README備忘，才可以像現在簡單git push一下就能生成新文章。\n雖然這篇有點水，但至少是好習慣的開始。\n","permalink":"https://kabuto412rock.github.io/posts/express-mysql-docker/","summary":"前言 距離上一篇文章使用Docker建立Nodejs開發環境範本 已經有1年啦! 那時竟然還擔心部落格太多文章，Github page是否會被限制\nNode.js (Express.js + MySQL Server) 建置流程(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express-mysql --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 相對上篇文章的差異 使用sequelize-cli進行Sequelize的設定，畢竟手寫migration、seeds太累 docker-compose.yaml多加MySQL容器、Adminer容器 express-mysqldb: image: mysql:8.0 # WARNIGN:正式環境請不要直接使用原生密碼，這只是開發偷懶用 command: --default-authentication-plugin=mysql_native_password restart: always ports: - \u0026#34;3308:3306\u0026#34; environment: # root的密碼 MYSQL_ROOT_PASSWORD: PyoA2hGpSDQordaDAbuiQIIDS # 預設建立的DB名稱 MYSQL_DATABASE: mydb # DB使用者的帳號 MYSQL_USER: dbuser # DB使用者的密碼 MYSQL_PASSWORD: youiIIDSA2hGpassword my-app資料夾可以注意到config/config.","title":"使用Docker建立Node容器+MySQL容器的範本"},{"content":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import\n","permalink":"https://kabuto412rock.github.io/posts/gen-import-file/","summary":"前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑\n我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js\n好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)\n所以問題是如何保持好處且消除壞處\n思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。\n除非添加靜態引用這件事本身是自動的\u0026hellip;\n解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。\n範例 https://github.com/kabuto412rock/gen-static-import","title":"如何解決動態載入(Dynamic Import)不支援智能提示"},{"content":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作\n","permalink":"https://kabuto412rock.github.io/posts/chmod-777/","summary":"問題: WSL2跑Docker也可以寫原本在Ubuntu寫的hugo，又不用額外安裝homebrew 想用VSCode編輯Docker容器產生的文章後，發現我VSCode竟然沒有權限修改檔案。\n解法: 辦法很簡單，修改檔案權限全開\nchmod -R 777 content/ 這篇是用來測試Github action是否還有正常運作","title":"Linux指令-設定檔案讀寫權限 chmod"},{"content":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.json） $ mkdir -p node-demo/app/src $ cd node-demo $ touch app/package.json \u0026amp;\u0026amp; touch app/src/index.js \u0026amp;\u0026amp; touch docker-compose.yaml 複製以下程式碼貼到對應的檔案 node-demo/app/package.json { \u0026#34;name\u0026#34;: \u0026#34;node-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;nodemon src/index.js\u0026#34; }, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.3\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.15\u0026#34; } } node-demo/app/src/index.js const express = require(\u0026#34;express\u0026#34;); const port = 8000; const app = express(); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.status(200).json({ message: \u0026#34;Hello\u0026#34;, }); }); app.listen(port); node-demo/docker-compose.yaml version: \u0026#39;3.1\u0026#39; services: app: image: node:16-alpine command: sh -c \u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34; ports: - 80:8000 working_dir: /app volumes: - \u0026#39;./app/src:/app/src\u0026#39; - \u0026#39;./app/package.json:/app/package.json\u0026#39; - \u0026#39;./app/yarn.lock:/app/yarn.lock\u0026#39; 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 資料夾結構 ├── app │ ├── package.json │ ├── src │ │ └── index.js │ └── yarn.lock └── docker-compose.yaml docker-compose建置說明 說明一下docker-compose.yaml內的細節，因為這些設定的屬性都是docker-compose up時參考的定義，一定要了解一下。\nversion 是說明使用docker-compose.yaml的語法版本，是給Docker CLI看的版本名稱，此處為3.1\nservices 裡面可以看到app有開始往右靠，是因為app是這份文件的其中一個服務\napp (實際上可以取你自己喜歡的名稱web-app之類的) image: 定義app使用的基礎映像檔，比如說node就是一個已經裝好nodejs、npm的環境。 command: 容器啟動每次都會執行的指令 sh -c 只是從執行後面字串\u0026#34;yarn install \u0026amp;\u0026amp; yarn run start\u0026#34;的指令，去安裝並執行package.json定義的start腳本 ports: 80:8000 代表本地主機的Port 80 會對應到容器的Port 8000 working_dir: 指定容器內當前所在的目錄/app，因為這樣執行command執行 命令時，才可以找到正確package.json後，正確執行相對位置的檔案 volumes: 掛載本地端的./app到容器內的/app，修改本地端./app內的資料夾同時會修改到容器內的/app的程式碼，反之亦然。 不使用DockerFile的COPY的方式，是因為nodemon會監控檔案的變化，COPY的方式只是啟動時一次性的複製到容器內，而非持續性。 結語 這篇文章開頭先描述過程不解釋原理，只是想避免在操作過程、解釋原理這兩件事交錯，因為我想之後可能也會來看這篇文章，但有時真不會看什麼原理（畢竟已經很清楚了）。\n雖然使用Node.js通常還會結合資料庫，但鑑於這篇是第一篇Docker文章，就先不提高文章知識難度，但最後還是囉唆地多寫一點docker-compose細節的部份。\n下一篇應該彙整併MongoDB，感謝你的閱讀。\n","permalink":"https://kabuto412rock.github.io/posts/node-docker/","summary":"大綱\n前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 建置流程Ver 2 (手動 -\u0026gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。\n想看docker-compose建置Express + MYSQL環境，請走這\n為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：\n使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -\u0026gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。\n廢話不多說，開始部屬吧\u0026hellip;\nNode.js (Express.js) 建置流程Ver 1(快速克隆 -\u0026gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -\u0026gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.","title":"[教學] 使用Docker建立Nodejs開發環境範本"},{"content":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：\nsnap refresh hugo --channel=extended 產生一個GithubPage的儲存庫 基本上遇到的問題也只有上面的版本問題， 接著一路照著官方教學建立文章看結果， 最後使用hugo -D 建立靜態的HTML檔案，確認public資料夾是否產生資料。\n接著來搞定github page的設定 我參考的是GihubPage的官方教學\n反正照著做在Github建立出一個 username.github.io的儲存庫（Repository)， 後面發布的部落格就是存在這個儲存庫。 接著準備將本地端內容更新到GithubPage的儲存庫。\ngit init # 在本地端建一個Git儲存庫 git branch -m master main # 把本地預設的分支名稱從master改成main git commit -am \u0026#39;init blog\u0026#39;# 把本地端所有檔案都加入版本管理，並產生一個Git commit紀錄。 git remote add origin https://github.com/你的Github帳號/你的Github帳號.github.io.git git push origin main #把本地儲存庫的main分支版本 -\u0026gt; 遠端origin這個儲存庫 但應該100%會出現以下這個錯誤 當前的git push無法直接合併，因為git自動合併至少需要前面的commit是可以對得上的\nBug2 所以第一件事就是把遠端的分支差異移到本地端 先說明一下底下的指令將會導致一些問題發生，因為這篇文章是篇Debug文章\ngit fetch # 執行git fetch後的結果： 可以注意到本地端多了一個斷掉的分支(Branch)叫做origin/main， 且Commit的時間在比本地端的main還早，因為那是之前在Github上手動建時產生的Commit。\n但這時候如果直接下git merge origin/main會出現fatal: 拒絕合併無關的歷史， 我怎麼知道\u0026hellip;因為我試過\u0026hellip;早知道乖乖用git pull的方式就好。\n挽救解法 重新git pull遠端，然後以rebase的方式解決分支衝突問題\ngit pull origin main --rebase --allow-unrelated-histories 可以注意到main和origin/main終於合併成一條線 終於可以成功git push到遠端\ngit push origin main #將在本地端合併好的main分支，重新推上遠端origin 最終關卡是設定Github Action 01 在blog資料夾開一個檔案 .github/workflows/gh-pages.yml 包含以下內容：\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 02 先讓git版本管理，重新測試GithubAction\ngit add . git commit -am \u0026#39;成功建立Github Action的設定檔\u0026#39; git push ","permalink":"https://kabuto412rock.github.io/posts/my-first-post/","summary":"前言 如果你正在尋找一篇Hugo建立GithubPag的教學文，請你繼續搜尋其他文章， 因為這是我第一次使用Hugo跌跌撞撞的除錯紀錄， 而大部分問題都是我自己不照教學走導致需要Debug的文章， 但如果想知道怎麼出錯解錯就繼續看下去，但不建議跟著做下去。\nBug1 前幾次hugo server -D啟動正常，後來卻出錯? 本來想說安裝extended版本比較好，所以重新用snap安裝穩定版， 結果啟動伺服器得到以下結果：\nhugo v0.89.4 linux/amd64 BuildDate=2021-11-17T14:49:26Z Error: Error building site: TOCSS: failed to transform \u0026#34;ananke/css/main.css\u0026#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information Built in 14 ms 我是在Ubuntu的環境下用 snap install hugo安裝Hugo， 而錯誤的原因是用extended版產生部落格，後面又重新切換Hugo穩定版， 但原本的部落格資料需要SCSS/SASS的支援所以才會出現這樣的錯誤。\n解法 因為懶得重新生成檔案，乾脆就用SCSS版本的Hugo：\nsnap remove hugo snap install hugo --channel=extended 或是使用官方提供的方法切換版本：","title":"[Debug過程] 學Hugo並發布到Github page"}]