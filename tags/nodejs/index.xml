<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nodejs on 程式開發者的冒險</title>
    <link>https://kabuto412rock.github.io/tags/nodejs/</link>
    <description>Recent content in Nodejs on 程式開發者的冒險</description>
    <image>
      <url>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Nov 2022 23:28:43 +0000</lastBuildDate><atom:link href="https://kabuto412rock.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何解決動態載入(Dynamic Import)不支援智能提示</title>
      <link>https://kabuto412rock.github.io/posts/gen-import-file/</link>
      <pubDate>Tue, 01 Nov 2022 23:28:43 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/gen-import-file/</guid>
      <description>前言 因為同事目前使用動態載入資料夾內多個程式檔案時，最後由一個特定檔案輸出，但VSCode編輯引用特定檔案的程式碼時，無法看到相對應的智能提示、引用路徑
我手上的NodeJS專案也有類似的例子，比如說多個Model檔定義在一個models資料夾， 最後統一由models/index.js做查詢檔案動態載入所有Model檔案，最後使用任一Model時只需要引用index.js
好處 只要在models新增一個新Model檔，不用特別修改index.js 需要任一Model時只需要引用index.js 壞處 失去了開發時可以享受靜態引用的VSCode提示(AutoComplete、Intellisense)
所以問題是如何保持好處且消除壞處
思考路境 動態載入不會被VSCode支援提示是因為Intellisense只支援靜態分析， 若改為添加靜態引用就失去原本的動態載入的方便。
除非添加靜態引用這件事本身是自動的&amp;hellip;
解法 使用腳本生成靜態引用，如果行得通甚至可以使用類似nodemon去watch特定資料夾內的檔案變化，達到自動生成靜態引用的功能。
範例 https://github.com/kabuto412rock/gen-static-import</description>
    </item>
    
    <item>
      <title>[教學] 使用Docker建立Nodejs開發環境範本</title>
      <link>https://kabuto412rock.github.io/posts/node-docker/</link>
      <pubDate>Sun, 03 Apr 2022 22:22:27 +0800</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/node-docker/</guid>
      <description>大綱
前言 為什麼要用Docker部屬 Node.js (Express.js) 建置流程Ver 1(快速克隆 -&amp;gt; 趕時間) 建置流程Ver 2 (手動 -&amp;gt; 練習過程) node-demo/app/package.json node-demo/app/src/index.js node-demo/docker-compose.yaml 資料夾結構 docker-compose建置說明 version services app (實際上可以取你自己喜歡的名稱web-app之類的) 結語 前言 最近想紀錄一下可重複使用的程式碼片段，這樣之後找就從自己的部落格找會比較方便，尤其是最近常用Docker建立部屬環境。
為什麼要用Docker部屬 雖然網路上可以找到很多理由，但我的理由是：
使用git版本控制，設定檔本身就取代環境建置說明文件 不弄髒本地環境，想刪就刪 替換依賴容易，Ex: MySQL -&amp;gt; Postgresl Docker基本上語法不複雜設定起來也很容易，尤其在建立不熟悉的環境亂試也可以， 且因為Docker有cache layer的關係，所以修改重新跑docker-compose up 也很快就可以建立。
廢話不多說，開始部屬吧&amp;hellip;
Node.js (Express.js) 建置流程Ver 1(快速克隆 -&amp;gt; 趕時間) 直接使用git clone語法下載範例 $ git clone https://github.com/kabuto412rock/node-demo.git --branch express_template --single-branch 啟動服務、關閉服務 # 進到目錄底層 $ cd node-demo # 啟動Docker服務 (node-demo) $ docker-compose up -d # 停止Docker服務 (node-demo) $ docker-compose down 檢查實際結果 http://localhost/ 建置流程Ver 2 (手動 -&amp;gt; 練習過程) 建立相關的檔案＆安裝Express（主要是為了產生package.</description>
    </item>
    
  </channel>
</rss>
