<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>challenge on 程式開發者的冒險</title>
    <link>https://kabuto412rock.github.io/tags/challenge/</link>
    <description>Recent content in challenge on 程式開發者的冒險</description>
    <image>
      <url>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Sep 2023 06:25:37 +0000</lastBuildDate><atom:link href="https://kabuto412rock.github.io/tags/challenge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day04 調整翻牌效果&amp;實作洗牌&amp;外加撲克牌連連看</title>
      <link>https://kabuto412rock.github.io/posts/it-day4/</link>
      <pubDate>Wed, 13 Sep 2023 06:25:37 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day4/</guid>
      <description>改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法&amp;lt;Transition&amp;gt;&amp;lt;/Transition&amp;gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。
為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:
// Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34;&amp;gt; &amp;lt;Transition name=&amp;#34;card-flip&amp;#34; @click=&amp;#34;isOPen = !isOPen&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;isOpen&amp;#34; class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div v-else class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/Transition&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。
// Card.vue &amp;lt;style scoped&amp;gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i &amp;lt; length; i++) { let rand_to_swap = Math.</description>
    </item>
    
    <item>
      <title>Day 03 完成卡牌自動翻面的效果，但還不完整</title>
      <link>https://kabuto412rock.github.io/posts/it-day3/</link>
      <pubDate>Tue, 12 Sep 2023 03:51:05 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day3/</guid>
      <description>原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式
實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34; :class=&amp;#34;backCardClass&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([&amp;#34;poker-flip&amp;#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 &amp;lt;Card v-for=&amp;#34;card in boardCards&amp;#34; key=&amp;#34;card.value&amp;#34; :value=&amp;#34;card.value&amp;#34; :isOpen=&amp;#34;card.isOpen&amp;#34; @poker-flip=&amp;#34;toggleFlip&amp;#34; /&amp;gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.</description>
    </item>
    
    <item>
      <title>Day 02 調整css調整桌面&amp;產生52張紙牌</title>
      <link>https://kabuto412rock.github.io/posts/it-day2/</link>
      <pubDate>Mon, 11 Sep 2023 11:36:54 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day2/</guid>
      <description>動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。
意外發現原來App.vue檔(放置卡牌區的元件)在&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;定義的class雖然會套用到App.vue的&amp;lt;template&amp;gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue&amp;lt;template&amp;gt;內使用相同class名稱的元素
修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:
main { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。
header { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8
因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』
複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。
卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:
// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在&amp;lt;script setup&amp;gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 &amp;lt;template&amp;gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』
// Card.vue const pokerValue = props.</description>
    </item>
    
    <item>
      <title>Day 01 開發遊戲前先設定目標策略</title>
      <link>https://kabuto412rock.github.io/posts/it-day1/</link>
      <pubDate>Sun, 10 Sep 2023 07:51:40 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day1/</guid>
      <description>前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。
遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。
原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。
中短期目標 目前預計想完成的目標如下:
前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame &amp;amp;&amp;amp; npm run dev 2. 在新專案中建好git repo
git init git commit -am &amp;#39;initial&amp;#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版&amp;hellip; 照理來說狐狸圖應該要上下對齊才對!</description>
    </item>
    
  </channel>
</rss>
