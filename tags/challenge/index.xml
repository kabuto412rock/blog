<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>challenge on 程式開發者的冒險</title>
    <link>https://kabuto412rock.github.io/tags/challenge/</link>
    <description>Recent content in challenge on 程式開發者的冒險</description>
    <image>
      <url>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kabuto412rock.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Sep 2023 07:22:58 +0000</lastBuildDate><atom:link href="https://kabuto412rock.github.io/tags/challenge/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day 08 牌堆的卡牌移動動畫</title>
      <link>https://kabuto412rock.github.io/posts/it-day8/</link>
      <pubDate>Sat, 16 Sep 2023 07:22:58 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day8/</guid>
      <description>重點提醒: 沒有真的成功實作卡牌無中斷的移動 在實作的過程中遇到了一些問題，找到替代方案先記錄下來。
最初的思路 在前一篇文章中，我們已經完成了牌堆的製作，接下來我們要來製作牌堆的卡牌移動動畫。 在開始實作之前，我必須決定要用CSS或是JS實現?
如果牌堆的位置永遠是固定的，或許可以用CSS來實現，但是我們要移動的是牌堆位置不一定永遠在那， 而且牌堆的卡牌數量是不固定的，更加深了預設的座標位置，所以我想這必須用JS來實現， 至少需要JS取得動態元素的位置。
動畫的實作 第一個問題對我來說是，我要怎麼知道卡牌的位置? 起始和結束的位置都是不固定的，所以我必須要先取得卡牌的位置，才能夠進行動畫的實作。
取得當前牌堆的位置的方法有很多種，我在這邊使用的是getBoundingClientRect()， 這個方法可以取得當前元素的相對位置+寬高，但是這個方法是在DOM上的，所以我利用const cardBox = ref(null)設定一個參考， Vue3會自動找到template中使用ref=&amp;quot;cardBox&amp;quot;的元素，並且將其綁定到cardBox上，這樣我就可以在&amp;lt;script setup&amp;gt;中使用cardBox.value來取得HTML元素本身。
因為元件渲染掛載畫面上便會觸發onMounted事件，所以我在onMounted中取得元素的位置，並且透過emit傳遞卡片的絕對位置給父元件。
至於為什麼是絕對位置，因為我們要移動的是卡片，而不是牌堆，所以我們必須要知道卡片的絕對位置，才能夠進行移動。 雖然後來我失敗了，但是我還是想記錄一下這個方法，因為我覺得這個方法還是很有用的。
// CardColumn.vue &amp;lt;script setup&amp;gt; // ... const cardBox = ref(null); onMounted(() =&amp;gt; { const rect = cardBox.value.getBoundingClientRect(); const x = window.scrollX + rect.left; const y = window.scrollY + rect.top; emit(&amp;#39;position&amp;#39;, { x, y }); }) &amp;lt;/script&amp;gt; &amp;lt;template &amp;gt; &amp;lt;div class=&amp;#34;card-box&amp;#34; :class=&amp;#34;{ &amp;#39;empty-card-box&amp;#39;: isEmpty }&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34; style=&amp;#34;visibility: hidden;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;visibility: visible; position: absolute; z-index: 5;&amp;#34; ref=&amp;#34;cardBox&amp;#34;&amp;gt; &amp;lt;div style=&amp;#34;; display: grid; grid-template-rows: repeat(13, 2rem);&amp;#34;&amp;gt; &amp;lt;Card v-for=&amp;#34;(card, index) in cards&amp;#34; @click=&amp;#34;(event) =&amp;gt; onClick(event.</description>
    </item>
    
    <item>
      <title>Day 07 卡牌垂直重疊</title>
      <link>https://kabuto412rock.github.io/posts/it-day7/</link>
      <pubDate>Fri, 15 Sep 2023 23:48:02 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day7/</guid>
      <description>今日完成目標 多張卡牌實現垂直重疊，但露出非交疊的部分 垂直重疊 為了產生重疊的效果，個人覺得最酷的方式應該是使用CSS的grid排版， 所以在這之前我利用一個GRID GARDEN的網站練習了一下。
原本問ChatGPT是得知用每一張卡堆疊都還要套用不同的CSS，如果要多一張牌就要多一個class，或是用sass的寫法達成，但以上這些我都不想要，一來太麻煩、二來sass還要額外引入新依賴，畢竟我只是想堆疊卡牌而已。
接著說明實際我達成的方式是靠display: grid;要求格狀排列，然後設定grid-template-rows為 repeat(13, 3rem);，這樣就可以讓每一張牌所在的格子都只有3rem的高度，設定13是因為我認為這樣垂直重疊排列卡牌最多只有13張，畢竟紙牌接龍不同花色暫時串再一起也就13張，在現實還是虛擬我的認知都是這樣，當然在設定比13高一點也不會影響，但如果出現第14、15張就會有卡牌不重疊，這點還請注意。
那為什麼達成重疊呢?我在容器內裝13個元件，每一個元件都只裝一張牌，且元件高度限制都在3rem，但實際元件 牌的高度是超過3rem，所以當我裝入第二張牌就會擋住第一張牌，讓第一張牌只露出3rem的高度，以此類推，最後一張牌則會露出全部。
// CardColumn.vue &amp;lt;template &amp;gt; &amp;lt;div class=&amp;#34;card-box&amp;#34; :class=&amp;#34;{ &amp;#39;empty-card-box&amp;#39;: isEmpty }&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34; style=&amp;#34;visibility: hidden;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;visibility: visible; position: absolute; z-index: 1;&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;isEmpty&amp;#34;&amp;gt;沒牌&amp;lt;/div&amp;gt; &amp;lt;div v-else style=&amp;#34;; display: grid; grid-template-rows: repeat(13, 3rem);&amp;#34;&amp;gt; &amp;lt;Card v-for=&amp;#34;(card, index) in cards&amp;#34; @click=&amp;#34;onClick&amp;#34; :key=&amp;#34;card.value&amp;#34; :value=&amp;#34;card.value&amp;#34; :isOpen=&amp;#34;card.isOpen&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 額外補充可以注意到card-box內第一個元素是用來稱基本的寬高， 所以第二個元素我則讓他設定position: absolute這樣可以讓其中的格狀排列不會受到第一個元素的影響也不會影響到外部元素。
若少掉position: absolute的話，會變成底下這樣: 本日小結 原本今天是要用水平堆疊，但看了撲克才發現接龍平常都是玩垂直的&amp;hellip;
至於卡牌移動則留在明天吧，因為堆疊卡牌的關係讓我意識到沒有我想像動畫的只是水平移動那麼簡單。
程式碼: https://github.com/kabuto412rock/ithelp-pokergame/tree/day07
參考資料 GRID GARDEN CSS Grid Layout </description>
    </item>
    
    <item>
      <title>Day 06 實現自訂義牌堆</title>
      <link>https://kabuto412rock.github.io/posts/it-day6/</link>
      <pubDate>Fri, 15 Sep 2023 04:08:21 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day6/</guid>
      <description>今日目標 研究如何製作牌堆 製作牌堆 製作CardBox元件負責用來擺放卡片的容器，所以結構上就只是比原本卡片元件的稍寬，所以設計成可放子元件進去的樣板，然後當沒放牌時會產生跟牌一個寬高的隱藏區塊到slot裡面。
// CardBox.vue &amp;lt;template &amp;gt; &amp;lt;div class=&amp;#34;card-box&amp;#34;&amp;gt; &amp;lt;slot&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34; style=&amp;#34;visibility: hidden;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 所以目前首頁是長這樣，放了兩個空的CardBox佔位置。
// HomeView.vue &amp;lt;div style=&amp;#34;display: grid; grid-template-columns: 1fr 1fr;&amp;#34;&amp;gt; &amp;lt;CardBox&amp;gt;&amp;lt;/CardBox&amp;gt; &amp;lt;CardBox&amp;gt;&amp;lt;/CardBox&amp;gt; &amp;lt;/div&amp;gt; 接著思考如何實作卡牌從A點發到B點，看著畫面思考發現， 不如今天就來實作兩邊卡堆點擊後會移動到對方卡堆的功能。
這邊為了簡單驗證想法，定義函數geneateDeck(5, true)生成五張卡牌依序是梅花A~5(設為開牌)， 我預計實驗兩個卡堆，所以函數也就設計以下兩個非常相似的函數， 功用正是將卡堆的最後一張卡彈出，並推到另一個牌堆。
// HomeView.vue const fstCards = ref(geneateDeck(5, true)); const secondCards = ref([]); const moveCardFromAToB = () =&amp;gt; { const card = fstCards.value.pop(); if (card === undefined) return; secondCards.value.push(card); }; const moveCardFromBToA = () =&amp;gt; { const card = secondCards.</description>
    </item>
    
    <item>
      <title>Day 05 引入Vue Router切換頁面</title>
      <link>https://kabuto412rock.github.io/posts/it-day5/</link>
      <pubDate>Thu, 14 Sep 2023 03:20:17 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day5/</guid>
      <description>因為想留著昨天完成的撲克牌連連看，預計將不同遊戲的頁面可以做保留並切換， 所以我打算在做牌堆之前，首先應該要了解Vue3在路由頁面的實作是如何切換頁面。
引入 Vue Router 接下來步驟我是參考『直接使用npm create vue@latest指令產生預設攜帶有用Vue Router專案的檔案架構』 下去調整的，所以步驟草率請敬請見諒。
安裝依賴Vue Router npm install vue-router@4 在src底下新增兩個資料夾views和router 在views資料夾底下新增兩個頁面檔Game1View.vue和HomeView.vue src ├─App.vue ├─main.js ├─views | ├─Game1View.vue # 撲克連連看 | └─HomeView.vue # 首頁 ├─utils | ├─constants.js | └─poker-helper.js ├─router | └─index.js ├─components | ├─Card.vue | ├─FoxyHeader.vue | ├─GameBoard.vue | 略... 如果想知道是怎麼產生樹狀目錄，我是在src目錄下執行npx treer -e ./result.txt 便會 將樹狀結構寫到當前的result.txt文件中
定義路由應對應的元件，routes的部分可以有預先載入的功能 // router/index.js import { createRouter, createWebHistory } from &amp;#39;vue-router&amp;#39; import HomeView from &amp;#39;../views/HomeView.vue&amp;#39; const router = createRouter({ history: createWebHistory(import.</description>
    </item>
    
    <item>
      <title>Day 04 調整翻牌效果&amp;實作洗牌&amp;外加撲克牌連連看</title>
      <link>https://kabuto412rock.github.io/posts/it-day4/</link>
      <pubDate>Wed, 13 Sep 2023 06:25:37 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day4/</guid>
      <description>改變翻牌效果 研究Transition的文件後發現跟我想像的動畫變換不同，官方用法&amp;lt;Transition&amp;gt;&amp;lt;/Transition&amp;gt; 包裹內的新舊元件其中一個在動畫過程會先被移除掉或新增，但我先前設計好的CSS會是兩個元素都存在只是一個會被轉到CSS效果轉到背後，因此我的水平翻轉動畫需要兩個元素都存在HTML上。
為了在時間內完成，我打消原本水平翻轉的作法，我改採Transition結合v-if的方式去顯示卡牌正反兩面， 發現用漸進式出現消失也是不錯的效果，以下是樣板的改變:
// Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34;&amp;gt; &amp;lt;Transition name=&amp;#34;card-flip&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;isOpen&amp;#34; class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div v-else class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/Transition&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 參考Vue官方的範例， 在style添加以下後綴是-enter-active/leave-active/-enter-from/-leave-to的class，是為了讓Transition知道動畫要如何改變。
// Card.vue &amp;lt;style scoped&amp;gt; .card-flip-enter-active, .card-flip-leave-active { transition: all 0.5s ease-out; } .card-flip-enter-from, .card-flip-leave-to { opacity: 0; } {/* 略 */} 實作洗牌 實作兩個函數存於utils/poker-helper.js 洗牌的函數shuffle，洗牌採用的演算法參考看別人文章實作 Fisher-Yates 演算法，雖然洗牌用其他方法也可以，但看參考的文章說這個時間複雜度最低。 function shuffle(deck) { let length = deck.length; for (let i = 0; i &amp;lt; length; i++) { let rand_to_swap = Math.</description>
    </item>
    
    <item>
      <title>Day 03 完成卡牌自動翻面的效果，但還不完整</title>
      <link>https://kabuto412rock.github.io/posts/it-day3/</link>
      <pubDate>Tue, 12 Sep 2023 03:51:05 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day3/</guid>
      <description>原本今天預計製作發牌和卡牌自動翻面的效果，希望兩個都能有動畫效果， 但現實的能力讓我想先說說今天的開發方式
實際思考/開發的過程 卡牌翻面 想像的實作過程 沿用原本的Card.vue內的樣板，在裡面分成兩個div區塊， 一個div區塊放正面有花色數字的牌面，另一個則放一張背圖。 在Card.vue內撰寫 @click 去改變卡片的狀態 撰寫CSS的動畫去實現翻面的過程 現實開發 先調整撲克牌背面的樣板，花了些時間讓圖片不會超出卡牌寬高 background-size: cover; 上網查詢是怎麼做翻轉撲克的效果，甚至查到有人做出6個div欄位做出3D方塊，但嘗試改成只有前後的div欄位但發現景深會產生兩張卡片交疊的一點位移就放棄這個寫法 意外查到IT邦上有個純CSS挑戰撲克翻轉，所以就先照著原作的CSS翻轉寫法調整Card.vue樣板 並且添加@click 會觸發emit將點到的卡牌數字回傳至上層進行更新 // Card.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;card &amp;#34; @click=&amp;#34;emit(&amp;#39;poker-flip&amp;#39;, value)&amp;#34; :class=&amp;#34;backCardClass&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-front&amp;#34; :class=&amp;#34;numberClass&amp;#34;&amp;gt;{{ content }}&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-back&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 因為我Vue3是採用SFC(Single-File Components)的寫法，所以定義emit的方式如下所示: // Card.vue const emit = defineEmits([&amp;#34;poker-flip&amp;#34;]); 在上層的元件要接會使用剛剛定義在defineEmits的名稱 @poker-flip // GameBoard.vue 其他都略 &amp;lt;Card v-for=&amp;#34;card in boardCards&amp;#34; key=&amp;#34;card.value&amp;#34; :value=&amp;#34;card.value&amp;#34; :isOpen=&amp;#34;card.isOpen&amp;#34; @poker-flip=&amp;#34;toggleFlip&amp;#34; /&amp;gt; 可能因為練習過ReactJS官網的的關係，知道狀態提升(Lifting State Up)的概念，所以目前所有卡牌資料依然是先放在上層的GameBoard.vue裡面，toggleFlip是我撰寫 // GameBoard.vue function toggleFlip(num) { // 找到對應的開牌狀態且翻轉 const targetIdx = boardCards.</description>
    </item>
    
    <item>
      <title>Day 02 調整css調整桌面&amp;產生52張紙牌</title>
      <link>https://kabuto412rock.github.io/posts/it-day2/</link>
      <pubDate>Mon, 11 Sep 2023 11:36:54 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day2/</guid>
      <description>動工前的準備 因為昨天標題在畫面縮放的情況下會擋住放卡牌的地方，所以早上就先看CSS相關的網站學習並且如何在Vue專案中使用。
意外發現原來App.vue檔(放置卡牌區的元件)在&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;定義的class雖然會套用到App.vue的&amp;lt;template&amp;gt;的元件中，但卻不影響App.vue內引入的GameBoard.vue&amp;lt;template&amp;gt;內使用相同class名稱的元素
修正重疊問題 關於排版的部分身為前端菜雞，就現學現賣使用將元件內部flex-wrap: wrap將包裹標題和卡牌區的main元素進行調整，如下所示:
main { display: flex; flex-wrap: wrap; } 另外並且避免標題的狐狸圖太大，直接對包裹狐狸圖的header元素進行以下的配置， 採用 overflow: hidden; 這可以避免header內的元素超出限制範圍的部分進行隱藏。
header { padding: 1rem; display: flex; align-items: center; width: fit-content; max-height: 100px; text-align: center; overflow: hidden; } 顯示卡牌在牌桌 處理完之後想到今天好像約定要怎麼將卡牌一張張顯示在畫面，但腦袋不知道為什麼想到製作卡牌花色， 所以就使用線上工具vectr製作卡牌花色分別製作成svg檔案 https://vectr.com/design/editor/1dd3ff02-4dc1-4de6-84bb-17b9446450b8
因為我昨天刻的桌子似乎不太適合顯示一堆卡牌， 馬上詢問ChatGPT『能用HTML和CSS做出撲克牌桌的樣子嗎?』
複製得到的回應(HTML和CSS)渲染在瀏覽器上看看，發現它的作法花色其實是用字元表示。 我就放棄顯示svg在div元素上的想法，還有渲染出來的牌桌顏色、卡牌的外框也都採用ChatGPT的作法。
卡牌元件 每一張卡元件都會攜帶的資訊包含一個數字，使用0~51依序去表示梅花A至黑桃K。 另外使用布林值表示當前狀態是開牌/蓋牌，如下所示:
// Card.vue const props = defineProps({ value: Number, isOpen: Boolean }); 另外也學到如果要在&amp;lt;script setup&amp;gt;中拿取屬性資料 defineProps() 需要先存在自訂義的變數，不能像 &amp;lt;template&amp;gt; 那麼自由直接取值 ，原本還想說怎麼白畫面且開發人員工具一直報Error跟我說『value is not defined』
// Card.vue const pokerValue = props.</description>
    </item>
    
    <item>
      <title>Day 01 開發遊戲前先設定目標策略</title>
      <link>https://kabuto412rock.github.io/posts/it-day1/</link>
      <pubDate>Sun, 10 Sep 2023 07:51:40 +0000</pubDate>
      
      <guid>https://kabuto412rock.github.io/posts/it-day1/</guid>
      <description>前言 最終目標是做一個個人版的紙牌接龍，中途也會嘗試做一些延伸的紙牌遊戲。
遊戲的畫面預計會使用我不熟悉的前端框架 Vue3，若有充足的時間我也會結合後端去做整合， 此次參賽也是為了督促自己在前端的技術進步。
原本是想單純參加自我挑戰組， 因為曾在2014參賽第9天就中斷，所以接下來想先在Day 1設定一些目標讓自己可以達成， 過了9年後的我可不想在同個地方掛彩。
中短期目標 目前預計想完成的目標如下:
前期目標 可以玩牌的畫面 產生紙牌 拖曳紙牌 洗牌 中期目標 紙牌動畫移動 紙牌翻轉 使用前面的技術實現心臟病遊戲 後期目標 紙牌接龍 今日目標-建好專案 建立Vue3專案並啟動成功 npm create vue@latest cd ithelp-pokergame &amp;amp;&amp;amp; npm run dev 2. 在新專案中建好git repo
git init git commit -am &amp;#39;initial&amp;#39; 在Github建好一個新的儲存庫 ithelp-pokergame 將本地的git庫跟Github的庫連上對應 git remote add origin https://github.com/kabuto412rock/ithelp-pokergame.git 決定聽從Github老大的main分支選擇，後來又比較奇怪的方式推上Github的Repo過程 # 先在本地建一個main分支 git checkout -b main # 砍了本地原始master分支 git branch -D master # 嘗試拖拉儲存庫 git pull # 設定本地main和遠端main分支對應 git branch --set-upstream-to=origin/main main # 乾脆直接把本地分支全部強推上遠端 git push -f 自己使用平板畫了一隻小狐狸，也替換到了畫面上，但畫面徹底跑版&amp;hellip; 照理來說狐狸圖應該要上下對齊才對!</description>
    </item>
    
  </channel>
</rss>
